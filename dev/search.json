[{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_atrial_fibrillation.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Atrial fibrillation","text":"Whilst data patient-years risk study (E), ignore follow analysis Cooper et al. (2009), instead analysing number patients stroke (r) total (n) arm. use function set_agd_arm() set network, making sure specify treatment classes trt_class. remove WASPO study network arms zero events, study therefore contributes information. (better analysis, accounting differences patient-years risk studies, can performed specifying rate outcome r E set_agd_arm() . following code remains identical.) Plot network plot() method:","code":"af_net <- set_agd_arm(atrial_fibrillation[atrial_fibrillation$studyc != \"WASPO\", ],                        study = studyc,                       trt = trtc,                       r = r,                        n = n,                       trt_class = trt_class) af_net #> A network with 25 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study         Treatments                                                                      #>  ACTIVE-W      2: Standard adjusted dose anti-coagulant | Low dose aspirin + copidogrel        #>  AFASAK 1      3: Placebo/Standard care | Standard adjusted dose anti-coagulant | Low dose ... #>  AFASAK 2      4: Standard adjusted dose anti-coagulant | Fixed dose warfarin | Medium dose... #>  BAATAF        2: Placebo/Standard care | Low adjusted dose anti-coagulant                     #>  BAFTA         2: Standard adjusted dose anti-coagulant | Low dose aspirin                     #>  CAFA          2: Placebo/Standard care | Standard adjusted dose anti-coagulant                #>  Chinese ATAFS 2: Standard adjusted dose anti-coagulant | Low dose aspirin                     #>  EAFT          3: Placebo/Standard care | Standard adjusted dose anti-coagulant | Medium do... #>  ESPS 2        4: Placebo/Standard care | Low dose aspirin | Dipyridamole | Low dose aspiri... #>  JAST          2: Placebo/Standard care | Low dose aspirin                                     #>  ... plus 15 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 17, in 4 classes #> Total number of studies: 25 #> Reference treatment is: Standard adjusted dose anti-coagulant #> Network is connected plot(af_net, weight_nodes = TRUE, weight_edges = TRUE, show_trt_class = TRUE) +    ggplot2::theme(legend.position = \"bottom\", legend.box = \"vertical\")"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_atrial_fibrillation.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: Atrial fibrillation","text":"fit two (random effects) models: standard NMA model without covariates (model 1 Cooper et al. (2009)); meta-regression model adjusting proportion individuals study prior stroke, shared interaction coefficients treatment class (model 4b Cooper et al. (2009)).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_atrial_fibrillation.html","id":"nma-with-no-covariates","dir":"Articles","previous_headings":"Meta-analysis models","what":"NMA with no covariates","title":"Example: Atrial fibrillation","text":"fit random effects model using nma() function trt_effects = \"random\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting model nma() function. increase target acceptance rate adapt_delta = 0.99 minimise divergent transition warnings. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  can compute relative effects placebo/standard care relative_effects() function trt_ref argument: estimates can easily plotted plot() method:  can also produce treatment rankings, rank probabilities, cumulative rank probabilities.","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. af_fit_1 <- nma(af_net,                  trt_effects = \"random\",                 prior_intercept = normal(scale = 100),                 prior_trt = normal(scale = 100),                 prior_het = half_normal(scale = 5),                 adapt_delta = 0.99) #> Note: Setting \"Standard adjusted dose anti-coagulant\" as the network reference treatment. af_fit_1 #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                                  mean se_mean   sd     2.5%      25%      50% #> d[Acenocoumarol]                                -0.80    0.01 0.81    -2.45    -1.31    -0.76 #> d[Alternate day aspirin]                        -0.95    0.02 1.33    -3.86    -1.70    -0.79 #> d[Dipyridamole]                                  0.59    0.01 0.47    -0.39     0.29     0.60 #> d[Fixed dose warfarin]                           0.94    0.01 0.42     0.10     0.67     0.94 #> d[Fixed dose warfarin + low dose aspirin]        0.47    0.01 0.44    -0.39     0.18     0.47 #> d[Fixed dose warfarin + medium dose aspirin]     0.89    0.01 0.31     0.26     0.69     0.89 #> d[High dose aspirin]                             0.50    0.01 0.76    -1.01     0.01     0.52 #> d[Indobufen]                                     0.25    0.01 0.46    -0.66    -0.05     0.25 #> d[Low adjusted dose anti-coagulant]             -0.29    0.01 0.38    -1.06    -0.54    -0.28 #> d[Low dose aspirin]                              0.62    0.01 0.22     0.19     0.48     0.62 #> d[Low dose aspirin + copidogrel]                 0.52    0.01 0.35    -0.19     0.31     0.52 #> d[Low dose aspirin + dipyridamole]               0.26    0.01 0.49    -0.72    -0.06     0.27 #> d[Medium dose aspirin]                           0.38    0.00 0.20    -0.04     0.26     0.39 #> d[Placebo/Standard care]                         0.75    0.01 0.20     0.32     0.62     0.76 #> d[Triflusal]                                     0.62    0.01 0.61    -0.56     0.22     0.61 #> d[Ximelagatran]                                 -0.07    0.00 0.27    -0.61    -0.24    -0.07 #> lp__                                         -4771.96    0.23 7.31 -4787.70 -4776.76 -4771.66 #> tau                                              0.28    0.01 0.14     0.04     0.19     0.27 #>                                                   75%    97.5% n_eff Rhat #> d[Acenocoumarol]                                -0.25     0.70  3664    1 #> d[Alternate day aspirin]                        -0.01     1.20  3402    1 #> d[Dipyridamole]                                  0.90     1.47  2641    1 #> d[Fixed dose warfarin]                           1.21     1.76  3347    1 #> d[Fixed dose warfarin + low dose aspirin]        0.76     1.36  2727    1 #> d[Fixed dose warfarin + medium dose aspirin]     1.09     1.51  3234    1 #> d[High dose aspirin]                             1.01     1.94  3963    1 #> d[Indobufen]                                     0.55     1.15  3733    1 #> d[Low adjusted dose anti-coagulant]             -0.04     0.44  2848    1 #> d[Low dose aspirin]                              0.77     1.05  1856    1 #> d[Low dose aspirin + copidogrel]                 0.72     1.21  3388    1 #> d[Low dose aspirin + dipyridamole]               0.60     1.18  2153    1 #> d[Medium dose aspirin]                           0.52     0.75  2102    1 #> d[Placebo/Standard care]                         0.89     1.14  1327    1 #> d[Triflusal]                                     1.02     1.87  2916    1 #> d[Ximelagatran]                                  0.09     0.49  3062    1 #> lp__                                         -4766.75 -4758.44  1056    1 #> tau                                              0.37     0.59   696    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:54:33 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(af_fit_1, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(af_fit_1, prior = c(\"trt\", \"het\")) (af_1_releff <- relative_effects(af_fit_1, trt_ref = \"Placebo/Standard care\")) #>                                               mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS #> d[Standard adjusted dose anti-coagulant]     -0.75 0.20 -1.14 -0.89 -0.76 -0.62 -0.32     1355 #> d[Acenocoumarol]                             -1.55 0.84 -3.25 -2.09 -1.52 -0.99  0.05     3476 #> d[Alternate day aspirin]                     -1.70 1.32 -4.62 -2.44 -1.54 -0.77  0.41     4515 #> d[Dipyridamole]                              -0.17 0.44 -1.05 -0.45 -0.16  0.11  0.70     3840 #> d[Fixed dose warfarin]                        0.18 0.46 -0.72 -0.11  0.18  0.48  1.09     2995 #> d[Fixed dose warfarin + low dose aspirin]    -0.28 0.41 -1.08 -0.54 -0.28 -0.02  0.55     4078 #> d[Fixed dose warfarin + medium dose aspirin]  0.13 0.36 -0.58 -0.11  0.14  0.37  0.85     2809 #> d[High dose aspirin]                         -0.25 0.75 -1.73 -0.73 -0.24  0.24  1.20     4834 #> d[Indobufen]                                 -0.50 0.50 -1.47 -0.84 -0.51 -0.18  0.47     2674 #> d[Low adjusted dose anti-coagulant]          -1.04 0.35 -1.75 -1.27 -1.04 -0.81 -0.36     5200 #> d[Low dose aspirin]                          -0.13 0.22 -0.55 -0.27 -0.13  0.01  0.30     3917 #> d[Low dose aspirin + copidogrel]             -0.24 0.40 -1.03 -0.47 -0.24  0.00  0.57     2421 #> d[Low dose aspirin + dipyridamole]           -0.49 0.46 -1.40 -0.80 -0.49 -0.19  0.39     3420 #> d[Medium dose aspirin]                       -0.37 0.23 -0.84 -0.51 -0.36 -0.22  0.06     2693 #> d[Triflusal]                                 -0.13 0.65 -1.40 -0.57 -0.13  0.28  1.17     2592 #> d[Ximelagatran]                              -0.82 0.34 -1.48 -1.04 -0.83 -0.61 -0.11     2207 #>                                              Tail_ESS Rhat #> d[Standard adjusted dose anti-coagulant]         1690    1 #> d[Acenocoumarol]                                 2451    1 #> d[Alternate day aspirin]                         2390    1 #> d[Dipyridamole]                                  2612    1 #> d[Fixed dose warfarin]                           2522    1 #> d[Fixed dose warfarin + low dose aspirin]        2795    1 #> d[Fixed dose warfarin + medium dose aspirin]     2797    1 #> d[High dose aspirin]                             3156    1 #> d[Indobufen]                                     2413    1 #> d[Low adjusted dose anti-coagulant]              3370    1 #> d[Low dose aspirin]                              2835    1 #> d[Low dose aspirin + copidogrel]                 2274    1 #> d[Low dose aspirin + dipyridamole]               2491    1 #> d[Medium dose aspirin]                           2653    1 #> d[Triflusal]                                     2451    1 #> d[Ximelagatran]                                  1993    1 plot(af_1_releff, ref_line = 0) (af_1_ranks <- posterior_ranks(af_fit_1)) #>                                                  mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS #> rank[Standard adjusted dose anti-coagulant]      5.32 1.46 3.00   4   5   6     8     2196 #> rank[Acenocoumarol]                              2.93 2.97 1.00   1   2   3    13     3306 #> rank[Alternate day aspirin]                      3.81 4.27 1.00   1   2   5    16     4781 #> rank[Dipyridamole]                              11.26 3.92 3.00   8  12  15    17     3479 #> rank[Fixed dose warfarin]                       14.12 3.08 6.00  13  15  17    17     3379 #> rank[Fixed dose warfarin + low dose aspirin]    10.09 3.86 3.00   7  10  13    17     3529 #> rank[Fixed dose warfarin + medium dose aspirin] 14.09 2.62 8.00  13  15  16    17     2998 #> rank[High dose aspirin]                         10.27 5.24 1.00   6  11  15    17     4303 #> rank[Indobufen]                                  8.08 3.98 2.00   5   8  11    16     2851 #> rank[Low adjusted dose anti-coagulant]           3.79 2.21 1.00   2   3   5    10     3352 #> rank[Low dose aspirin]                          11.77 2.24 7.00  10  12  13    16     3625 #> rank[Low dose aspirin + copidogrel]             10.58 3.38 4.00   8  11  13    17     3043 #> rank[Low dose aspirin + dipyridamole]            8.16 3.99 2.00   5   8  11    16     3300 #> rank[Medium dose aspirin]                        9.10 2.17 5.00   8   9  10    14     3639 #> rank[Placebo/Standard care]                     13.37 1.86 9.00  12  13  15    17     2680 #> rank[Triflusal]                                 11.24 4.63 2.98   7  12  16    17     2797 #> rank[Ximelagatran]                               4.99 2.39 2.00   3   5   6    11     2650 #>                                                 Tail_ESS Rhat #> rank[Standard adjusted dose anti-coagulant]         2590    1 #> rank[Acenocoumarol]                                 3095    1 #> rank[Alternate day aspirin]                         3443    1 #> rank[Dipyridamole]                                    NA    1 #> rank[Fixed dose warfarin]                             NA    1 #> rank[Fixed dose warfarin + low dose aspirin]        3039    1 #> rank[Fixed dose warfarin + medium dose aspirin]       NA    1 #> rank[High dose aspirin]                               NA    1 #> rank[Indobufen]                                     2901    1 #> rank[Low adjusted dose anti-coagulant]              3479    1 #> rank[Low dose aspirin]                              3288    1 #> rank[Low dose aspirin + copidogrel]                 2621    1 #> rank[Low dose aspirin + dipyridamole]               2781    1 #> rank[Medium dose aspirin]                           3071    1 #> rank[Placebo/Standard care]                         3229    1 #> rank[Triflusal]                                       NA    1 #> rank[Ximelagatran]                                  1879    1 plot(af_1_ranks) (af_1_rankprobs <- posterior_rank_probs(af_fit_1)) #>                                              p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[Standard adjusted dose anti-coagulant]          0.00      0.01      0.08      0.20      0.28 #> d[Acenocoumarol]                                  0.39      0.29      0.10      0.05      0.04 #> d[Alternate day aspirin]                          0.45      0.17      0.07      0.05      0.03 #> d[Dipyridamole]                                   0.00      0.01      0.02      0.03      0.03 #> d[Fixed dose warfarin]                            0.00      0.00      0.00      0.00      0.01 #> d[Fixed dose warfarin + low dose aspirin]         0.00      0.01      0.03      0.04      0.05 #> d[Fixed dose warfarin + medium dose aspirin]      0.00      0.00      0.00      0.00      0.00 #> d[High dose aspirin]                              0.03      0.06      0.06      0.05      0.05 #> d[Indobufen]                                      0.01      0.04      0.08      0.09      0.09 #> d[Low adjusted dose anti-coagulant]               0.08      0.23      0.26      0.15      0.09 #> d[Low dose aspirin]                               0.00      0.00      0.00      0.00      0.00 #> d[Low dose aspirin + copidogrel]                  0.00      0.01      0.02      0.02      0.03 #> d[Low dose aspirin + dipyridamole]                0.01      0.05      0.07      0.08      0.07 #> d[Medium dose aspirin]                            0.00      0.00      0.00      0.01      0.03 #> d[Placebo/Standard care]                          0.00      0.00      0.00      0.00      0.00 #> d[Triflusal]                                      0.00      0.02      0.04      0.04      0.04 #> d[Ximelagatran]                                   0.02      0.09      0.18      0.20      0.16 #>                                              p_rank[6] p_rank[7] p_rank[8] p_rank[9] #> d[Standard adjusted dose anti-coagulant]          0.22      0.13      0.05      0.02 #> d[Acenocoumarol]                                  0.03      0.03      0.02      0.02 #> d[Alternate day aspirin]                          0.03      0.03      0.02      0.02 #> d[Dipyridamole]                                   0.04      0.06      0.07      0.08 #> d[Fixed dose warfarin]                            0.01      0.02      0.03      0.03 #> d[Fixed dose warfarin + low dose aspirin]         0.06      0.08      0.09      0.09 #> d[Fixed dose warfarin + medium dose aspirin]      0.01      0.01      0.02      0.03 #> d[High dose aspirin]                              0.05      0.05      0.06      0.06 #> d[Indobufen]                                      0.09      0.10      0.09      0.08 #> d[Low adjusted dose anti-coagulant]               0.07      0.04      0.03      0.02 #> d[Low dose aspirin]                               0.01      0.02      0.04      0.08 #> d[Low dose aspirin + copidogrel]                  0.05      0.07      0.09      0.11 #> d[Low dose aspirin + dipyridamole]                0.08      0.10      0.09      0.08 #> d[Medium dose aspirin]                            0.07      0.11      0.18      0.19 #> d[Placebo/Standard care]                          0.00      0.00      0.01      0.02 #> d[Triflusal]                                      0.05      0.06      0.06      0.06 #> d[Ximelagatran]                                   0.13      0.09      0.05      0.03 #>                                              p_rank[10] p_rank[11] p_rank[12] p_rank[13] #> d[Standard adjusted dose anti-coagulant]           0.00       0.00       0.00       0.00 #> d[Acenocoumarol]                                   0.01       0.01       0.01       0.01 #> d[Alternate day aspirin]                           0.02       0.01       0.01       0.01 #> d[Dipyridamole]                                    0.08       0.08       0.07       0.08 #> d[Fixed dose warfarin]                             0.04       0.05       0.06       0.07 #> d[Fixed dose warfarin + low dose aspirin]          0.09       0.08       0.07       0.07 #> d[Fixed dose warfarin + medium dose aspirin]       0.04       0.06       0.07       0.09 #> d[High dose aspirin]                               0.04       0.04       0.04       0.04 #> d[Indobufen]                                       0.06       0.06       0.05       0.04 #> d[Low adjusted dose anti-coagulant]                0.01       0.01       0.00       0.00 #> d[Low dose aspirin]                                0.12       0.17       0.17       0.15 #> d[Low dose aspirin + copidogrel]                   0.11       0.11       0.09       0.09 #> d[Low dose aspirin + dipyridamole]                 0.08       0.06       0.06       0.04 #> d[Medium dose aspirin]                             0.16       0.11       0.07       0.04 #> d[Placebo/Standard care]                           0.04       0.09       0.14       0.20 #> d[Triflusal]                                       0.06       0.06       0.06       0.05 #> d[Ximelagatran]                                    0.02       0.01       0.01       0.00 #>                                              p_rank[14] p_rank[15] p_rank[16] p_rank[17] #> d[Standard adjusted dose anti-coagulant]           0.00       0.00       0.00       0.00 #> d[Acenocoumarol]                                   0.01       0.01       0.01       0.00 #> d[Alternate day aspirin]                           0.01       0.01       0.02       0.02 #> d[Dipyridamole]                                    0.09       0.09       0.09       0.08 #> d[Fixed dose warfarin]                             0.10       0.13       0.20       0.26 #> d[Fixed dose warfarin + low dose aspirin]          0.06       0.06       0.06       0.04 #> d[Fixed dose warfarin + medium dose aspirin]       0.12       0.17       0.22       0.16 #> d[High dose aspirin]                               0.06       0.07       0.08       0.16 #> d[Indobufen]                                       0.04       0.04       0.03       0.02 #> d[Low adjusted dose anti-coagulant]                0.00       0.00       0.00       0.00 #> d[Low dose aspirin]                                0.12       0.07       0.03       0.01 #> d[Low dose aspirin + copidogrel]                   0.07       0.06       0.05       0.03 #> d[Low dose aspirin + dipyridamole]                 0.04       0.03       0.03       0.02 #> d[Medium dose aspirin]                             0.02       0.00       0.00       0.00 #> d[Placebo/Standard care]                           0.21       0.17       0.09       0.03 #> d[Triflusal]                                       0.06       0.08       0.10       0.16 #> d[Ximelagatran]                                    0.00       0.00       0.00       0.00 plot(af_1_rankprobs) (af_1_cumrankprobs <- posterior_rank_probs(af_fit_1, cumulative = TRUE)) #>                                              p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[Standard adjusted dose anti-coagulant]          0.00      0.02      0.10      0.29      0.57 #> d[Acenocoumarol]                                  0.39      0.68      0.77      0.82      0.86 #> d[Alternate day aspirin]                          0.45      0.62      0.69      0.74      0.77 #> d[Dipyridamole]                                   0.00      0.01      0.03      0.06      0.09 #> d[Fixed dose warfarin]                            0.00      0.00      0.00      0.01      0.01 #> d[Fixed dose warfarin + low dose aspirin]         0.00      0.01      0.04      0.08      0.13 #> d[Fixed dose warfarin + medium dose aspirin]      0.00      0.00      0.00      0.00      0.00 #> d[High dose aspirin]                              0.03      0.09      0.14      0.19      0.24 #> d[Indobufen]                                      0.01      0.05      0.13      0.21      0.30 #> d[Low adjusted dose anti-coagulant]               0.08      0.31      0.57      0.72      0.82 #> d[Low dose aspirin]                               0.00      0.00      0.00      0.00      0.00 #> d[Low dose aspirin + copidogrel]                  0.00      0.01      0.02      0.04      0.07 #> d[Low dose aspirin + dipyridamole]                0.01      0.06      0.14      0.22      0.29 #> d[Medium dose aspirin]                            0.00      0.00      0.00      0.01      0.04 #> d[Placebo/Standard care]                          0.00      0.00      0.00      0.00      0.00 #> d[Triflusal]                                      0.00      0.03      0.07      0.10      0.15 #> d[Ximelagatran]                                   0.02      0.11      0.29      0.49      0.65 #>                                              p_rank[6] p_rank[7] p_rank[8] p_rank[9] #> d[Standard adjusted dose anti-coagulant]          0.80      0.93      0.98      1.00 #> d[Acenocoumarol]                                  0.89      0.91      0.93      0.95 #> d[Alternate day aspirin]                          0.80      0.83      0.86      0.88 #> d[Dipyridamole]                                   0.13      0.19      0.26      0.33 #> d[Fixed dose warfarin]                            0.03      0.04      0.07      0.10 #> d[Fixed dose warfarin + low dose aspirin]         0.19      0.28      0.37      0.46 #> d[Fixed dose warfarin + medium dose aspirin]      0.01      0.02      0.04      0.07 #> d[High dose aspirin]                              0.29      0.34      0.40      0.46 #> d[Indobufen]                                      0.39      0.49      0.58      0.67 #> d[Low adjusted dose anti-coagulant]               0.88      0.93      0.96      0.97 #> d[Low dose aspirin]                               0.01      0.03      0.08      0.15 #> d[Low dose aspirin + copidogrel]                  0.12      0.19      0.28      0.38 #> d[Low dose aspirin + dipyridamole]                0.37      0.47      0.56      0.64 #> d[Medium dose aspirin]                            0.11      0.22      0.40      0.59 #> d[Placebo/Standard care]                          0.00      0.00      0.01      0.03 #> d[Triflusal]                                      0.19      0.25      0.31      0.37 #> d[Ximelagatran]                                   0.78      0.87      0.92      0.95 #>                                              p_rank[10] p_rank[11] p_rank[12] p_rank[13] #> d[Standard adjusted dose anti-coagulant]           1.00       1.00       1.00       1.00 #> d[Acenocoumarol]                                   0.96       0.97       0.97       0.98 #> d[Alternate day aspirin]                           0.90       0.91       0.92       0.94 #> d[Dipyridamole]                                    0.41       0.50       0.57       0.65 #> d[Fixed dose warfarin]                             0.14       0.19       0.25       0.32 #> d[Fixed dose warfarin + low dose aspirin]          0.55       0.63       0.71       0.78 #> d[Fixed dose warfarin + medium dose aspirin]       0.11       0.17       0.24       0.33 #> d[High dose aspirin]                               0.50       0.54       0.58       0.63 #> d[Indobufen]                                       0.73       0.78       0.84       0.88 #> d[Low adjusted dose anti-coagulant]                0.98       0.99       1.00       1.00 #> d[Low dose aspirin]                                0.28       0.45       0.62       0.77 #> d[Low dose aspirin + copidogrel]                   0.49       0.60       0.69       0.78 #> d[Low dose aspirin + dipyridamole]                 0.72       0.78       0.84       0.88 #> d[Medium dose aspirin]                             0.76       0.86       0.94       0.97 #> d[Placebo/Standard care]                           0.07       0.16       0.30       0.50 #> d[Triflusal]                                       0.43       0.49       0.54       0.60 #> d[Ximelagatran]                                    0.97       0.98       0.99       0.99 #>                                              p_rank[14] p_rank[15] p_rank[16] p_rank[17] #> d[Standard adjusted dose anti-coagulant]           1.00       1.00       1.00          1 #> d[Acenocoumarol]                                   0.99       0.99       1.00          1 #> d[Alternate day aspirin]                           0.95       0.96       0.98          1 #> d[Dipyridamole]                                    0.74       0.83       0.92          1 #> d[Fixed dose warfarin]                             0.42       0.54       0.74          1 #> d[Fixed dose warfarin + low dose aspirin]          0.84       0.90       0.96          1 #> d[Fixed dose warfarin + medium dose aspirin]       0.45       0.62       0.84          1 #> d[High dose aspirin]                               0.69       0.76       0.84          1 #> d[Indobufen]                                       0.91       0.95       0.98          1 #> d[Low adjusted dose anti-coagulant]                1.00       1.00       1.00          1 #> d[Low dose aspirin]                                0.89       0.96       0.99          1 #> d[Low dose aspirin + copidogrel]                   0.86       0.92       0.97          1 #> d[Low dose aspirin + dipyridamole]                 0.92       0.95       0.98          1 #> d[Medium dose aspirin]                             0.99       1.00       1.00          1 #> d[Placebo/Standard care]                           0.71       0.88       0.97          1 #> d[Triflusal]                                       0.66       0.73       0.84          1 #> d[Ximelagatran]                                    1.00       1.00       1.00          1 plot(af_1_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_atrial_fibrillation.html","id":"network-meta-regression-adjusting-for-proportion-of-prior-stroke","dir":"Articles","previous_headings":"Meta-analysis models","what":"Network meta-regression adjusting for proportion of prior stroke","title":"Example: Atrial fibrillation","text":"now consider meta-regression model adjusting proportion individuals study prior stroke, shared interaction coefficients treatment class. regression model specified nma() function using formula regression argument. formula ~ .trt:stroke means interactions prior stroke treatment included; .trt special variable indicates treatment, stroke original data set. specify class_interactions = \"common\" denote interaction parameters common (.e. shared) treatments within class. (Setting class_interactions = \"independent\" fit model 2 Cooper et al. (2009) separate interactions treatment, data permitting.) use prior distributions , additionally require prior distribution regression coefficients prior_reg; use \\(\\mathrm{N}(0, 100^2)\\) prior distribution. QR decomposition can greatly improve efficiency sampling regression models decorrelating sampling space; specify used QR = TRUE, increase target acceptance rate adapt_delta = 0.99 minimise divergent transition warnings. Basic parameter summaries given print() method: estimated treatment effects d[] shown correspond relative effects reference level covariate, proportion prior stroke centered network mean value 0.296. default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  can compute relative effects placebo/standard care relative_effects() function trt_ref argument, default produces relative effects observed proportions prior stroke study: can produce estimated treatment effects particular covariate values using newdata argument. example, treatment effects individuals individuals prior stroke produced  estimated class interactions (reference “Mixed” class) uncertain.  interactions straightforward interpret transform interaction coefficients (using consistency equations) control class:  evidence effect anti-coagulants increases (compared control) prior stroke. little evidence effect anti-platelets reduces prior stroke, although point estimate represents substantial reduction effectiveness, 95% Credible Interval includes values correspond substantial increases treatment effect. interaction effect stroke mixed treatments uncertain, potentially indicates substantial reduction treatment effects prior stroke. can also produce treatment rankings, rank probabilities, cumulative rank probabilities. default (without newdata argument specified), produced value stroke study network turn. instead produce rankings individuals individuals prior stroke, specify newdata argument.","code":"af_fit_4b <- nma(af_net,                   trt_effects = \"random\",                  regression = ~ .trt:stroke,                  class_interactions = \"common\",                  QR = TRUE,                  prior_intercept = normal(scale = 100),                  prior_trt = normal(scale = 100),                  prior_reg = normal(scale = 100),                  prior_het = half_normal(scale = 5),                  adapt_delta = 0.99) #> Note: Setting \"Standard adjusted dose anti-coagulant\" as the network reference treatment. af_fit_4b #> A random effects NMA with a binomial likelihood (logit link). #> Regression model: ~.trt:stroke. #> Centred covariates at the following overall mean values: #>    stroke  #> 0.2957377  #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                                  mean se_mean   sd     2.5%      25%      50% #> beta[.trtclassMixed:stroke]                      3.94    0.03 2.14    -0.12     2.52     3.90 #> beta[.trtclassAnti-platelet:stroke]              0.94    0.01 0.40     0.13     0.69     0.93 #> beta[.trtclassControl:stroke]                    0.70    0.01 0.43    -0.14     0.41     0.68 #> d[Acenocoumarol]                                 0.36    0.02 1.05    -1.75    -0.29     0.40 #> d[Alternate day aspirin]                        -0.91    0.03 1.39    -4.24    -1.65    -0.74 #> d[Dipyridamole]                                  0.58    0.01 0.41    -0.21     0.32     0.57 #> d[Fixed dose warfarin]                           0.64    0.01 0.40    -0.15     0.38     0.64 #> d[Fixed dose warfarin + low dose aspirin]        1.47    0.01 0.76     0.03     0.97     1.47 #> d[Fixed dose warfarin + medium dose aspirin]     1.00    0.00 0.30     0.41     0.81     1.00 #> d[High dose aspirin]                             0.43    0.01 0.75    -1.06    -0.06     0.43 #> d[Indobufen]                                    -0.41    0.01 0.49    -1.36    -0.73    -0.41 #> d[Low adjusted dose anti-coagulant]             -0.42    0.01 0.37    -1.20    -0.65    -0.41 #> d[Low dose aspirin]                              0.72    0.00 0.20     0.34     0.59     0.72 #> d[Low dose aspirin + copidogrel]                 0.65    0.01 0.28     0.08     0.48     0.65 #> d[Low dose aspirin + dipyridamole]               0.25    0.01 0.44    -0.62    -0.02     0.26 #> d[Medium dose aspirin]                           0.35    0.00 0.17     0.01     0.24     0.35 #> d[Placebo/Standard care]                         0.80    0.00 0.19     0.41     0.67     0.80 #> d[Triflusal]                                     0.92    0.01 0.58    -0.17     0.54     0.91 #> d[Ximelagatran]                                 -0.09    0.00 0.22    -0.53    -0.22    -0.09 #> lp__                                         -4771.39    0.20 6.89 -4785.30 -4775.90 -4771.24 #> tau                                              0.19    0.01 0.13     0.01     0.09     0.17 #>                                                   75%    97.5% n_eff Rhat #> beta[.trtclassMixed:stroke]                      5.29     8.34  4575    1 #> beta[.trtclassAnti-platelet:stroke]              1.19     1.76  4388    1 #> beta[.trtclassControl:stroke]                    0.98     1.58  4346    1 #> d[Acenocoumarol]                                 1.05     2.42  3160    1 #> d[Alternate day aspirin]                         0.05     1.29  2064    1 #> d[Dipyridamole]                                  0.84     1.39  5156    1 #> d[Fixed dose warfarin]                           0.91     1.42  5137    1 #> d[Fixed dose warfarin + low dose aspirin]        1.97     2.96  4613    1 #> d[Fixed dose warfarin + medium dose aspirin]     1.19     1.61  4329    1 #> d[High dose aspirin]                             0.93     1.85  5442    1 #> d[Indobufen]                                    -0.09     0.55  4136    1 #> d[Low adjusted dose anti-coagulant]             -0.18     0.27  4362    1 #> d[Low dose aspirin]                              0.85     1.10  4140    1 #> d[Low dose aspirin + copidogrel]                 0.81     1.21  2129    1 #> d[Low dose aspirin + dipyridamole]               0.53     1.11  5010    1 #> d[Medium dose aspirin]                           0.46     0.68  4333    1 #> d[Placebo/Standard care]                         0.92     1.19  4006    1 #> d[Triflusal]                                     1.30     2.09  5312    1 #> d[Ximelagatran]                                  0.05     0.32  3090    1 #> lp__                                         -4766.54 -4758.75  1248    1 #> tau                                              0.26     0.47   455    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:55:12 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(af_fit_4b, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(af_fit_4b, prior = c(\"reg\", \"het\")) # Not run (af_4b_releff <- relative_effects(af_fit_4b, trt_ref = \"Placebo/Standard care\")) plot(af_4b_releff, ref_line = 0) (af_4b_releff_01 <- relative_effects(af_fit_4b,                                       trt_ref = \"Placebo/Standard care\",                                      newdata = data.frame(stroke = c(0, 1),                                                            label = c(\"stroke = 0\", \"stroke = 1\")),                                      study = label)) #> ------------------------------------------------------------- Study: stroke = 0 ----  #>  #> Covariate values: #>  stroke #>       0 #>  #>                                                           mean   sd  2.5%   25%   50%   75% #> d[stroke = 0: Standard adjusted dose anti-coagulant]     -0.59 0.24 -1.06 -0.75 -0.59 -0.44 #> d[stroke = 0: Acenocoumarol]                             -1.40 0.86 -3.14 -1.95 -1.36 -0.82 #> d[stroke = 0: Alternate day aspirin]                     -1.78 1.38 -5.04 -2.50 -1.59 -0.83 #> d[stroke = 0: Dipyridamole]                              -0.29 0.44 -1.13 -0.58 -0.28 -0.01 #> d[stroke = 0: Fixed dose warfarin]                        0.05 0.46 -0.88 -0.24  0.05  0.35 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]    -0.28 0.34 -0.94 -0.50 -0.29 -0.08 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin] -0.76 0.66 -2.09 -1.19 -0.74 -0.33 #> d[stroke = 0: High dose aspirin]                         -0.44 0.77 -2.02 -0.95 -0.43  0.07 #> d[stroke = 0: Indobufen]                                 -1.28 0.57 -2.42 -1.66 -1.28 -0.92 #> d[stroke = 0: Low adjusted dose anti-coagulant]          -1.01 0.33 -1.68 -1.24 -1.00 -0.79 #> d[stroke = 0: Low dose aspirin]                          -0.15 0.22 -0.58 -0.30 -0.15  0.00 #> d[stroke = 0: Low dose aspirin + copidogrel]             -0.22 0.36 -0.92 -0.44 -0.23  0.00 #> d[stroke = 0: Low dose aspirin + dipyridamole]           -0.62 0.47 -1.56 -0.92 -0.61 -0.31 #> d[stroke = 0: Medium dose aspirin]                       -0.52 0.26 -1.05 -0.69 -0.52 -0.35 #> d[stroke = 0: Triflusal]                                  0.05 0.63 -1.13 -0.37  0.04  0.47 #> d[stroke = 0: Ximelagatran]                              -0.68 0.32 -1.31 -0.89 -0.69 -0.48 #>                                                          97.5% Bulk_ESS Tail_ESS Rhat #> d[stroke = 0: Standard adjusted dose anti-coagulant]     -0.10     3731     2761    1 #> d[stroke = 0: Acenocoumarol]                              0.16     3944     2239    1 #> d[stroke = 0: Alternate day aspirin]                      0.37     2907     1657    1 #> d[stroke = 0: Dipyridamole]                               0.60     4976     2964    1 #> d[stroke = 0: Fixed dose warfarin]                        0.96     5272     2713    1 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]     0.40     4602     2231    1 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]  0.55     4448     2891    1 #> d[stroke = 0: High dose aspirin]                          1.01     5838     3168    1 #> d[stroke = 0: Indobufen]                                 -0.12     4057     2750    1 #> d[stroke = 0: Low adjusted dose anti-coagulant]          -0.37     5805     3309    1 #> d[stroke = 0: Low dose aspirin]                           0.29     4592     3151    1 #> d[stroke = 0: Low dose aspirin + copidogrel]              0.51     2876     2303    1 #> d[stroke = 0: Low dose aspirin + dipyridamole]            0.32     4497     2453    1 #> d[stroke = 0: Medium dose aspirin]                       -0.01     4307     2974    1 #> d[stroke = 0: Triflusal]                                  1.32     5213     3057    1 #> d[stroke = 0: Ximelagatran]                              -0.04     3856     2662    1 #>  #> ------------------------------------------------------------- Study: stroke = 1 ----  #>  #> Covariate values: #>  stroke #>       1 #>  #>                                                           mean   sd  2.5%   25%   50%   75% #> d[stroke = 1: Standard adjusted dose anti-coagulant]     -1.29 0.34 -1.97 -1.51 -1.28 -1.06 #> d[stroke = 1: Acenocoumarol]                              1.85 2.35 -2.65  0.28  1.81  3.41 #> d[stroke = 1: Alternate day aspirin]                     -1.54 1.41 -4.89 -2.31 -1.37 -0.55 #> d[stroke = 1: Dipyridamole]                              -0.05 0.39 -0.81 -0.30 -0.05  0.21 #> d[stroke = 1: Fixed dose warfarin]                       -0.65 0.53 -1.71 -1.00 -0.64 -0.31 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]     2.96 2.21 -1.25  1.50  2.92  4.40 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]  2.49 1.65 -0.76  1.40  2.46  3.54 #> d[stroke = 1: High dose aspirin]                         -0.20 0.73 -1.69 -0.67 -0.21  0.29 #> d[stroke = 1: Indobufen]                                 -1.04 0.53 -2.08 -1.38 -1.04 -0.70 #> d[stroke = 1: Low adjusted dose anti-coagulant]          -1.71 0.50 -2.73 -2.03 -1.70 -1.38 #> d[stroke = 1: Low dose aspirin]                           0.09 0.29 -0.48 -0.09  0.09  0.29 #> d[stroke = 1: Low dose aspirin + copidogrel]              0.02 0.39 -0.76 -0.22  0.03  0.27 #> d[stroke = 1: Low dose aspirin + dipyridamole]           -0.37 0.41 -1.21 -0.63 -0.36 -0.10 #> d[stroke = 1: Medium dose aspirin]                       -0.28 0.24 -0.78 -0.43 -0.27 -0.13 #> d[stroke = 1: Triflusal]                                  0.29 0.65 -0.96 -0.14  0.29  0.71 #> d[stroke = 1: Ximelagatran]                              -1.38 0.41 -2.19 -1.64 -1.37 -1.12 #>                                                          97.5% Bulk_ESS Tail_ESS Rhat #> d[stroke = 1: Standard adjusted dose anti-coagulant]     -0.63     5096     2688    1 #> d[stroke = 1: Acenocoumarol]                              6.66     3838     2633    1 #> d[stroke = 1: Alternate day aspirin]                      0.66     2950     1678    1 #> d[stroke = 1: Dipyridamole]                               0.69     5404     3167    1 #> d[stroke = 1: Fixed dose warfarin]                        0.42     5256     2675    1 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]     7.50     4569     3066    1 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]  5.81     4639     2997    1 #> d[stroke = 1: High dose aspirin]                          1.21     5677     2789    1 #> d[stroke = 1: Indobufen]                                 -0.02     4699     2807    1 #> d[stroke = 1: Low adjusted dose anti-coagulant]          -0.74     4797     2868    1 #> d[stroke = 1: Low dose aspirin]                           0.63     4376     2680    1 #> d[stroke = 1: Low dose aspirin + copidogrel]              0.75     3289     1922    1 #> d[stroke = 1: Low dose aspirin + dipyridamole]            0.42     5673     2423    1 #> d[stroke = 1: Medium dose aspirin]                        0.19     4543     2926    1 #> d[stroke = 1: Triflusal]                                  1.59     5238     3009    1 #> d[stroke = 1: Ximelagatran]                              -0.59     4265     2590    1 plot(af_4b_releff_01, ref_line = 0) plot(af_fit_4b, pars = \"beta\", stat = \"halfeye\", ref_line = 0) af_4b_beta <- as.array(af_fit_4b, pars = \"beta\")  # Subtract beta[Control:stroke] from the other class interactions af_4b_beta[ , , 1:2] <- sweep(af_4b_beta[ , , 1:2], 1:2,                                af_4b_beta[ , , \"beta[.trtclassControl:stroke]\"], FUN = \"-\")  # Set beta[Anti-coagulant:stroke] = -beta[Control:stroke] af_4b_beta[ , , \"beta[.trtclassControl:stroke]\"] <- -af_4b_beta[ , , \"beta[.trtclassControl:stroke]\"] names(af_4b_beta)[3] <- \"beta[.trtclassAnti-coagulant:stroke]\"  # Summarise summary(af_4b_beta) #>                                       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS #> beta[.trtclassMixed:stroke]           3.25 2.17 -0.89  1.80  3.24  4.61  7.68     4600 #> beta[.trtclassAnti-platelet:stroke]   0.24 0.33 -0.44  0.04  0.25  0.47  0.88     4069 #> beta[.trtclassAnti-coagulant:stroke] -0.70 0.43 -1.58 -0.98 -0.68 -0.41  0.14     4454 #>                                      Tail_ESS Rhat #> beta[.trtclassMixed:stroke]              3036    1 #> beta[.trtclassAnti-platelet:stroke]      3248    1 #> beta[.trtclassAnti-coagulant:stroke]     2652    1 plot(summary(af_4b_beta), stat = \"halfeye\", ref_line = 0) (af_4b_ranks <- posterior_ranks(af_fit_4b,                                 newdata = data.frame(stroke = c(0, 1),                                                       label = c(\"stroke = 0\", \"stroke = 1\")),                                  study = label)) #> ------------------------------------------------------------- Study: stroke = 0 ----  #>  #> Covariate values: #>  stroke #>       0 #>  #>                                                              mean   sd 2.5%   25% 50% 75% #> rank[stroke = 0: Standard adjusted dose anti-coagulant]      7.76 1.87    4  6.75   8   9 #> rank[stroke = 0: Acenocoumarol]                              4.01 3.68    1  1.00   3   5 #> rank[stroke = 0: Alternate day aspirin]                      3.99 4.41    1  1.00   2   5 #> rank[stroke = 0: Dipyridamole]                              11.11 3.66    4  8.00  11  14 #> rank[stroke = 0: Fixed dose warfarin]                       14.07 2.98    7 12.00  15  16 #> rank[stroke = 0: Fixed dose warfarin + low dose aspirin]    11.08 3.68    4  8.00  11  14 #> rank[stroke = 0: Fixed dose warfarin + medium dose aspirin]  7.16 4.53    1  3.00   6  11 #> rank[stroke = 0: High dose aspirin]                          9.61 5.29    1  5.00  10  15 #> rank[stroke = 0: Indobufen]                                  3.62 2.73    1  2.00   3   4 #> rank[stroke = 0: Low adjusted dose anti-coagulant]           4.55 2.40    1  3.00   4   6 #> rank[stroke = 0: Low dose aspirin]                          12.89 1.91    9 12.00  13  14 #> rank[stroke = 0: Low dose aspirin + copidogrel]             12.01 2.95    5 10.00  12  14 #> rank[stroke = 0: Low dose aspirin + dipyridamole]            7.89 3.74    2  5.00   8  10 #> rank[stroke = 0: Medium dose aspirin]                        8.60 2.16    5  7.00   9  10 #> rank[stroke = 0: Placebo/Standard care]                     14.33 1.91   10 13.00  15  16 #> rank[stroke = 0: Triflusal]                                 13.41 3.99    4 11.00  15  17 #> rank[stroke = 0: Ximelagatran]                               6.90 2.65    3  5.00   7   9 #>                                                             97.5% Bulk_ESS Tail_ESS Rhat #> rank[stroke = 0: Standard adjusted dose anti-coagulant]        12     3714     2785    1 #> rank[stroke = 0: Acenocoumarol]                                15     4088     3183    1 #> rank[stroke = 0: Alternate day aspirin]                        16     4643     3321    1 #> rank[stroke = 0: Dipyridamole]                                 17     5152       NA    1 #> rank[stroke = 0: Fixed dose warfarin]                          17     4738       NA    1 #> rank[stroke = 0: Fixed dose warfarin + low dose aspirin]       17     4536       NA    1 #> rank[stroke = 0: Fixed dose warfarin + medium dose aspirin]    16     4327     3084    1 #> rank[stroke = 0: High dose aspirin]                            17     5789       NA    1 #> rank[stroke = 0: Indobufen]                                    12     3759     2956    1 #> rank[stroke = 0: Low adjusted dose anti-coagulant]             11     4945     3575    1 #> rank[stroke = 0: Low dose aspirin]                             16     3743     3077    1 #> rank[stroke = 0: Low dose aspirin + copidogrel]                17     2673     2149    1 #> rank[stroke = 0: Low dose aspirin + dipyridamole]              16     4510     3095    1 #> rank[stroke = 0: Medium dose aspirin]                          13     4515     3421    1 #> rank[stroke = 0: Placebo/Standard care]                        17     3432       NA    1 #> rank[stroke = 0: Triflusal]                                    17     4714       NA    1 #> rank[stroke = 0: Ximelagatran]                                 13     3749     3080    1 #>  #> ------------------------------------------------------------- Study: stroke = 1 ----  #>  #> Covariate values: #>  stroke #>       1 #>  #>                                                              mean   sd 2.5% 25% 50% 75% 97.5% #> rank[stroke = 1: Standard adjusted dose anti-coagulant]      3.66 1.11    2   3   4   4     6 #> rank[stroke = 1: Acenocoumarol]                             13.19 4.39    1  14  15  16    17 #> rank[stroke = 1: Alternate day aspirin]                      4.48 3.99    1   1   3   7    14 #> rank[stroke = 1: Dipyridamole]                              10.60 2.65    6   9  11  13    15 #> rank[stroke = 1: Fixed dose warfarin]                        7.05 2.80    3   5   6   8    14 #> rank[stroke = 1: Fixed dose warfarin + low dose aspirin]    15.78 2.94    5  16  17  17    17 #> rank[stroke = 1: Fixed dose warfarin + medium dose aspirin] 15.40 1.99    8  15  16  16    17 #> rank[stroke = 1: High dose aspirin]                          9.45 3.98    2   6   9  13    16 #> rank[stroke = 1: Indobufen]                                  4.97 2.18    1   4   5   6    10 #> rank[stroke = 1: Low adjusted dose anti-coagulant]           2.03 1.28    1   1   2   2     5 #> rank[stroke = 1: Low dose aspirin]                          11.88 1.79    8  11  12  13    15 #> rank[stroke = 1: Low dose aspirin + copidogrel]             11.17 2.45    6  10  11  13    15 #> rank[stroke = 1: Low dose aspirin + dipyridamole]            8.26 2.67    4   6   8  10    14 #> rank[stroke = 1: Medium dose aspirin]                        8.61 1.70    6   7   8  10    12 #> rank[stroke = 1: Placebo/Standard care]                     11.16 1.95    7  10  11  12    15 #> rank[stroke = 1: Triflusal]                                 12.17 3.03    5  10  13  14    17 #> rank[stroke = 1: Ximelagatran]                               3.14 1.38    1   2   3   4     6 #>                                                             Bulk_ESS Tail_ESS Rhat #> rank[stroke = 1: Standard adjusted dose anti-coagulant]         3329     2999    1 #> rank[stroke = 1: Acenocoumarol]                                 3870       NA    1 #> rank[stroke = 1: Alternate day aspirin]                         4621     3314    1 #> rank[stroke = 1: Dipyridamole]                                  4638     2892    1 #> rank[stroke = 1: Fixed dose warfarin]                           4206     3163    1 #> rank[stroke = 1: Fixed dose warfarin + low dose aspirin]        3359       NA    1 #> rank[stroke = 1: Fixed dose warfarin + medium dose aspirin]     3252       NA    1 #> rank[stroke = 1: High dose aspirin]                             4771     3173    1 #> rank[stroke = 1: Indobufen]                                     4036     2756    1 #> rank[stroke = 1: Low adjusted dose anti-coagulant]              3003     3301    1 #> rank[stroke = 1: Low dose aspirin]                              3668     2996    1 #> rank[stroke = 1: Low dose aspirin + copidogrel]                 3040     2184    1 #> rank[stroke = 1: Low dose aspirin + dipyridamole]               4822     3177    1 #> rank[stroke = 1: Medium dose aspirin]                           3911     3086    1 #> rank[stroke = 1: Placebo/Standard care]                         4516     3128    1 #> rank[stroke = 1: Triflusal]                                     4459       NA    1 #> rank[stroke = 1: Ximelagatran]                                  3201     2786    1 plot(af_4b_ranks) (af_4b_rankprobs <- posterior_rank_probs(af_fit_4b,                                          newdata = data.frame(stroke = c(0, 1),                                                                label = c(\"stroke = 0\", \"stroke = 1\")),                                           study = label)) #> ------------------------------------------------------------- Study: stroke = 0 ----  #>  #> Covariate values: #>  stroke #>       0 #>  #>                                                          p_rank[1] p_rank[2] p_rank[3] #> d[stroke = 0: Standard adjusted dose anti-coagulant]          0.00      0.00      0.01 #> d[stroke = 0: Acenocoumarol]                                  0.26      0.23      0.12 #> d[stroke = 0: Alternate day aspirin]                          0.45      0.14      0.08 #> d[stroke = 0: Dipyridamole]                                   0.00      0.00      0.01 #> d[stroke = 0: Fixed dose warfarin]                            0.00      0.00      0.00 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]         0.00      0.00      0.01 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]      0.05      0.09      0.12 #> d[stroke = 0: High dose aspirin]                              0.03      0.06      0.07 #> d[stroke = 0: Indobufen]                                      0.15      0.28      0.21 #> d[stroke = 0: Low adjusted dose anti-coagulant]               0.04      0.12      0.22 #> d[stroke = 0: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 0: Low dose aspirin + copidogrel]                  0.00      0.00      0.00 #> d[stroke = 0: Low dose aspirin + dipyridamole]                0.01      0.03      0.07 #> d[stroke = 0: Medium dose aspirin]                            0.00      0.00      0.01 #> d[stroke = 0: Placebo/Standard care]                          0.00      0.00      0.00 #> d[stroke = 0: Triflusal]                                      0.00      0.00      0.01 #> d[stroke = 0: Ximelagatran]                                   0.00      0.02      0.05 #>                                                          p_rank[4] p_rank[5] p_rank[6] #> d[stroke = 0: Standard adjusted dose anti-coagulant]          0.02      0.08      0.14 #> d[stroke = 0: Acenocoumarol]                                  0.10      0.06      0.04 #> d[stroke = 0: Alternate day aspirin]                          0.05      0.04      0.03 #> d[stroke = 0: Dipyridamole]                                   0.03      0.04      0.05 #> d[stroke = 0: Fixed dose warfarin]                            0.01      0.01      0.01 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]         0.03      0.04      0.05 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]      0.11      0.09      0.07 #> d[stroke = 0: High dose aspirin]                              0.07      0.07      0.05 #> d[stroke = 0: Indobufen]                                      0.12      0.07      0.05 #> d[stroke = 0: Low adjusted dose anti-coagulant]               0.21      0.14      0.09 #> d[stroke = 0: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 0: Low dose aspirin + copidogrel]                  0.01      0.01      0.02 #> d[stroke = 0: Low dose aspirin + dipyridamole]                0.09      0.11      0.11 #> d[stroke = 0: Medium dose aspirin]                            0.01      0.05      0.10 #> d[stroke = 0: Placebo/Standard care]                          0.00      0.00      0.00 #> d[stroke = 0: Triflusal]                                      0.02      0.03      0.03 #> d[stroke = 0: Ximelagatran]                                   0.11      0.15      0.16 #>                                                          p_rank[7] p_rank[8] p_rank[9] #> d[stroke = 0: Standard adjusted dose anti-coagulant]          0.21      0.20      0.16 #> d[stroke = 0: Acenocoumarol]                                  0.03      0.02      0.02 #> d[stroke = 0: Alternate day aspirin]                          0.03      0.02      0.02 #> d[stroke = 0: Dipyridamole]                                   0.06      0.06      0.07 #> d[stroke = 0: Fixed dose warfarin]                            0.01      0.02      0.03 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]         0.05      0.06      0.07 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]      0.05      0.05      0.05 #> d[stroke = 0: High dose aspirin]                              0.04      0.04      0.04 #> d[stroke = 0: Indobufen]                                      0.02      0.03      0.02 #> d[stroke = 0: Low adjusted dose anti-coagulant]               0.06      0.04      0.03 #> d[stroke = 0: Low dose aspirin]                               0.00      0.01      0.03 #> d[stroke = 0: Low dose aspirin + copidogrel]                  0.03      0.04      0.06 #> d[stroke = 0: Low dose aspirin + dipyridamole]                0.08      0.09      0.09 #> d[stroke = 0: Medium dose aspirin]                            0.14      0.18      0.18 #> d[stroke = 0: Placebo/Standard care]                          0.00      0.00      0.01 #> d[stroke = 0: Triflusal]                                      0.03      0.03      0.04 #> d[stroke = 0: Ximelagatran]                                   0.14      0.11      0.08 #>                                                          p_rank[10] p_rank[11] p_rank[12] #> d[stroke = 0: Standard adjusted dose anti-coagulant]           0.10       0.05       0.02 #> d[stroke = 0: Acenocoumarol]                                   0.02       0.02       0.01 #> d[stroke = 0: Alternate day aspirin]                           0.02       0.02       0.01 #> d[stroke = 0: Dipyridamole]                                    0.09       0.10       0.10 #> d[stroke = 0: Fixed dose warfarin]                             0.04       0.06       0.07 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]          0.09       0.09       0.10 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]       0.05       0.05       0.04 #> d[stroke = 0: High dose aspirin]                               0.05       0.05       0.04 #> d[stroke = 0: Indobufen]                                       0.01       0.01       0.01 #> d[stroke = 0: Low adjusted dose anti-coagulant]                0.02       0.01       0.01 #> d[stroke = 0: Low dose aspirin]                                0.06       0.11       0.17 #> d[stroke = 0: Low dose aspirin + copidogrel]                   0.09       0.12       0.15 #> d[stroke = 0: Low dose aspirin + dipyridamole]                 0.08       0.06       0.05 #> d[stroke = 0: Medium dose aspirin]                             0.15       0.10       0.06 #> d[stroke = 0: Placebo/Standard care]                           0.02       0.05       0.08 #> d[stroke = 0: Triflusal]                                       0.04       0.05       0.06 #> d[stroke = 0: Ximelagatran]                                    0.07       0.05       0.03 #>                                                          p_rank[13] p_rank[14] p_rank[15] #> d[stroke = 0: Standard adjusted dose anti-coagulant]           0.01       0.00       0.00 #> d[stroke = 0: Acenocoumarol]                                   0.01       0.01       0.01 #> d[stroke = 0: Alternate day aspirin]                           0.02       0.02       0.02 #> d[stroke = 0: Dipyridamole]                                    0.09       0.08       0.09 #> d[stroke = 0: Fixed dose warfarin]                             0.08       0.09       0.13 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]          0.09       0.09       0.08 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]       0.04       0.04       0.04 #> d[stroke = 0: High dose aspirin]                               0.05       0.05       0.05 #> d[stroke = 0: Indobufen]                                       0.01       0.00       0.00 #> d[stroke = 0: Low adjusted dose anti-coagulant]                0.00       0.00       0.00 #> d[stroke = 0: Low dose aspirin]                                0.21       0.19       0.13 #> d[stroke = 0: Low dose aspirin + copidogrel]                   0.13       0.11       0.10 #> d[stroke = 0: Low dose aspirin + dipyridamole]                 0.04       0.03       0.03 #> d[stroke = 0: Medium dose aspirin]                             0.03       0.01       0.00 #> d[stroke = 0: Placebo/Standard care]                           0.12       0.19       0.22 #> d[stroke = 0: Triflusal]                                       0.06       0.07       0.08 #> d[stroke = 0: Ximelagatran]                                    0.02       0.01       0.00 #>                                                          p_rank[16] p_rank[17] #> d[stroke = 0: Standard adjusted dose anti-coagulant]           0.00       0.00 #> d[stroke = 0: Acenocoumarol]                                   0.01       0.00 #> d[stroke = 0: Alternate day aspirin]                           0.02       0.02 #> d[stroke = 0: Dipyridamole]                                    0.07       0.06 #> d[stroke = 0: Fixed dose warfarin]                             0.21       0.23 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]          0.08       0.05 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]       0.03       0.02 #> d[stroke = 0: High dose aspirin]                               0.08       0.13 #> d[stroke = 0: Indobufen]                                       0.00       0.00 #> d[stroke = 0: Low adjusted dose anti-coagulant]                0.00       0.00 #> d[stroke = 0: Low dose aspirin]                                0.06       0.01 #> d[stroke = 0: Low dose aspirin + copidogrel]                   0.08       0.04 #> d[stroke = 0: Low dose aspirin + dipyridamole]                 0.02       0.01 #> d[stroke = 0: Medium dose aspirin]                             0.00       0.00 #> d[stroke = 0: Placebo/Standard care]                           0.19       0.11 #> d[stroke = 0: Triflusal]                                       0.14       0.32 #> d[stroke = 0: Ximelagatran]                                    0.00       0.00 #>  #> ------------------------------------------------------------- Study: stroke = 1 ----  #>  #> Covariate values: #>  stroke #>       1 #>  #>                                                          p_rank[1] p_rank[2] p_rank[3] #> d[stroke = 1: Standard adjusted dose anti-coagulant]          0.01      0.11      0.34 #> d[stroke = 1: Acenocoumarol]                                  0.04      0.02      0.01 #> d[stroke = 1: Alternate day aspirin]                          0.37      0.10      0.05 #> d[stroke = 1: Dipyridamole]                                   0.00      0.00      0.00 #> d[stroke = 1: Fixed dose warfarin]                            0.00      0.02      0.02 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]         0.00      0.01      0.01 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]      0.00      0.00      0.00 #> d[stroke = 1: High dose aspirin]                              0.02      0.03      0.03 #> d[stroke = 1: Indobufen]                                      0.03      0.09      0.11 #> d[stroke = 1: Low adjusted dose anti-coagulant]               0.43      0.33      0.12 #> d[stroke = 1: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 1: Low dose aspirin + copidogrel]                  0.00      0.00      0.00 #> d[stroke = 1: Low dose aspirin + dipyridamole]                0.00      0.01      0.01 #> d[stroke = 1: Medium dose aspirin]                            0.00      0.00      0.00 #> d[stroke = 1: Placebo/Standard care]                          0.00      0.00      0.00 #> d[stroke = 1: Triflusal]                                      0.00      0.00      0.00 #> d[stroke = 1: Ximelagatran]                                   0.09      0.27      0.29 #>                                                          p_rank[4] p_rank[5] p_rank[6] #> d[stroke = 1: Standard adjusted dose anti-coagulant]          0.34      0.15      0.04 #> d[stroke = 1: Acenocoumarol]                                  0.01      0.02      0.02 #> d[stroke = 1: Alternate day aspirin]                          0.06      0.08      0.09 #> d[stroke = 1: Dipyridamole]                                   0.00      0.01      0.04 #> d[stroke = 1: Fixed dose warfarin]                            0.06      0.18      0.24 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]         0.00      0.01      0.01 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]      0.00      0.00      0.00 #> d[stroke = 1: High dose aspirin]                              0.03      0.05      0.11 #> d[stroke = 1: Indobufen]                                      0.18      0.25      0.16 #> d[stroke = 1: Low adjusted dose anti-coagulant]               0.07      0.03      0.01 #> d[stroke = 1: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 1: Low dose aspirin + copidogrel]                  0.00      0.01      0.02 #> d[stroke = 1: Low dose aspirin + dipyridamole]                0.03      0.07      0.13 #> d[stroke = 1: Medium dose aspirin]                            0.00      0.01      0.07 #> d[stroke = 1: Placebo/Standard care]                          0.00      0.00      0.01 #> d[stroke = 1: Triflusal]                                      0.01      0.01      0.03 #> d[stroke = 1: Ximelagatran]                                   0.20      0.11      0.03 #>                                                          p_rank[7] p_rank[8] p_rank[9] #> d[stroke = 1: Standard adjusted dose anti-coagulant]          0.01      0.00      0.00 #> d[stroke = 1: Acenocoumarol]                                  0.02      0.02      0.01 #> d[stroke = 1: Alternate day aspirin]                          0.05      0.04      0.03 #> d[stroke = 1: Dipyridamole]                                   0.07      0.10      0.12 #> d[stroke = 1: Fixed dose warfarin]                            0.14      0.09      0.06 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]         0.01      0.01      0.01 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]      0.01      0.01      0.01 #> d[stroke = 1: High dose aspirin]                              0.11      0.08      0.07 #> d[stroke = 1: Indobufen]                                      0.07      0.04      0.03 #> d[stroke = 1: Low adjusted dose anti-coagulant]               0.00      0.00      0.00 #> d[stroke = 1: Low dose aspirin]                               0.01      0.03      0.06 #> d[stroke = 1: Low dose aspirin + copidogrel]                  0.05      0.07      0.10 #> d[stroke = 1: Low dose aspirin + dipyridamole]                0.19      0.15      0.12 #> d[stroke = 1: Medium dose aspirin]                            0.18      0.26      0.22 #> d[stroke = 1: Placebo/Standard care]                          0.02      0.05      0.12 #> d[stroke = 1: Triflusal]                                      0.05      0.05      0.05 #> d[stroke = 1: Ximelagatran]                                   0.01      0.00      0.00 #>                                                          p_rank[10] p_rank[11] p_rank[12] #> d[stroke = 1: Standard adjusted dose anti-coagulant]           0.00       0.00       0.00 #> d[stroke = 1: Acenocoumarol]                                   0.01       0.01       0.02 #> d[stroke = 1: Alternate day aspirin]                           0.02       0.02       0.02 #> d[stroke = 1: Dipyridamole]                                    0.13       0.12       0.13 #> d[stroke = 1: Fixed dose warfarin]                             0.04       0.04       0.03 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]          0.01       0.01       0.01 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]       0.01       0.01       0.01 #> d[stroke = 1: High dose aspirin]                               0.06       0.06       0.06 #> d[stroke = 1: Indobufen]                                       0.02       0.01       0.01 #> d[stroke = 1: Low adjusted dose anti-coagulant]                0.00       0.00       0.00 #> d[stroke = 1: Low dose aspirin]                                0.11       0.18       0.23 #> d[stroke = 1: Low dose aspirin + copidogrel]                   0.12       0.14       0.16 #> d[stroke = 1: Low dose aspirin + dipyridamole]                 0.09       0.07       0.05 #> d[stroke = 1: Medium dose aspirin]                             0.14       0.08       0.03 #> d[stroke = 1: Placebo/Standard care]                           0.18       0.19       0.18 #> d[stroke = 1: Triflusal]                                       0.06       0.06       0.08 #> d[stroke = 1: Ximelagatran]                                    0.00       0.00       0.00 #>                                                          p_rank[13] p_rank[14] p_rank[15] #> d[stroke = 1: Standard adjusted dose anti-coagulant]           0.00       0.00       0.00 #> d[stroke = 1: Acenocoumarol]                                   0.02       0.04       0.43 #> d[stroke = 1: Alternate day aspirin]                           0.02       0.03       0.01 #> d[stroke = 1: Dipyridamole]                                    0.13       0.09       0.03 #> d[stroke = 1: Fixed dose warfarin]                             0.03       0.02       0.01 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]          0.01       0.01       0.05 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]       0.01       0.02       0.27 #> d[stroke = 1: High dose aspirin]                               0.09       0.13       0.04 #> d[stroke = 1: Indobufen]                                       0.00       0.00       0.00 #> d[stroke = 1: Low adjusted dose anti-coagulant]                0.00       0.00       0.00 #> d[stroke = 1: Low dose aspirin]                                0.21       0.12       0.03 #> d[stroke = 1: Low dose aspirin + copidogrel]                   0.17       0.10       0.04 #> d[stroke = 1: Low dose aspirin + dipyridamole]                 0.04       0.03       0.01 #> d[stroke = 1: Medium dose aspirin]                             0.02       0.01       0.00 #> d[stroke = 1: Placebo/Standard care]                           0.13       0.07       0.03 #> d[stroke = 1: Triflusal]                                       0.12       0.34       0.06 #> d[stroke = 1: Ximelagatran]                                    0.00       0.00       0.00 #>                                                          p_rank[16] p_rank[17] #> d[stroke = 1: Standard adjusted dose anti-coagulant]           0.00       0.00 #> d[stroke = 1: Acenocoumarol]                                   0.20       0.07 #> d[stroke = 1: Alternate day aspirin]                           0.00       0.00 #> d[stroke = 1: Dipyridamole]                                    0.01       0.01 #> d[stroke = 1: Fixed dose warfarin]                             0.01       0.00 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]          0.19       0.66 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]       0.49       0.16 #> d[stroke = 1: High dose aspirin]                               0.02       0.02 #> d[stroke = 1: Indobufen]                                       0.00       0.00 #> d[stroke = 1: Low adjusted dose anti-coagulant]                0.00       0.00 #> d[stroke = 1: Low dose aspirin]                                0.02       0.00 #> d[stroke = 1: Low dose aspirin + copidogrel]                   0.01       0.01 #> d[stroke = 1: Low dose aspirin + dipyridamole]                 0.00       0.00 #> d[stroke = 1: Medium dose aspirin]                             0.00       0.00 #> d[stroke = 1: Placebo/Standard care]                           0.01       0.00 #> d[stroke = 1: Triflusal]                                       0.03       0.05 #> d[stroke = 1: Ximelagatran]                                    0.00       0.00  # Modify the default output with ggplot2 functionality library(ggplot2) plot(af_4b_rankprobs) +    facet_grid(Treatment~Study, labeller = label_wrap_gen(20)) +    theme(strip.text.y = element_text(angle = 0)) (af_4b_cumrankprobs <- posterior_rank_probs(af_fit_4b, cumulative = TRUE,                                             newdata = data.frame(stroke = c(0, 1),                                                                   label = c(\"stroke = 0\", \"stroke = 1\")),                                              study = label)) #> ------------------------------------------------------------- Study: stroke = 0 ----  #>  #> Covariate values: #>  stroke #>       0 #>  #>                                                          p_rank[1] p_rank[2] p_rank[3] #> d[stroke = 0: Standard adjusted dose anti-coagulant]          0.00      0.00      0.01 #> d[stroke = 0: Acenocoumarol]                                  0.26      0.49      0.61 #> d[stroke = 0: Alternate day aspirin]                          0.45      0.59      0.67 #> d[stroke = 0: Dipyridamole]                                   0.00      0.00      0.02 #> d[stroke = 0: Fixed dose warfarin]                            0.00      0.00      0.00 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]         0.00      0.00      0.02 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]      0.05      0.14      0.27 #> d[stroke = 0: High dose aspirin]                              0.03      0.09      0.17 #> d[stroke = 0: Indobufen]                                      0.15      0.43      0.64 #> d[stroke = 0: Low adjusted dose anti-coagulant]               0.04      0.17      0.38 #> d[stroke = 0: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 0: Low dose aspirin + copidogrel]                  0.00      0.00      0.00 #> d[stroke = 0: Low dose aspirin + dipyridamole]                0.01      0.04      0.11 #> d[stroke = 0: Medium dose aspirin]                            0.00      0.00      0.01 #> d[stroke = 0: Placebo/Standard care]                          0.00      0.00      0.00 #> d[stroke = 0: Triflusal]                                      0.00      0.00      0.02 #> d[stroke = 0: Ximelagatran]                                   0.00      0.02      0.07 #>                                                          p_rank[4] p_rank[5] p_rank[6] #> d[stroke = 0: Standard adjusted dose anti-coagulant]          0.03      0.11      0.25 #> d[stroke = 0: Acenocoumarol]                                  0.71      0.78      0.82 #> d[stroke = 0: Alternate day aspirin]                          0.72      0.76      0.79 #> d[stroke = 0: Dipyridamole]                                   0.04      0.09      0.13 #> d[stroke = 0: Fixed dose warfarin]                            0.01      0.02      0.02 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]         0.05      0.09      0.14 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]      0.38      0.47      0.54 #> d[stroke = 0: High dose aspirin]                              0.24      0.31      0.36 #> d[stroke = 0: Indobufen]                                      0.76      0.83      0.88 #> d[stroke = 0: Low adjusted dose anti-coagulant]               0.59      0.74      0.83 #> d[stroke = 0: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 0: Low dose aspirin + copidogrel]                  0.01      0.03      0.05 #> d[stroke = 0: Low dose aspirin + dipyridamole]                0.21      0.32      0.42 #> d[stroke = 0: Medium dose aspirin]                            0.02      0.07      0.17 #> d[stroke = 0: Placebo/Standard care]                          0.00      0.00      0.00 #> d[stroke = 0: Triflusal]                                      0.03      0.06      0.09 #> d[stroke = 0: Ximelagatran]                                   0.18      0.33      0.50 #>                                                          p_rank[7] p_rank[8] p_rank[9] #> d[stroke = 0: Standard adjusted dose anti-coagulant]          0.46      0.67      0.82 #> d[stroke = 0: Acenocoumarol]                                  0.85      0.87      0.89 #> d[stroke = 0: Alternate day aspirin]                          0.82      0.84      0.86 #> d[stroke = 0: Dipyridamole]                                   0.19      0.25      0.32 #> d[stroke = 0: Fixed dose warfarin]                            0.04      0.06      0.09 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]         0.19      0.26      0.32 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]      0.59      0.64      0.69 #> d[stroke = 0: High dose aspirin]                              0.41      0.45      0.49 #> d[stroke = 0: Indobufen]                                      0.90      0.93      0.95 #> d[stroke = 0: Low adjusted dose anti-coagulant]               0.88      0.92      0.95 #> d[stroke = 0: Low dose aspirin]                               0.01      0.02      0.04 #> d[stroke = 0: Low dose aspirin + copidogrel]                  0.08      0.12      0.19 #> d[stroke = 0: Low dose aspirin + dipyridamole]                0.50      0.58      0.67 #> d[stroke = 0: Medium dose aspirin]                            0.31      0.48      0.66 #> d[stroke = 0: Placebo/Standard care]                          0.00      0.01      0.02 #> d[stroke = 0: Triflusal]                                      0.12      0.15      0.19 #> d[stroke = 0: Ximelagatran]                                   0.64      0.74      0.83 #>                                                          p_rank[10] p_rank[11] p_rank[12] #> d[stroke = 0: Standard adjusted dose anti-coagulant]           0.92       0.97       0.99 #> d[stroke = 0: Acenocoumarol]                                   0.91       0.93       0.95 #> d[stroke = 0: Alternate day aspirin]                           0.88       0.90       0.91 #> d[stroke = 0: Dipyridamole]                                    0.41       0.51       0.61 #> d[stroke = 0: Fixed dose warfarin]                             0.13       0.19       0.25 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]          0.41       0.51       0.61 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]       0.75       0.79       0.83 #> d[stroke = 0: High dose aspirin]                               0.54       0.59       0.63 #> d[stroke = 0: Indobufen]                                       0.96       0.97       0.98 #> d[stroke = 0: Low adjusted dose anti-coagulant]                0.97       0.98       0.99 #> d[stroke = 0: Low dose aspirin]                                0.11       0.22       0.39 #> d[stroke = 0: Low dose aspirin + copidogrel]                   0.28       0.39       0.54 #> d[stroke = 0: Low dose aspirin + dipyridamole]                 0.75       0.82       0.87 #> d[stroke = 0: Medium dose aspirin]                             0.81       0.91       0.96 #> d[stroke = 0: Placebo/Standard care]                           0.04       0.08       0.16 #> d[stroke = 0: Triflusal]                                       0.23       0.28       0.33 #> d[stroke = 0: Ximelagatran]                                    0.90       0.94       0.97 #>                                                          p_rank[13] p_rank[14] p_rank[15] #> d[stroke = 0: Standard adjusted dose anti-coagulant]           1.00       1.00       1.00 #> d[stroke = 0: Acenocoumarol]                                   0.96       0.97       0.98 #> d[stroke = 0: Alternate day aspirin]                           0.93       0.94       0.96 #> d[stroke = 0: Dipyridamole]                                    0.70       0.78       0.87 #> d[stroke = 0: Fixed dose warfarin]                             0.34       0.43       0.57 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]          0.70       0.79       0.87 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]       0.87       0.91       0.94 #> d[stroke = 0: High dose aspirin]                               0.68       0.73       0.79 #> d[stroke = 0: Indobufen]                                       0.99       0.99       1.00 #> d[stroke = 0: Low adjusted dose anti-coagulant]                1.00       1.00       1.00 #> d[stroke = 0: Low dose aspirin]                                0.60       0.79       0.92 #> d[stroke = 0: Low dose aspirin + copidogrel]                   0.67       0.78       0.88 #> d[stroke = 0: Low dose aspirin + dipyridamole]                 0.91       0.94       0.97 #> d[stroke = 0: Medium dose aspirin]                             0.99       1.00       1.00 #> d[stroke = 0: Placebo/Standard care]                           0.28       0.48       0.70 #> d[stroke = 0: Triflusal]                                       0.39       0.46       0.55 #> d[stroke = 0: Ximelagatran]                                    0.99       0.99       1.00 #>                                                          p_rank[16] p_rank[17] #> d[stroke = 0: Standard adjusted dose anti-coagulant]           1.00          1 #> d[stroke = 0: Acenocoumarol]                                   1.00          1 #> d[stroke = 0: Alternate day aspirin]                           0.98          1 #> d[stroke = 0: Dipyridamole]                                    0.94          1 #> d[stroke = 0: Fixed dose warfarin]                             0.77          1 #> d[stroke = 0: Fixed dose warfarin + low dose aspirin]          0.95          1 #> d[stroke = 0: Fixed dose warfarin + medium dose aspirin]       0.98          1 #> d[stroke = 0: High dose aspirin]                               0.87          1 #> d[stroke = 0: Indobufen]                                       1.00          1 #> d[stroke = 0: Low adjusted dose anti-coagulant]                1.00          1 #> d[stroke = 0: Low dose aspirin]                                0.99          1 #> d[stroke = 0: Low dose aspirin + copidogrel]                   0.96          1 #> d[stroke = 0: Low dose aspirin + dipyridamole]                 0.99          1 #> d[stroke = 0: Medium dose aspirin]                             1.00          1 #> d[stroke = 0: Placebo/Standard care]                           0.89          1 #> d[stroke = 0: Triflusal]                                       0.68          1 #> d[stroke = 0: Ximelagatran]                                    1.00          1 #>  #> ------------------------------------------------------------- Study: stroke = 1 ----  #>  #> Covariate values: #>  stroke #>       1 #>  #>                                                          p_rank[1] p_rank[2] p_rank[3] #> d[stroke = 1: Standard adjusted dose anti-coagulant]          0.01      0.12      0.47 #> d[stroke = 1: Acenocoumarol]                                  0.04      0.06      0.07 #> d[stroke = 1: Alternate day aspirin]                          0.37      0.47      0.52 #> d[stroke = 1: Dipyridamole]                                   0.00      0.00      0.00 #> d[stroke = 1: Fixed dose warfarin]                            0.00      0.02      0.05 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]         0.00      0.01      0.02 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]      0.00      0.00      0.00 #> d[stroke = 1: High dose aspirin]                              0.02      0.05      0.07 #> d[stroke = 1: Indobufen]                                      0.03      0.12      0.23 #> d[stroke = 1: Low adjusted dose anti-coagulant]               0.43      0.76      0.88 #> d[stroke = 1: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 1: Low dose aspirin + copidogrel]                  0.00      0.00      0.00 #> d[stroke = 1: Low dose aspirin + dipyridamole]                0.00      0.01      0.02 #> d[stroke = 1: Medium dose aspirin]                            0.00      0.00      0.00 #> d[stroke = 1: Placebo/Standard care]                          0.00      0.00      0.00 #> d[stroke = 1: Triflusal]                                      0.00      0.00      0.01 #> d[stroke = 1: Ximelagatran]                                   0.09      0.36      0.65 #>                                                          p_rank[4] p_rank[5] p_rank[6] #> d[stroke = 1: Standard adjusted dose anti-coagulant]          0.80      0.95      0.99 #> d[stroke = 1: Acenocoumarol]                                  0.08      0.10      0.13 #> d[stroke = 1: Alternate day aspirin]                          0.58      0.66      0.75 #> d[stroke = 1: Dipyridamole]                                   0.01      0.02      0.06 #> d[stroke = 1: Fixed dose warfarin]                            0.11      0.29      0.54 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]         0.02      0.03      0.03 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]      0.01      0.01      0.01 #> d[stroke = 1: High dose aspirin]                              0.10      0.16      0.26 #> d[stroke = 1: Indobufen]                                      0.42      0.67      0.82 #> d[stroke = 1: Low adjusted dose anti-coagulant]               0.95      0.98      0.99 #> d[stroke = 1: Low dose aspirin]                               0.00      0.00      0.00 #> d[stroke = 1: Low dose aspirin + copidogrel]                  0.00      0.01      0.04 #> d[stroke = 1: Low dose aspirin + dipyridamole]                0.06      0.12      0.25 #> d[stroke = 1: Medium dose aspirin]                            0.00      0.02      0.08 #> d[stroke = 1: Placebo/Standard care]                          0.00      0.00      0.01 #> d[stroke = 1: Triflusal]                                      0.01      0.03      0.06 #> d[stroke = 1: Ximelagatran]                                   0.84      0.95      0.98 #>                                                          p_rank[7] p_rank[8] p_rank[9] #> d[stroke = 1: Standard adjusted dose anti-coagulant]          1.00      1.00      1.00 #> d[stroke = 1: Acenocoumarol]                                  0.15      0.17      0.18 #> d[stroke = 1: Alternate day aspirin]                          0.80      0.84      0.87 #> d[stroke = 1: Dipyridamole]                                   0.13      0.23      0.35 #> d[stroke = 1: Fixed dose warfarin]                            0.68      0.77      0.83 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]         0.05      0.06      0.07 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]      0.02      0.03      0.03 #> d[stroke = 1: High dose aspirin]                              0.37      0.45      0.52 #> d[stroke = 1: Indobufen]                                      0.90      0.94      0.96 #> d[stroke = 1: Low adjusted dose anti-coagulant]               1.00      1.00      1.00 #> d[stroke = 1: Low dose aspirin]                               0.01      0.04      0.10 #> d[stroke = 1: Low dose aspirin + copidogrel]                  0.08      0.15      0.25 #> d[stroke = 1: Low dose aspirin + dipyridamole]                0.44      0.59      0.71 #> d[stroke = 1: Medium dose aspirin]                            0.26      0.51      0.73 #> d[stroke = 1: Placebo/Standard care]                          0.03      0.08      0.20 #> d[stroke = 1: Triflusal]                                      0.10      0.15      0.20 #> d[stroke = 1: Ximelagatran]                                   0.99      1.00      1.00 #>                                                          p_rank[10] p_rank[11] p_rank[12] #> d[stroke = 1: Standard adjusted dose anti-coagulant]           1.00       1.00       1.00 #> d[stroke = 1: Acenocoumarol]                                   0.20       0.21       0.23 #> d[stroke = 1: Alternate day aspirin]                           0.89       0.91       0.93 #> d[stroke = 1: Dipyridamole]                                    0.48       0.60       0.73 #> d[stroke = 1: Fixed dose warfarin]                             0.87       0.91       0.94 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]          0.07       0.08       0.09 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]       0.04       0.05       0.06 #> d[stroke = 1: High dose aspirin]                               0.58       0.64       0.70 #> d[stroke = 1: Indobufen]                                       0.98       0.99       0.99 #> d[stroke = 1: Low adjusted dose anti-coagulant]                1.00       1.00       1.00 #> d[stroke = 1: Low dose aspirin]                                0.21       0.39       0.62 #> d[stroke = 1: Low dose aspirin + copidogrel]                   0.37       0.51       0.67 #> d[stroke = 1: Low dose aspirin + dipyridamole]                 0.80       0.87       0.92 #> d[stroke = 1: Medium dose aspirin]                             0.87       0.94       0.98 #> d[stroke = 1: Placebo/Standard care]                           0.38       0.57       0.75 #> d[stroke = 1: Triflusal]                                       0.27       0.32       0.41 #> d[stroke = 1: Ximelagatran]                                    1.00       1.00       1.00 #>                                                          p_rank[13] p_rank[14] p_rank[15] #> d[stroke = 1: Standard adjusted dose anti-coagulant]           1.00       1.00       1.00 #> d[stroke = 1: Acenocoumarol]                                   0.25       0.29       0.72 #> d[stroke = 1: Alternate day aspirin]                           0.96       0.98       0.99 #> d[stroke = 1: Dipyridamole]                                    0.86       0.95       0.98 #> d[stroke = 1: Fixed dose warfarin]                             0.96       0.98       0.99 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]          0.09       0.11       0.15 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]       0.06       0.08       0.35 #> d[stroke = 1: High dose aspirin]                               0.79       0.92       0.96 #> d[stroke = 1: Indobufen]                                       1.00       1.00       1.00 #> d[stroke = 1: Low adjusted dose anti-coagulant]                1.00       1.00       1.00 #> d[stroke = 1: Low dose aspirin]                                0.83       0.95       0.98 #> d[stroke = 1: Low dose aspirin + copidogrel]                   0.84       0.94       0.98 #> d[stroke = 1: Low dose aspirin + dipyridamole]                 0.96       0.99       1.00 #> d[stroke = 1: Medium dose aspirin]                             0.99       1.00       1.00 #> d[stroke = 1: Placebo/Standard care]                           0.88       0.96       0.99 #> d[stroke = 1: Triflusal]                                       0.53       0.86       0.92 #> d[stroke = 1: Ximelagatran]                                    1.00       1.00       1.00 #>                                                          p_rank[16] p_rank[17] #> d[stroke = 1: Standard adjusted dose anti-coagulant]           1.00          1 #> d[stroke = 1: Acenocoumarol]                                   0.93          1 #> d[stroke = 1: Alternate day aspirin]                           1.00          1 #> d[stroke = 1: Dipyridamole]                                    0.99          1 #> d[stroke = 1: Fixed dose warfarin]                             1.00          1 #> d[stroke = 1: Fixed dose warfarin + low dose aspirin]          0.34          1 #> d[stroke = 1: Fixed dose warfarin + medium dose aspirin]       0.84          1 #> d[stroke = 1: High dose aspirin]                               0.98          1 #> d[stroke = 1: Indobufen]                                       1.00          1 #> d[stroke = 1: Low adjusted dose anti-coagulant]                1.00          1 #> d[stroke = 1: Low dose aspirin]                                1.00          1 #> d[stroke = 1: Low dose aspirin + copidogrel]                   0.99          1 #> d[stroke = 1: Low dose aspirin + dipyridamole]                 1.00          1 #> d[stroke = 1: Medium dose aspirin]                             1.00          1 #> d[stroke = 1: Placebo/Standard care]                           1.00          1 #> d[stroke = 1: Triflusal]                                       0.95          1 #> d[stroke = 1: Ximelagatran]                                    1.00          1  plot(af_4b_cumrankprobs) +    facet_grid(Treatment~Study, labeller = label_wrap_gen(20)) +    theme(strip.text.y = element_text(angle = 0))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_atrial_fibrillation.html","id":"model-fit-and-comparison","dir":"Articles","previous_headings":"","what":"Model fit and comparison","title":"Example: Atrial fibrillation","text":"Model fit can checked using dic() function: models fit data well, posterior mean residual deviance close number data points. DIC slightly lower meta-regression model, although couple points (substantial differences usually considered 3-5 points). estimated heterogeneity standard deviation much lower meta-regression model, suggesting adjusting proportion patients prior stroke explaining heterogeneity data. can also examine residual deviance contributions corresponding plot() method.","code":"(af_dic_1 <- dic(af_fit_1)) #> Residual deviance: 60.3 (on 61 data points) #>                pD: 48.6 #>               DIC: 108.9 (af_dic_4b <- dic(af_fit_4b)) #> Residual deviance: 58.6 (on 61 data points) #>                pD: 48.5 #>               DIC: 107.2 plot(af_dic_1) plot(af_dic_4b)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_atrial_fibrillation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Atrial fibrillation","text":"Cooper, N. J., . J. Sutton, D. Morris, . E. Ades, N. J. Welton. 2009. “Addressing -Study Heterogeneity Inconsistency Mixed Treatment Comparisons: Application Stroke Prevention Treatments Individuals Non-Rheumatic Atrial Fibrillation.” Statistics Medicine 28 (14): 1861–81. https://doi.org/10.1002/sim.3594.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_bcg_vaccine.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: BCG vaccine for tuberculosis","text":"data giving number diagnosed TB trial follow-(r) total (n) arm, use function set_agd_arm() set network. set “unvaccinated” network reference treatment. latitude variable bcg_vaccine data frame automatically available use meta-regression model.","code":"bcg_net <- set_agd_arm(bcg_vaccine,                         study = studyn,                        trt = trtc,                        r = r,                         n = n,                        trt_ref = \"Unvaccinated\") bcg_net #> A network with 13 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                   #>  1     2: Unvaccinated | Vaccinated #>  2     2: Unvaccinated | Vaccinated #>  3     2: Unvaccinated | Vaccinated #>  4     2: Unvaccinated | Vaccinated #>  5     2: Unvaccinated | Vaccinated #>  6     2: Unvaccinated | Vaccinated #>  7     2: Unvaccinated | Vaccinated #>  8     2: Unvaccinated | Vaccinated #>  9     2: Unvaccinated | Vaccinated #>  10    2: Unvaccinated | Vaccinated #>  ... plus 3 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 2 #> Total number of studies: 13 #> Reference treatment is: Unvaccinated #> Network is connected"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_bcg_vaccine.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: BCG vaccine for tuberculosis","text":"fit random effects (RE) models, firstly without covariates, meta-regression continuous covariate latitude.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_bcg_vaccine.html","id":"re-meta-analysis-no-covariate","dir":"Articles","previous_headings":"Meta-analysis models","what":"RE meta-analysis (no covariate)","title":"Example: BCG vaccine for tuberculosis","text":"start fitting standard RE model without covariates. use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effect \\(d_\\mathrm{Vaccine}\\) study-specific intercepts \\(\\mu_j\\), \\(\\textrm{half-N}(0, 5^2)\\) prior distribution heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: model fitted nma() function, random effects model specified trt_effects = \"random\". Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) random effects \\(\\delta_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. bcg_fit_unadj <- nma(bcg_net,                       trt_effects = \"random\",                      prior_intercept = normal(scale = 100),                      prior_trt = normal(scale = 100),                      prior_het = half_normal(scale = 5)) bcg_fit_unadj #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                    mean se_mean   sd      2.5%       25%       50%       75%     97.5% n_eff #> d[Vaccinated]     -0.75    0.01 0.21     -1.17     -0.89     -0.75     -0.62     -0.34  1284 #> lp__          -13453.94    0.13 4.44 -13463.44 -13456.69 -13453.65 -13450.86 -13446.31  1168 #> tau                0.68    0.01 0.20      0.39      0.54      0.65      0.78      1.14  1408 #>               Rhat #> d[Vaccinated]    1 #> lp__             1 #> tau              1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:55:42 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(bcg_fit_unadj, pars = c(\"d\", \"mu\", \"delta\", \"tau\")) plot_prior_posterior(bcg_fit_unadj, prior = c(\"trt\", \"het\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_bcg_vaccine.html","id":"re-meta-regression-with-covariate-latitude","dir":"Articles","previous_headings":"Meta-analysis models","what":"RE meta-regression with covariate latitude","title":"Example: BCG vaccine for tuberculosis","text":"now fit RE meta-regression model, adjusting latitude. use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effect \\(d_\\mathrm{Vaccine}\\), study-specific intercepts \\(\\mu_j\\), regression coefficient \\(\\beta\\). use \\(\\text{half-N}(0, 5^2)\\) prior distribution heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: , model fitted nma() function. regression formula ~ .trt:latitude means interaction latitude treatment included; .trt special variable indicates treatment, latitude original data set. increase adapt_delta 0.99 remove small number divergent transition errors (default RE models set 0.95). Basic parameter summaries given print() method: Note latitude automatically centered 33.46, mean value studies network. default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. bcg_fit_lat <- nma(bcg_net,                     trt_effects = \"random\",                    regression = ~.trt:latitude,                    prior_intercept = normal(scale = 100),                    prior_trt = normal(scale = 100),                    prior_reg = normal(scale = 100),                    prior_het = half_normal(scale = 5),                    adapt_delta = 0.99) #> Note: No treatment classes specified in network, any interactions in `regression` formula will be separate (independent) for each treatment. #> Use set_*() argument `trt_class` and nma() argument `class_interactions` to change this. bcg_fit_lat #> A random effects NMA with a binomial likelihood (logit link). #> Regression model: ~.trt:latitude. #> Centred covariates at the following overall mean values: #> latitude  #> 33.46154  #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                    mean se_mean   sd      2.5%       25%       50%       75% #> beta[.trtVaccinated:latitude]     -0.03    0.00 0.01     -0.05     -0.04     -0.03     -0.03 #> d[Vaccinated]                     -0.76    0.00 0.12     -1.02     -0.83     -0.75     -0.69 #> lp__                          -13457.10    0.18 5.08 -13467.75 -13460.31 -13456.75 -13453.42 #> tau                                0.30    0.01 0.18      0.03      0.16      0.27      0.40 #>                                   97.5% n_eff Rhat #> beta[.trtVaccinated:latitude]     -0.02  2004    1 #> d[Vaccinated]                     -0.52  1801    1 #> lp__                          -13448.20   767    1 #> tau                                0.74   816    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:55:54 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(bcg_fit_lat, pars = c(\"d\", \"beta\", \"mu\", \"delta\", \"tau\")) plot_prior_posterior(bcg_fit_lat, prior = c(\"trt\", \"reg\", \"het\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_bcg_vaccine.html","id":"model-fit-and-comparison","dir":"Articles","previous_headings":"","what":"Model fit and comparison","title":"Example: BCG vaccine for tuberculosis","text":"Model fit can checked using dic() function: DIC similar two models, might first choose unadjusted model. posterior mean residual deviance larger model covariate, model also lower effective number parameters \\(p_D\\) allowing shrinkage random treatment effects. Moreover, model covariate much lower estimated heterogeneity standard deviation: Adjusting latitude explaining substantial amount heterogeneity data. 95% Credible Interval regression coefficient also excludes zero:  Altogether, might prefer model adjustment latitude. considering covariates random effects models important just look DIC (Dias et al. 2011). also consider reductions heterogeneity, estimated regression coefficients standard error. DIC sensitive changes heterogeneity, RE models flexible can fit data well whatever level heterogeneity.","code":"(bcg_dic_unadj <- dic(bcg_fit_unadj)) #> Residual deviance: 26 (on 26 data points) #>                pD: 23.5 #>               DIC: 49.5 (bcg_dic_lat <- dic(bcg_fit_lat)) #> Residual deviance: 30.4 (on 26 data points) #>                pD: 21.2 #>               DIC: 51.6 summary(bcg_fit_unadj, pars = \"tau\") #>     mean  sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> tau 0.68 0.2 0.39 0.54 0.65 0.78  1.14     1417     2113    1 summary(bcg_fit_lat, pars = \"tau\") #>     mean   sd 2.5%  25%  50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> tau  0.3 0.18 0.03 0.16 0.27 0.4  0.74      755     1246    1 summary(bcg_fit_lat, pars = \"beta\") #>                                mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> beta[.trtVaccinated:latitude] -0.03 0.01 -0.05 -0.04 -0.03 -0.03 -0.02     2059     2260    1  plot(bcg_fit_lat,       pars = \"beta\",       ref_line = 0,      stat = \"halfeye\")"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_bcg_vaccine.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: BCG vaccine for tuberculosis","text":"can produce estimates relative effect vaccination latitude using relative_effects() function. newdata argument specifies data frame containing values covariate latitude interested , study argument used specify column newdata informative label. plot() method may used visually compare estimates:  sophisticated plot shows regression line confidence band effect latitude, overlaid observed log odds ratios study:","code":"bcg_releff_lat <- relative_effects(bcg_fit_lat,                                    newdata = tibble::tibble(latitude = seq(10, 50, by = 10),                                                             label = paste0(latitude, \"\\u00B0 latitude\")),                                    study = label)  bcg_releff_lat #> ----------------------------------------------------------- Study: 10° latitude ----  #>  #> Covariate values: #>  latitude #>        10 #>  #>                              mean   sd  2.5%   25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[10° latitude: Vaccinated] -0.02 0.21 -0.49 -0.13   0 0.1  0.39     2106     2085    1 #>  #> ----------------------------------------------------------- Study: 20° latitude ----  #>  #> Covariate values: #>  latitude #>        20 #>  #>                              mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[20° latitude: Vaccinated] -0.33 0.16 -0.67 -0.42 -0.32 -0.25 -0.04     2119     1945    1 #>  #> ----------------------------------------------------------- Study: 30° latitude ----  #>  #> Covariate values: #>  latitude #>        30 #>  #>                              mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[30° latitude: Vaccinated] -0.65 0.12 -0.91 -0.72 -0.64 -0.58 -0.41     2066     1826    1 #>  #> ----------------------------------------------------------- Study: 40° latitude ----  #>  #> Covariate values: #>  latitude #>        40 #>  #>                              mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[40° latitude: Vaccinated] -0.97 0.14 -1.25 -1.05 -0.96 -0.89 -0.69     1793     1868    1 #>  #> ----------------------------------------------------------- Study: 50° latitude ----  #>  #> Covariate values: #>  latitude #>        50 #>  #>                              mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[50° latitude: Vaccinated] -1.28 0.18 -1.66 -1.39 -1.28 -1.18 -0.91     1766     2190    1 plot(bcg_releff_lat,       ref_line = 0) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)  # Get data for regression line lat_range <- range(bcg_vaccine$latitude) lat_dat <- tibble(latitude = seq(lat_range[1], lat_range[2], by = 1))  bcg_lat_reg <- relative_effects(bcg_fit_lat,                                  newdata = lat_dat) %>%    as_tibble() %>%    bind_cols(lat_dat)  # Get study log odds ratios bcg_lor <- bcg_vaccine %>%    group_by(studyn) %>%    mutate(lor = log(r / (n - r)) - log(first(r) / (first(n) - first(r))),          sample_size = sum(n)) %>%    slice(-1)  # Plot ggplot(aes(x = latitude), data = bcg_lor) +   geom_hline(yintercept = 0, colour = \"grey60\") +   geom_ribbon(aes(ymin = `2.5%`, ymax = `97.5%`), data = bcg_lat_reg,               fill = \"darkred\", alpha = 0.3) +   geom_line(aes(y = mean), data = bcg_lat_reg,             colour = \"darkred\") +   geom_point(aes(y = lor, size = sample_size), alpha = 0.6) +   coord_cartesian(xlim = c(0, 60)) +   xlab(\"Degrees Latitude\") + ylab(\"log Odds Ratio\") +   scale_size(\"Sample Size\") +   theme_multinma()"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_bcg_vaccine.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: BCG vaccine for tuberculosis","text":"Berkey, C. S., D. C. Hoaglin, F. Mosteller, G. . Colditz. 1995. “Random-Effects Regression Model Meta-Analysis.” Statistics Medicine 14 (4): 395–411. https://doi.org/10.1002/sim.4780140406. Dias, S., . J. Sutton, N. J. Welton, . E. Ades. 2011. “NICE DSU Technical Support Document 3: Heterogeneity: Subgroups, Meta-Regression, Bias Bias-Adjustment.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_blocker.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Beta blockers","text":"begin setting network - just pairwise meta-analysis. arm-level count data giving number deaths (r) total (n) arm, use function set_agd_arm(). set “Control” reference treatment.","code":"blocker_net <- set_agd_arm(blocker,                             study = studyn,                            trt = trtc,                            r = r,                             n = n,                            trt_ref = \"Control\") blocker_net #> A network with 22 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                #>  1     2: Control | Beta Blocker #>  2     2: Control | Beta Blocker #>  3     2: Control | Beta Blocker #>  4     2: Control | Beta Blocker #>  5     2: Control | Beta Blocker #>  6     2: Control | Beta Blocker #>  7     2: Control | Beta Blocker #>  8     2: Control | Beta Blocker #>  9     2: Control | Beta Blocker #>  10    2: Control | Beta Blocker #>  ... plus 12 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 2 #> Total number of studies: 22 #> Reference treatment is: Control #> Network is connected"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_blocker.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: Beta blockers","text":"fit fixed effect (FE) random effects (RE) models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_blocker.html","id":"fixed-effect-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Fixed effect meta-analysis","title":"Example: Beta blockers","text":"First, fit fixed effect model using nma() function trt_effects = \"fixed\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. default, use Binomial likelihood logit link function, auto-detected data. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. blocker_fit_FE <- nma(blocker_net,                     trt_effects = \"fixed\",                    prior_intercept = normal(scale = 100),                    prior_trt = normal(scale = 100)) blocker_fit_FE #> A fixed effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                     mean se_mean   sd     2.5%      25%      50%      75%    97.5% n_eff Rhat #> d[Beta Blocker]    -0.26    0.00 0.05    -0.35    -0.29    -0.26    -0.23    -0.16  3755    1 #> lp__            -5960.32    0.08 3.37 -5967.55 -5962.45 -5960.01 -5957.92 -5954.65  1576    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:56:08 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(blocker_fit_FE, pars = c(\"d\", \"mu\")) plot_prior_posterior(blocker_fit_FE, prior = \"trt\")"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_blocker.html","id":"random-effects-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Random effects meta-analysis","title":"Example: Beta blockers","text":"now fit random effects model using nma() function trt_effects = \"random\". , use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), additionally use \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. blocker_fit_RE <- nma(blocker_net,                     trt_effects = \"random\",                    prior_intercept = normal(scale = 100),                    prior_trt = normal(scale = 100),                    prior_het = half_normal(scale = 5)) blocker_fit_RE #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                     mean se_mean   sd     2.5%      25%      50%      75%    97.5% n_eff Rhat #> d[Beta Blocker]    -0.25    0.00 0.07    -0.37    -0.29    -0.25    -0.21    -0.11  3135    1 #> lp__            -5970.64    0.17 5.46 -5982.22 -5974.25 -5970.34 -5966.78 -5960.87  1082    1 #> tau                 0.14    0.00 0.08     0.01     0.08     0.13     0.19     0.32  1019    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:56:15 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(blocker_fit_RE, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(blocker_fit_RE, prior = c(\"trt\", \"het\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_blocker.html","id":"model-comparison","dir":"Articles","previous_headings":"Meta-analysis models","what":"Model comparison","title":"Example: Beta blockers","text":"Model fit can checked using dic() function: residual deviance lower RE model, expected model flexible. However, comes increased effective number parameters (note increase \\(p_D\\)). result, DIC models similar FE model may preferred parsimony. can also examine residual deviance contributions corresponding plot() method.   number points well fit FE model, posterior mean residual deviance contributions greater 1. Study 14 particularly poor fit FE model, residual deviance reduced (although still high) RE model. evidence given careful examination, consideration given issues potential effect-modifying covariates (Dias et al. 2011).","code":"(dic_FE <- dic(blocker_fit_FE)) #> Residual deviance: 46.6 (on 44 data points) #>                pD: 23 #>               DIC: 69.6 (dic_RE <- dic(blocker_fit_RE)) #> Residual deviance: 41.8 (on 44 data points) #>                pD: 28.5 #>               DIC: 70.3 plot(dic_FE) plot(dic_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_blocker.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: Beta blockers","text":"Dias et al. (2011) produce absolute predictions probability mortality beta blockers control, assuming Normal distribution baseline logit-probability mortality mean \\(-2.2\\) precision \\(3.3\\). can replicate results using predict() method. baseline argument takes distr() distribution object, specify corresponding Normal distribution. set type = \"response\" produce predicted probabilities (type = \"link\" produce predicted log odds).   instead information baseline logit-probability mortality event counts, can use construct Beta distribution baseline probability mortality. example, 4 36 individuals died control treatment target population interest, appropriate Beta distribution probability \\(\\textrm{Beta}(4, 36-4)\\). can specify Beta distribution baseline response using baseline_type = \"reponse\" argument (default \"link\", used baseline logit-probability).   Notice results nearly equivalent calculated using Normal distribution baseline logit-probability, since event counts correspond approximately distribution logit-probability.","code":"pred_FE <- predict(blocker_fit_FE,                     baseline = distr(qnorm, mean = -2.2, sd = 3.3^-0.5),                     type = \"response\") pred_FE #>                    mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Control]      0.11 0.05 0.04 0.07 0.10 0.14  0.24     3902     3974    1 #> pred[Beta Blocker] 0.09 0.05 0.03 0.06 0.08 0.11  0.20     3890     3974    1 plot(pred_FE) pred_RE <- predict(blocker_fit_RE,                     baseline = distr(qnorm, mean = -2.2, sd = 3.3^-0.5),                     type = \"response\") pred_RE #>                    mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Control]      0.11 0.05 0.04 0.07 0.10 0.14  0.25     3760     3889    1 #> pred[Beta Blocker] 0.09 0.05 0.03 0.06 0.08 0.11  0.21     3772     3849    1 plot(pred_RE) pred_FE_beta <- predict(blocker_fit_FE,                          baseline = distr(qbeta, 4, 36-4),                         baseline_type = \"response\",                         type = \"response\") pred_FE_beta #>                    mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Control]      0.11 0.05 0.03 0.07 0.10 0.14  0.23     3595     3770    1 #> pred[Beta Blocker] 0.09 0.04 0.03 0.06 0.08 0.11  0.19     3542     3809    1 plot(pred_FE_beta) pred_RE_beta <- predict(blocker_fit_RE,                          baseline = distr(qbeta, 4, 36-4),                         baseline_type = \"response\",                         type = \"response\") pred_RE_beta #>                    mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Control]      0.11 0.05 0.03 0.07 0.10 0.14  0.23     3847     4056    1 #> pred[Beta Blocker] 0.09 0.04 0.02 0.06 0.08 0.11  0.19     3845     4016    1 plot(pred_RE_beta)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_blocker.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Beta blockers","text":"Carlin, J. B. 1992. “Meta-Analysis 2 X 2 Tables: Bayesian Approach.” Statistics Medicine 11 (2): 141–58. https://doi.org/10.1002/sim.4780110202. Dias, S., N. J. Welton, . J. Sutton, . E. Ades. 2011. “NICE DSU Technical Support Document 2: Generalised Linear Modelling Framework Pair-Wise Network Meta-Analysis Randomised Controlled Trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_diabetes.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Diabetes","text":"begin setting network. arm-level count data giving number new cases diabetes (r) total (n) arm, use function set_agd_arm(). computational efficiency, let “Beta Blocker” set network reference treatment default. Elliott Meyer (2007) Dias et al. (2011) use “Diuretic” reference, simple matter transform results fitting NMA model.1 also details length follow-years trial (time), use offset cloglog link function model data rates. specify function set_agd_arm(): additional columns data (e.g. offsets covariates, column time) automatically made available network. Plot network structure.","code":"db_net <- set_agd_arm(diabetes,                        study = studyc,                       trt = trtc,                       r = r,                        n = n) db_net #> A network with 22 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study  Treatments                            #>  AASK   3: Beta Blocker | CCB | ACE Inhibitor #>  ALLHAT 3: Diuretic | CCB | ACE Inhibitor     #>  ALPINE 2: Diuretic | ARB                     #>  ANBP-2 2: Diuretic | ACE Inhibitor           #>  ASCOT  2: Beta Blocker | CCB                 #>  CAPPP  2: Beta Blocker | ACE Inhibitor       #>  CHARM  2: Placebo | ARB                      #>  DREAM  2: Placebo | ACE Inhibitor            #>  EWPH   2: Diuretic | Placebo                 #>  FEVER  2: Placebo | CCB                      #>  ... plus 12 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 6 #> Total number of studies: 22 #> Reference treatment is: Beta Blocker #> Network is connected plot(db_net, weight_edges = TRUE, weight_nodes = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_diabetes.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: Diabetes","text":"fit fixed effect (FE) random effects (RE) models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_diabetes.html","id":"fixed-effect-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Fixed effect meta-analysis","title":"Example: Diabetes","text":"First, fit fixed effect model using nma() function trt_effects = \"fixed\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. specify cloglog link used link = \"cloglog\" (Binomial likelihood default data), specify log follow-time offset using regression formula regression = ~offset(log(time)). Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. db_fit_FE <- nma(db_net,                   trt_effects = \"fixed\",                  link = \"cloglog\",                  regression = ~offset(log(time)),                  prior_intercept = normal(scale = 100),                  prior_trt = normal(scale = 100)) #> Note: No treatment classes specified in network, any interactions in `regression` formula will be separate (independent) for each treatment. #> Use set_*() argument `trt_class` and nma() argument `class_interactions` to change this. #> Note: Setting \"Beta Blocker\" as the network reference treatment. db_fit_FE #> A fixed effects NMA with a binomial likelihood (cloglog link). #> Regression model: ~offset(log(time)). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                       mean se_mean   sd      2.5%       25%       50%       75%     97.5% #> d[ACE Inhibitor]     -0.30    0.00 0.05     -0.39     -0.33     -0.30     -0.27     -0.21 #> d[ARB]               -0.39    0.00 0.05     -0.49     -0.43     -0.39     -0.36     -0.30 #> d[CCB]               -0.20    0.00 0.03     -0.26     -0.22     -0.20     -0.17     -0.14 #> d[Diuretic]           0.06    0.00 0.06     -0.06      0.02      0.06      0.10      0.16 #> d[Placebo]           -0.19    0.00 0.05     -0.29     -0.22     -0.19     -0.15     -0.09 #> lp__             -37970.50    0.09 3.75 -37978.81 -37972.86 -37970.15 -37967.78 -37964.22 #>                  n_eff Rhat #> d[ACE Inhibitor]  1426    1 #> d[ARB]            2104    1 #> d[CCB]            1815    1 #> d[Diuretic]       1681    1 #> d[Placebo]        1345    1 #> lp__              1787    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:56:31 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(db_fit_FE, pars = c(\"d\", \"mu\")) plot_prior_posterior(db_fit_FE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_diabetes.html","id":"random-effects-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Random effects meta-analysis","title":"Example: Diabetes","text":"now fit random effects model using nma() function trt_effects = \"random\". , use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), additionally use \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. db_fit_RE <- nma(db_net,                   trt_effects = \"random\",                  link = \"cloglog\",                  regression = ~offset(log(time)),                  prior_intercept = normal(scale = 10),                  prior_trt = normal(scale = 10),                  prior_het = half_normal(scale = 5),                  init_r = 0.5) #> Note: No treatment classes specified in network, any interactions in `regression` formula will be separate (independent) for each treatment. #> Use set_*() argument `trt_class` and nma() argument `class_interactions` to change this. #> Note: Setting \"Beta Blocker\" as the network reference treatment. db_fit_RE #> A random effects NMA with a binomial likelihood (cloglog link). #> Regression model: ~offset(log(time)). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                       mean se_mean   sd      2.5%       25%       50%       75%     97.5% #> d[ACE Inhibitor]     -0.33    0.00 0.08     -0.49     -0.38     -0.33     -0.28     -0.19 #> d[ARB]               -0.40    0.00 0.09     -0.60     -0.46     -0.40     -0.34     -0.21 #> d[CCB]               -0.17    0.00 0.07     -0.30     -0.21     -0.17     -0.13     -0.04 #> d[Diuretic]           0.07    0.00 0.09     -0.10      0.01      0.07      0.13      0.25 #> d[Placebo]           -0.22    0.00 0.08     -0.39     -0.27     -0.21     -0.16     -0.05 #> lp__             -37980.49    0.19 6.66 -37994.30 -37984.83 -37980.28 -37975.96 -37968.00 #> tau                   0.13    0.00 0.04      0.06      0.10      0.13      0.16      0.23 #>                  n_eff Rhat #> d[ACE Inhibitor]  1742    1 #> d[ARB]            2345    1 #> d[CCB]            1693    1 #> d[Diuretic]       1878    1 #> d[Placebo]        1705    1 #> lp__              1231    1 #> tau               1054    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:56:54 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(db_fit_RE, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(db_fit_RE, prior = c(\"trt\", \"het\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_diabetes.html","id":"model-comparison","dir":"Articles","previous_headings":"Meta-analysis models","what":"Model comparison","title":"Example: Diabetes","text":"Model fit can checked using dic() function: FE model poor fit data, residual deviance much higher number data points. RE model fits data better, much lower DIC; prefer RE model. can also examine residual deviance contributions corresponding plot() method.","code":"(dic_FE <- dic(db_fit_FE)) #> Residual deviance: 78.6 (on 48 data points) #>                pD: 27.4 #>               DIC: 106 (dic_RE <- dic(db_fit_RE)) #> Residual deviance: 53.1 (on 48 data points) #>                pD: 37.8 #>               DIC: 90.9 plot(dic_FE) plot(dic_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_diabetes.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: Diabetes","text":"comparison Elliott Meyer (2007) Dias et al. (2011), can produce relative effects “Diuretic” using relative_effects() function trt_ref = \"Diuretic\":   Dias et al. (2011) produce absolute predictions probability developing diabetes three years, assuming Normal distribution baseline cloglog probability developing diabetes diuretic treatment mean \\(-4.2\\) precision \\(1.11\\). can replicate results using predict() method. specify data frame newdata, containing time offset(s) produce predictions (3 years). baseline argument takes distr() distribution object specify corresponding Normal distribution baseline cloglog probability, set trt_ref = \"Diuretic\" indicate baseline distribution corresponds “Diuretic” rather network reference “Beta Blocker”. set type = \"response\" produce predicted event probabilities (type = \"link\" produce predicted cloglog probabilities).   baseline newdata arguments omitted, predicted probabilities produced every study network based follow-times estimated baseline cloglog probabilities \\(\\mu_j\\):  can also produce treatment rankings, rank probabilities, cumulative rank probabilities.","code":"(db_releff_FE <- relative_effects(db_fit_FE, trt_ref = \"Diuretic\")) #>                   mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[Beta Blocker]  -0.06 0.06 -0.16 -0.10 -0.06 -0.02  0.06     1702     2429    1 #> d[ACE Inhibitor] -0.36 0.05 -0.46 -0.39 -0.36 -0.32 -0.25     4146     3334    1 #> d[ARB]           -0.45 0.06 -0.58 -0.49 -0.45 -0.41 -0.33     3287     2453    1 #> d[CCB]           -0.25 0.05 -0.36 -0.29 -0.25 -0.22 -0.14     2806     2982    1 #> d[Placebo]       -0.24 0.06 -0.36 -0.28 -0.24 -0.21 -0.13     3927     3162    1 plot(db_releff_FE, ref_line = 0) (db_releff_RE <- relative_effects(db_fit_RE, trt_ref = \"Diuretic\")) #>                   mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[Beta Blocker]  -0.07 0.09 -0.25 -0.13 -0.07 -0.01  0.10     1870     2459    1 #> d[ACE Inhibitor] -0.40 0.09 -0.58 -0.46 -0.40 -0.35 -0.24     3961     2677    1 #> d[ARB]           -0.47 0.11 -0.70 -0.55 -0.47 -0.40 -0.25     4107     2768    1 #> d[CCB]           -0.24 0.08 -0.41 -0.29 -0.24 -0.19 -0.07     4264     2862    1 #> d[Placebo]       -0.29 0.09 -0.47 -0.35 -0.29 -0.23 -0.12     3636     3188    1 plot(db_releff_RE, ref_line = 0) db_pred_FE <- predict(db_fit_FE,                        newdata = data.frame(time = 3),                       baseline = distr(qnorm, mean = -4.2, sd = 1.11^-0.5),                        trt_ref = \"Diuretic\",                       type = \"response\") db_pred_FE #> ------------------------------------------------------------------ Study: New 1 ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[New 1: Beta Blocker]  0.06 0.06 0.01 0.02 0.04 0.08  0.22     4075     3917    1 #> pred[New 1: ACE Inhibitor] 0.05 0.05 0.00 0.02 0.03 0.06  0.17     4107     3932    1 #> pred[New 1: ARB]           0.04 0.04 0.00 0.02 0.03 0.05  0.16     4100     3932    1 #> pred[New 1: CCB]           0.05 0.05 0.01 0.02 0.04 0.06  0.19     4095     3957    1 #> pred[New 1: Diuretic]      0.06 0.06 0.01 0.02 0.05 0.08  0.24     4113     3877    1 #> pred[New 1: Placebo]       0.05 0.05 0.01 0.02 0.04 0.07  0.19     4107     3958    1 plot(db_pred_FE) db_pred_RE <- predict(db_fit_RE,                        newdata = data.frame(time = 3),                       baseline = distr(qnorm, mean = -4.2, sd = 1.11^-0.5),                        trt_ref = \"Diuretic\",                       type = \"response\") db_pred_RE #> ------------------------------------------------------------------ Study: New 1 ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[New 1: Beta Blocker]  0.06 0.07 0.01 0.02 0.04 0.07  0.24     3693     3839    1 #> pred[New 1: ACE Inhibitor] 0.04 0.05 0.00 0.02 0.03 0.05  0.18     3810     3837    1 #> pred[New 1: ARB]           0.04 0.05 0.00 0.01 0.03 0.05  0.17     3829     3819    1 #> pred[New 1: CCB]           0.05 0.06 0.01 0.02 0.03 0.06  0.21     3804     3878    1 #> pred[New 1: Diuretic]      0.07 0.07 0.01 0.02 0.04 0.08  0.26     3746     3799    1 #> pred[New 1: Placebo]       0.05 0.05 0.01 0.02 0.03 0.06  0.20     3896     3977    1 plot(db_pred_RE) db_pred_RE_studies <- predict(db_fit_RE, type = \"response\") db_pred_RE_studies #> ------------------------------------------------------------------- Study: AASK ----  #>  #>                           mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[AASK: Beta Blocker]  0.17 0.02 0.14 0.16 0.17 0.18  0.20     5713     3434    1 #> pred[AASK: ACE Inhibitor] 0.12 0.01 0.10 0.12 0.12 0.13  0.15     4190     2966    1 #> pred[AASK: ARB]           0.12 0.01 0.09 0.11 0.12 0.13  0.15     4156     2861    1 #> pred[AASK: CCB]           0.14 0.01 0.12 0.13 0.14 0.15  0.17     4217     2808    1 #> pred[AASK: Diuretic]      0.18 0.02 0.14 0.17 0.18 0.19  0.22     4126     2921    1 #> pred[AASK: Placebo]       0.14 0.02 0.11 0.13 0.14 0.15  0.17     3807     2819    1 #>  #> ----------------------------------------------------------------- Study: ALLHAT ----  #>  #>                             mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[ALLHAT: Beta Blocker]  0.04 0.01 0.03 0.04 0.04 0.05  0.06     2081     2066    1 #> pred[ALLHAT: ACE Inhibitor] 0.03 0.00 0.02 0.03 0.03 0.03  0.04     3676     2687    1 #> pred[ALLHAT: ARB]           0.03 0.00 0.02 0.03 0.03 0.03  0.04     3795     3032    1 #> pred[ALLHAT: CCB]           0.04 0.00 0.03 0.03 0.04 0.04  0.05     3575     2289    1 #> pred[ALLHAT: Diuretic]      0.05 0.01 0.04 0.04 0.05 0.05  0.06     3649     2343    1 #> pred[ALLHAT: Placebo]       0.03 0.00 0.03 0.03 0.03 0.04  0.04     4014     3138    1 #>  #> ----------------------------------------------------------------- Study: ALPINE ----  #>  #>                             mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[ALPINE: Beta Blocker]  0.03 0.01 0.01 0.02 0.03 0.03  0.05     5808     3098    1 #> pred[ALPINE: ACE Inhibitor] 0.02 0.01 0.01 0.01 0.02 0.02  0.04     6335     3089    1 #> pred[ALPINE: ARB]           0.02 0.01 0.01 0.01 0.02 0.02  0.03     6388     3232    1 #> pred[ALPINE: CCB]           0.02 0.01 0.01 0.02 0.02 0.03  0.04     6048     3230    1 #> pred[ALPINE: Diuretic]      0.03 0.01 0.01 0.02 0.03 0.03  0.05     6377     3193    1 #> pred[ALPINE: Placebo]       0.02 0.01 0.01 0.02 0.02 0.03  0.04     6155     3182    1 #>  #> ----------------------------------------------------------------- Study: ANBP-2 ----  #>  #>                             mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[ANBP-2: Beta Blocker]  0.07 0.01 0.05 0.06 0.07 0.07  0.09     2676     2363    1 #> pred[ANBP-2: ACE Inhibitor] 0.05 0.01 0.04 0.04 0.05 0.05  0.06     4399     2707    1 #> pred[ANBP-2: ARB]           0.05 0.01 0.03 0.04 0.05 0.05  0.06     4152     3043    1 #> pred[ANBP-2: CCB]           0.06 0.01 0.04 0.05 0.06 0.06  0.08     3486     2591    1 #> pred[ANBP-2: Diuretic]      0.07 0.01 0.06 0.07 0.07 0.08  0.09     4638     3069    1 #> pred[ANBP-2: Placebo]       0.05 0.01 0.04 0.05 0.05 0.06  0.07     4215     2851    1 #>  #> ------------------------------------------------------------------ Study: ASCOT ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[ASCOT: Beta Blocker]  0.11 0.00 0.10 0.11 0.11 0.11  0.12     4921     3002    1 #> pred[ASCOT: ACE Inhibitor] 0.08 0.01 0.07 0.08 0.08 0.09  0.10     2314     2300    1 #> pred[ASCOT: ARB]           0.08 0.01 0.06 0.07 0.08 0.08  0.09     2777     2552    1 #> pred[ASCOT: CCB]           0.10 0.01 0.08 0.09 0.10 0.10  0.11     2108     2410    1 #> pred[ASCOT: Diuretic]      0.12 0.01 0.10 0.11 0.12 0.13  0.14     2283     2791    1 #> pred[ASCOT: Placebo]       0.09 0.01 0.08 0.09 0.09 0.10  0.11     2149     2242    1 #>  #> ------------------------------------------------------------------ Study: CAPPP ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[CAPPP: Beta Blocker]  0.07 0.00 0.07 0.07 0.07 0.08  0.08     5958     3331    1 #> pred[CAPPP: ACE Inhibitor] 0.05 0.00 0.05 0.05 0.05 0.06  0.06     2103     2143    1 #> pred[CAPPP: ARB]           0.05 0.01 0.04 0.05 0.05 0.05  0.06     2912     2835    1 #> pred[CAPPP: CCB]           0.06 0.00 0.05 0.06 0.06 0.07  0.07     2483     2517    1 #> pred[CAPPP: Diuretic]      0.08 0.01 0.07 0.08 0.08 0.09  0.10     2515     2742    1 #> pred[CAPPP: Placebo]       0.06 0.01 0.05 0.06 0.06 0.06  0.07     2103     2378    1 #>  #> ------------------------------------------------------------------ Study: CHARM ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[CHARM: Beta Blocker]  0.09 0.01 0.07 0.08 0.09 0.10  0.12     3013     2703    1 #> pred[CHARM: ACE Inhibitor] 0.07 0.01 0.05 0.06 0.07 0.07  0.09     3855     2378    1 #> pred[CHARM: ARB]           0.06 0.01 0.05 0.06 0.06 0.07  0.08     4552     2674    1 #> pred[CHARM: CCB]           0.08 0.01 0.06 0.07 0.08 0.08  0.10     3827     2567    1 #> pred[CHARM: Diuretic]      0.10 0.01 0.07 0.09 0.10 0.11  0.13     3953     2684    1 #> pred[CHARM: Placebo]       0.07 0.01 0.06 0.07 0.07 0.08  0.09     4198     2586    1 #>  #> ------------------------------------------------------------------ Study: DREAM ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[DREAM: Beta Blocker]  0.23 0.03 0.18 0.21 0.23 0.24  0.29     2824     2705    1 #> pred[DREAM: ACE Inhibitor] 0.17 0.02 0.13 0.16 0.17 0.18  0.21     3615     2610    1 #> pred[DREAM: ARB]           0.16 0.02 0.12 0.14 0.16 0.17  0.21     4079     2770    1 #> pred[DREAM: CCB]           0.20 0.03 0.15 0.18 0.20 0.21  0.25     3847     2609    1 #> pred[DREAM: Diuretic]      0.24 0.03 0.19 0.22 0.24 0.26  0.31     3535     2340    1 #> pred[DREAM: Placebo]       0.19 0.02 0.15 0.17 0.19 0.20  0.23     4091     2746    1 #>  #> ------------------------------------------------------------------- Study: EWPH ----  #>  #>                           mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[EWPH: Beta Blocker]  0.06 0.01 0.04 0.05 0.06 0.07  0.09     3784     2531    1 #> pred[EWPH: ACE Inhibitor] 0.05 0.01 0.03 0.04 0.04 0.05  0.06     4779     3164    1 #> pred[EWPH: ARB]           0.04 0.01 0.03 0.04 0.04 0.05  0.06     4893     2894    1 #> pred[EWPH: CCB]           0.05 0.01 0.04 0.05 0.05 0.06  0.07     4791     3067    1 #> pred[EWPH: Diuretic]      0.07 0.01 0.05 0.06 0.07 0.07  0.09     5454     3370    1 #> pred[EWPH: Placebo]       0.05 0.01 0.03 0.04 0.05 0.06  0.07     4797     3357    1 #>  #> ------------------------------------------------------------------ Study: FEVER ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[FEVER: Beta Blocker]  0.04 0.01 0.03 0.04 0.04 0.04  0.05     2697     2472    1 #> pred[FEVER: ACE Inhibitor] 0.03 0.00 0.02 0.03 0.03 0.03  0.04     3814     2636    1 #> pred[FEVER: ARB]           0.03 0.00 0.02 0.03 0.03 0.03  0.04     3845     2834    1 #> pred[FEVER: CCB]           0.04 0.00 0.03 0.03 0.03 0.04  0.05     3724     2564    1 #> pred[FEVER: Diuretic]      0.04 0.01 0.03 0.04 0.04 0.05  0.06     4049     2964    1 #> pred[FEVER: Placebo]       0.03 0.00 0.03 0.03 0.03 0.04  0.04     4330     2969    1 #>  #> ----------------------------------------------------------------- Study: HAPPHY ----  #>  #>                             mean sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[HAPPHY: Beta Blocker]  0.02  0 0.02 0.02 0.02 0.03  0.03     4981     3088    1 #> pred[HAPPHY: ACE Inhibitor] 0.02  0 0.01 0.02 0.02 0.02  0.02     3924     3076    1 #> pred[HAPPHY: ARB]           0.02  0 0.01 0.02 0.02 0.02  0.02     4067     2977    1 #> pred[HAPPHY: CCB]           0.02  0 0.02 0.02 0.02 0.02  0.03     4016     2959    1 #> pred[HAPPHY: Diuretic]      0.03  0 0.02 0.02 0.03 0.03  0.03     3029     2885    1 #> pred[HAPPHY: Placebo]       0.02  0 0.02 0.02 0.02 0.02  0.02     3412     3025    1 #>  #> ------------------------------------------------------------------- Study: HOPE ----  #>  #>                           mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[HOPE: Beta Blocker]  0.06 0.01 0.04 0.05 0.06 0.06  0.08     3203     2507    1 #> pred[HOPE: ACE Inhibitor] 0.04 0.01 0.03 0.04 0.04 0.05  0.06     4678     2767    1 #> pred[HOPE: ARB]           0.04 0.01 0.03 0.04 0.04 0.04  0.05     4532     2783    1 #> pred[HOPE: CCB]           0.05 0.01 0.04 0.04 0.05 0.05  0.07     4167     2793    1 #> pred[HOPE: Diuretic]      0.06 0.01 0.05 0.06 0.06 0.07  0.09     4306     2820    1 #> pred[HOPE: Placebo]       0.05 0.01 0.04 0.04 0.05 0.05  0.06     4923     3074    1 #>  #> ---------------------------------------------------------------- Study: INSIGHT ----  #>  #>                              mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[INSIGHT: Beta Blocker]  0.06 0.01 0.05 0.06 0.06 0.07  0.09     2997     2689    1 #> pred[INSIGHT: ACE Inhibitor] 0.05 0.01 0.03 0.04 0.05 0.05  0.06     4112     2791    1 #> pred[INSIGHT: ARB]           0.04 0.01 0.03 0.04 0.04 0.05  0.06     4052     2749    1 #> pred[INSIGHT: CCB]           0.06 0.01 0.04 0.05 0.05 0.06  0.07     4357     2928    1 #> pred[INSIGHT: Diuretic]      0.07 0.01 0.05 0.06 0.07 0.08  0.09     4662     2824    1 #> pred[INSIGHT: Placebo]       0.05 0.01 0.04 0.05 0.05 0.06  0.07     4176     2792    1 #>  #> ----------------------------------------------------------------- Study: INVEST ----  #>  #>                             mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[INVEST: Beta Blocker]  0.08 0.00 0.08 0.08 0.08 0.08  0.09     7375     3305    1 #> pred[INVEST: ACE Inhibitor] 0.06 0.00 0.05 0.06 0.06 0.06  0.07     2165     2589    1 #> pred[INVEST: ARB]           0.06 0.01 0.05 0.05 0.06 0.06  0.07     2646     2307    1 #> pred[INVEST: CCB]           0.07 0.00 0.06 0.07 0.07 0.07  0.08     2046     2743    1 #> pred[INVEST: Diuretic]      0.09 0.01 0.07 0.08 0.09 0.09  0.11     2392     2684    1 #> pred[INVEST: Placebo]       0.07 0.01 0.06 0.06 0.07 0.07  0.08     1983     2311    1 #>  #> ------------------------------------------------------------------- Study: LIFE ----  #>  #>                           mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[LIFE: Beta Blocker]  0.08 0.00 0.07 0.08 0.08 0.08  0.09     6477     2937    1 #> pred[LIFE: ACE Inhibitor] 0.06 0.01 0.05 0.06 0.06 0.06  0.07     2355     2419    1 #> pred[LIFE: ARB]           0.06 0.01 0.05 0.05 0.06 0.06  0.07     2651     2593    1 #> pred[LIFE: CCB]           0.07 0.01 0.06 0.07 0.07 0.07  0.08     2792     2567    1 #> pred[LIFE: Diuretic]      0.09 0.01 0.07 0.08 0.09 0.09  0.10     2591     2922    1 #> pred[LIFE: Placebo]       0.07 0.01 0.05 0.06 0.07 0.07  0.08     2133     2140    1 #>  #> ------------------------------------------------------------------ Study: MRC-E ----  #>  #>                            mean sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[MRC-E: Beta Blocker]  0.03  0 0.02 0.03 0.03 0.03  0.04     3812     2693    1 #> pred[MRC-E: ACE Inhibitor] 0.02  0 0.02 0.02 0.02 0.02  0.03     5487     2952    1 #> pred[MRC-E: ARB]           0.02  0 0.01 0.02 0.02 0.02  0.03     5053     2568    1 #> pred[MRC-E: CCB]           0.03  0 0.02 0.02 0.02 0.03  0.03     4819     3384    1 #> pred[MRC-E: Diuretic]      0.03  0 0.02 0.03 0.03 0.03  0.04     4285     2260    1 #> pred[MRC-E: Placebo]       0.02  0 0.02 0.02 0.02 0.03  0.03     5246     2705    1 #>  #> ----------------------------------------------------------------- Study: NORDIL ----  #>  #>                             mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[NORDIL: Beta Blocker]  0.05 0.00 0.04 0.05 0.05 0.05  0.06     6460     3213    1 #> pred[NORDIL: ACE Inhibitor] 0.04 0.00 0.03 0.03 0.04 0.04  0.04     2592     2611    1 #> pred[NORDIL: ARB]           0.03 0.00 0.03 0.03 0.03 0.04  0.04     3136     2742    1 #> pred[NORDIL: CCB]           0.04 0.00 0.04 0.04 0.04 0.04  0.05     2660     2550    1 #> pred[NORDIL: Diuretic]      0.05 0.01 0.04 0.05 0.05 0.06  0.06     2670     2811    1 #> pred[NORDIL: Placebo]       0.04 0.00 0.03 0.04 0.04 0.04  0.05     2479     2403    1 #>  #> ------------------------------------------------------------------ Study: PEACE ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[PEACE: Beta Blocker]  0.14 0.02 0.11 0.13 0.14 0.15  0.18     2461     1777    1 #> pred[PEACE: ACE Inhibitor] 0.10 0.01 0.08 0.09 0.10 0.11  0.13     4338     2317    1 #> pred[PEACE: ARB]           0.10 0.01 0.07 0.09 0.09 0.10  0.13     4321     2203    1 #> pred[PEACE: CCB]           0.12 0.02 0.09 0.11 0.12 0.13  0.16     3871     2159    1 #> pred[PEACE: Diuretic]      0.15 0.02 0.11 0.13 0.15 0.16  0.20     4343     2269    1 #> pred[PEACE: Placebo]       0.11 0.01 0.09 0.10 0.11 0.12  0.14     4697     2791    1 #>  #> ------------------------------------------------------------------ Study: SCOPE ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[SCOPE: Beta Blocker]  0.06 0.01 0.05 0.06 0.06 0.07  0.09     3249     2273    1 #> pred[SCOPE: ACE Inhibitor] 0.05 0.01 0.03 0.04 0.05 0.05  0.06     4896     2999    1 #> pred[SCOPE: ARB]           0.04 0.01 0.03 0.04 0.04 0.05  0.06     5038     3188    1 #> pred[SCOPE: CCB]           0.06 0.01 0.04 0.05 0.05 0.06  0.08     4191     2730    1 #> pred[SCOPE: Diuretic]      0.07 0.01 0.05 0.06 0.07 0.08  0.10     4396     2764    1 #> pred[SCOPE: Placebo]       0.05 0.01 0.04 0.05 0.05 0.06  0.07     5421     2895    1 #>  #> ------------------------------------------------------------------- Study: SHEP ----  #>  #>                           mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[SHEP: Beta Blocker]  0.09 0.01 0.06 0.08 0.08 0.09  0.11     3051     2605    1 #> pred[SHEP: ACE Inhibitor] 0.06 0.01 0.05 0.06 0.06 0.07  0.08     3961     2601    1 #> pred[SHEP: ARB]           0.06 0.01 0.04 0.05 0.06 0.06  0.08     4388     2772    1 #> pred[SHEP: CCB]           0.07 0.01 0.05 0.07 0.07 0.08  0.10     3955     2857    1 #> pred[SHEP: Diuretic]      0.09 0.01 0.07 0.08 0.09 0.10  0.12     4359     2909    1 #> pred[SHEP: Placebo]       0.07 0.01 0.05 0.06 0.07 0.08  0.09     4709     2708    1 #>  #> ----------------------------------------------------------------- Study: STOP-2 ----  #>  #>                             mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[STOP-2: Beta Blocker]  0.05 0.00 0.04 0.05 0.05 0.06  0.06     4502     2908    1 #> pred[STOP-2: ACE Inhibitor] 0.04 0.00 0.03 0.04 0.04 0.04  0.05     2917     2438    1 #> pred[STOP-2: ARB]           0.04 0.00 0.03 0.03 0.04 0.04  0.05     3059     2688    1 #> pred[STOP-2: CCB]           0.05 0.00 0.04 0.04 0.05 0.05  0.05     3381     2357    1 #> pred[STOP-2: Diuretic]      0.06 0.01 0.05 0.05 0.06 0.06  0.07     3259     2934    1 #> pred[STOP-2: Placebo]       0.04 0.00 0.03 0.04 0.04 0.05  0.05     2689     2466    1 #>  #> ------------------------------------------------------------------ Study: VALUE ----  #>  #>                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[VALUE: Beta Blocker]  0.20 0.02 0.15 0.18 0.19 0.21  0.25     2908     2455    1 #> pred[VALUE: ACE Inhibitor] 0.15 0.02 0.11 0.13 0.14 0.16  0.19     3418     2399    1 #> pred[VALUE: ARB]           0.14 0.02 0.10 0.13 0.14 0.14  0.17     3794     2568    1 #> pred[VALUE: CCB]           0.17 0.02 0.13 0.16 0.17 0.18  0.21     3644     2365    1 #> pred[VALUE: Diuretic]      0.21 0.03 0.16 0.19 0.21 0.23  0.27     3816     2694    1 #> pred[VALUE: Placebo]       0.16 0.02 0.12 0.15 0.16 0.17  0.21     3530     2239    1 plot(db_pred_RE_studies) (db_ranks <- posterior_ranks(db_fit_RE)) #>                     mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[Beta Blocker]  5.18 0.42    5   5   5   5     6     2491       NA    1 #> rank[ACE Inhibitor] 1.83 0.53    1   2   2   2     3     3536     3448    1 #> rank[ARB]           1.27 0.51    1   1   1   1     3     3121     2815    1 #> rank[CCB]           3.70 0.51    3   3   4   4     4     3533     3760    1 #> rank[Diuretic]      5.80 0.41    5   6   6   6     6     2431       NA    1 #> rank[Placebo]       3.21 0.58    2   3   3   4     4     3315     2987    1 plot(db_ranks) (db_rankprobs <- posterior_rank_probs(db_fit_RE)) #>                  p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[Beta Blocker]       0.00      0.00      0.00      0.01      0.79       0.2 #> d[ACE Inhibitor]      0.24      0.70      0.06      0.00      0.00       0.0 #> d[ARB]                0.76      0.22      0.02      0.00      0.00       0.0 #> d[CCB]                0.00      0.02      0.27      0.71      0.01       0.0 #> d[Diuretic]           0.00      0.00      0.00      0.00      0.19       0.8 #> d[Placebo]            0.00      0.07      0.65      0.27      0.00       0.0 plot(db_rankprobs) (db_cumrankprobs <- posterior_rank_probs(db_fit_RE, cumulative = TRUE)) #>                  p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[Beta Blocker]       0.00      0.00      0.00      0.01       0.8         1 #> d[ACE Inhibitor]      0.24      0.94      1.00      1.00       1.0         1 #> d[ARB]                0.76      0.97      1.00      1.00       1.0         1 #> d[CCB]                0.00      0.02      0.28      0.99       1.0         1 #> d[Diuretic]           0.00      0.00      0.00      0.00       0.2         1 #> d[Placebo]            0.00      0.07      0.72      1.00       1.0         1 plot(db_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_diabetes.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Diabetes","text":"Dias, S., N. J. Welton, . J. Sutton, . E. Ades. 2011. “NICE DSU Technical Support Document 2: Generalised Linear Modelling Framework Pair-Wise Network Meta-Analysis Randomised Controlled Trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Elliott, W. J., P. M. Meyer. 2007. “Incident Diabetes Clinical Trials Antihypertensive Drugs: Network Meta-Analysis.” Lancet 369 (9557): 201–7. https://doi.org/10.1016/s0140-6736(07)60108-1.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_dietary_fat.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Dietary fat","text":"begin setting network - just pairwise meta-analysis. arm-level rate data giving number deaths (r) person-years risk (E) arm, use function set_agd_arm(). set “Control” reference treatment. also specify optional sample_size argument, although strictly necessary . case sample_size required produce network plot nodes weighted sample size, network plot particularly informative meta-analysis two treatments. (sample_size argument important regression model specified, since also enables automatic centering predictors production predictions studies network, see ?set_agd_arm.)","code":"diet_net <- set_agd_arm(dietary_fat,                          study = studyc,                         trt = trtc,                         r = r,                          E = E,                         trt_ref = \"Control\",                         sample_size = n) diet_net #> A network with 10 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study                   Treatments               #>  DART                    2: Control | Reduced Fat #>  London Corn/Olive       2: Control | Reduced Fat #>  London Low Fat          2: Control | Reduced Fat #>  Minnesota Coronary      2: Control | Reduced Fat #>  MRC Soya                2: Control | Reduced Fat #>  Oslo Diet-Heart         2: Control | Reduced Fat #>  STARS                   2: Control | Reduced Fat #>  Sydney Diet-Heart       2: Control | Reduced Fat #>  Veterans Administration 2: Control | Reduced Fat #>  Veterans Diet & Skin CA 2: Control | Reduced Fat #>  #>  Outcome type: rate #> ------------------------------------------------------------------------------------ #> Total number of treatments: 2 #> Total number of studies: 10 #> Reference treatment is: Control #> Network is connected"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_dietary_fat.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: Dietary fat","text":"fit fixed effect (FE) random effects (RE) models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_dietary_fat.html","id":"fixed-effect-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Fixed effect meta-analysis","title":"Example: Dietary fat","text":"First, fit fixed effect model using nma() function trt_effects = \"fixed\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. default, use Poisson likelihood log link function, auto-detected data. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. diet_fit_FE <- nma(diet_net,                     trt_effects = \"fixed\",                    prior_intercept = normal(scale = 100),                    prior_trt = normal(scale = 100)) diet_fit_FE #> A fixed effects NMA with a poisson likelihood (log link). #> Inference for Stan model: poisson. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                   mean se_mean   sd    2.5%     25%     50%     75%   97.5% n_eff Rhat #> d[Reduced Fat]   -0.01    0.00 0.05   -0.11   -0.04   -0.01    0.03    0.10  3054    1 #> lp__           5386.18    0.05 2.37 5380.90 5384.76 5386.51 5387.90 5389.84  1866    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:57:17 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(diet_fit_FE, pars = c(\"d\", \"mu\")) plot_prior_posterior(diet_fit_FE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_dietary_fat.html","id":"random-effects-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Random effects meta-analysis","title":"Example: Dietary fat","text":"now fit random effects model using nma() function trt_effects = \"random\". , use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), additionally use \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. diet_fit_RE <- nma(diet_net,                     trt_effects = \"random\",                    prior_intercept = normal(scale = 10),                    prior_trt = normal(scale = 10),                    prior_het = half_normal(scale = 5)) diet_fit_RE #> A random effects NMA with a poisson likelihood (log link). #> Inference for Stan model: poisson. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                   mean se_mean   sd    2.5%     25%     50%     75%   97.5% n_eff Rhat #> d[Reduced Fat]   -0.01    0.00 0.09   -0.19   -0.06   -0.01    0.04    0.16  1532    1 #> lp__           5378.50    0.12 4.04 5369.99 5376.06 5378.69 5381.28 5385.77  1123    1 #> tau               0.13    0.00 0.12    0.00    0.04    0.10    0.18    0.44   855    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:57:25 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(diet_fit_RE, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(diet_fit_RE, prior = c(\"trt\", \"het\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_dietary_fat.html","id":"model-comparison","dir":"Articles","previous_headings":"Meta-analysis models","what":"Model comparison","title":"Example: Dietary fat","text":"Model fit can checked using dic() function: models appear fit data well, residual deviance close number data points. DIC similar models, FE model may preferred parsimony. can also examine residual deviance contributions corresponding plot() method.","code":"(dic_FE <- dic(diet_fit_FE)) #> Residual deviance: 22.5 (on 21 data points) #>                pD: 11.2 #>               DIC: 33.7 (dic_RE <- dic(diet_fit_RE)) #> Residual deviance: 21.5 (on 21 data points) #>                pD: 13.6 #>               DIC: 35.1 plot(dic_FE) plot(dic_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_dietary_fat.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: Dietary fat","text":"Dias et al. (2011) produce absolute predictions mortality rates reduced fat control diets, assuming Normal distribution baseline log rate mortality mean \\(-3\\) precision \\(1.77\\). can replicate results using predict() method. baseline argument takes distr() distribution object, specify corresponding Normal distribution. set type = \"response\" produce predicted rates (type = \"link\" produce predicted log rates).   baseline argument omitted, predicted rates produced every study network based estimated baseline log rate \\(\\mu_j\\):","code":"pred_FE <- predict(diet_fit_FE,                     baseline = distr(qnorm, mean = -3, sd = 1.77^-0.5),                     type = \"response\") pred_FE #>                   mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Control]     0.07 0.06 0.01 0.03 0.05 0.08  0.21     4133     3929    1 #> pred[Reduced Fat] 0.06 0.06 0.01 0.03 0.05 0.08  0.21     4113     4014    1 plot(pred_FE) pred_RE <- predict(diet_fit_RE,                     baseline = distr(qnorm, mean = -3, sd = 1.77^-0.5),                     type = \"response\") pred_RE #>                   mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Control]     0.07 0.06 0.01 0.03 0.05 0.08  0.21     3957     3762    1 #> pred[Reduced Fat] 0.07 0.06 0.01 0.03 0.05 0.08  0.21     3917     3883    1 plot(pred_RE) pred_FE_studies <- predict(diet_fit_FE, type = \"response\") pred_FE_studies #> ------------------------------------------------------------------- Study: DART ----  #>  #>                         mean sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[DART: Control]     0.06  0 0.05 0.06 0.06 0.06  0.07     5731     3080    1 #> pred[DART: Reduced Fat] 0.06  0 0.05 0.06 0.06 0.06  0.07     7191     3542    1 #>  #> ------------------------------------------------------ Study: London Corn/Olive ----  #>  #>                                      mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> pred[London Corn/Olive: Control]     0.07 0.03 0.03 0.06 0.07 0.09  0.13     6259     2830 #> pred[London Corn/Olive: Reduced Fat] 0.07 0.02 0.03 0.06 0.07 0.09  0.13     6586     2649 #>                                      Rhat #> pred[London Corn/Olive: Control]        1 #> pred[London Corn/Olive: Reduced Fat]    1 #>  #> --------------------------------------------------------- Study: London Low Fat ----  #>  #>                                   mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[London Low Fat: Control]     0.06 0.01 0.04 0.05 0.06 0.06  0.08     6854     2877    1 #> pred[London Low Fat: Reduced Fat] 0.06 0.01 0.04 0.05 0.06 0.06  0.08     7339     2948    1 #>  #> ----------------------------------------------------- Study: Minnesota Coronary ----  #>  #>                                       mean sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Minnesota Coronary: Control]     0.05  0 0.05 0.05 0.05 0.06  0.06     4443     3392    1 #> pred[Minnesota Coronary: Reduced Fat] 0.05  0 0.05 0.05 0.05 0.06  0.06     6172     3725    1 #>  #> --------------------------------------------------------------- Study: MRC Soya ----  #>  #>                             mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[MRC Soya: Control]     0.04 0.01 0.03 0.04 0.04 0.04  0.05     6121     2996    1 #> pred[MRC Soya: Reduced Fat] 0.04 0.01 0.03 0.04 0.04 0.04  0.05     6769     2991    1 #>  #> -------------------------------------------------------- Study: Oslo Diet-Heart ----  #>  #>                                    mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Oslo Diet-Heart: Control]     0.06 0.01 0.05 0.06 0.06 0.07  0.08     6045     3066    1 #> pred[Oslo Diet-Heart: Reduced Fat] 0.06 0.01 0.05 0.06 0.06 0.07  0.08     6884     3522    1 #>  #> ------------------------------------------------------------------ Study: STARS ----  #>  #>                          mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[STARS: Control]     0.02 0.01 0.01 0.01 0.02 0.03  0.05     6009     2606    1 #> pred[STARS: Reduced Fat] 0.02 0.01 0.01 0.01 0.02 0.03  0.05     6421     2549    1 #>  #> ------------------------------------------------------ Study: Sydney Diet-Heart ----  #>  #>                                      mean sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Sydney Diet-Heart: Control]     0.03  0 0.03 0.03 0.03 0.04  0.04     7909     3391    1 #> pred[Sydney Diet-Heart: Reduced Fat] 0.03  0 0.03 0.03 0.03 0.04  0.04     7722     3485    1 #>  #> ------------------------------------------------ Study: Veterans Administration ----  #>  #>                                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[Veterans Administration: Control]     0.11 0.01  0.1 0.11 0.11 0.12  0.13     4335 #> pred[Veterans Administration: Reduced Fat] 0.11 0.01  0.1 0.11 0.11 0.12  0.12     7029 #>                                            Tail_ESS Rhat #> pred[Veterans Administration: Control]         3113    1 #> pred[Veterans Administration: Reduced Fat]     3487    1 #>  #> ------------------------------------------------ Study: Veterans Diet & Skin CA ----  #>  #>                                            mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[Veterans Diet & Skin CA: Control]     0.01 0.01    0 0.01 0.01 0.02  0.03     6707 #> pred[Veterans Diet & Skin CA: Reduced Fat] 0.01 0.01    0 0.01 0.01 0.02  0.03     6711 #>                                            Tail_ESS Rhat #> pred[Veterans Diet & Skin CA: Control]         2751    1 #> pred[Veterans Diet & Skin CA: Reduced Fat]     2783    1 plot(pred_FE_studies) + ggplot2::facet_grid(Study~., labeller = ggplot2::label_wrap_gen(width = 10))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_dietary_fat.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Dietary fat","text":"Dias, S., N. J. Welton, . J. Sutton, . E. Ades. 2011. “NICE DSU Technical Support Document 2: Generalised Linear Modelling Framework Pair-Wise Network Meta-Analysis Randomised Controlled Trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Hooper, L., C. D. Summerbell, J. P. T. Higgins, R. L. Thompson, G. Clements, N. Capps, G. Davey Smith, R. Riemersma, S. Ebrahim. 2000. “Reduced Modified Dietary Fat Preventing Cardiovascular Disease.” Cochrane Database Systematic Reviews, . 2. https://doi.org/10.1002/14651858.CD002137.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Plaque psoriasis HTA report","text":"begin setting network. arm-level ordered multinomial count data, use function set_agd_arm(). function multi() helps us specify ordered outcomes correctly. Plot network structure.","code":"pso_net <- set_agd_arm(hta_psoriasis,                         study = paste(studyc, year),                         trt = trtc,                         r = multi(r0 = sample_size - rowSums(cbind(PASI50, PASI75, PASI90), na.rm = TRUE),                                   PASI50, PASI75, PASI90,                                  inclusive = FALSE,                                   type = \"ordered\")) pso_net #> A network with 16 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study         Treatments                                               #>  ACD2058g 2004 2: Supportive care | Efalizumab                          #>  ACD2600g 2004 2: Supportive care | Efalizumab                          #>  Altmeyer 1994 2: Supportive care | Fumaderm                            #>  Chaudari 2001 2: Supportive care | Infliximab                          #>  Elewski 2004  3: Supportive care | Etanercept 25 mg | Etanercept 50 mg #>  Ellis 1991    2: Supportive care | Ciclosporin                         #>  Gordon 2003   2: Supportive care | Efalizumab                          #>  Gottlieb 2003 2: Supportive care | Etanercept 25 mg                    #>  Gottlieb 2004 2: Supportive care | Infliximab                          #>  Guenther 1991 2: Supportive care | Ciclosporin                         #>  ... plus 6 more studies #>  #>  Outcome type: ordered (4 categories) #> ------------------------------------------------------------------------------------ #> Total number of treatments: 8 #> Total number of studies: 16 #> Reference treatment is: Supportive care #> Network is connected plot(pso_net, weight_edges = TRUE, weight_nodes = TRUE) +    # Nudge the legend over   ggplot2::theme(legend.box.spacing = ggplot2::unit(0.75, \"in\"),                  plot.margin = ggplot2::margin(0.1, 0, 0.1, 0.75, \"in\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: Plaque psoriasis HTA report","text":"fit fixed effect (FE) random effects (RE) models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"fixed-effect-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Fixed effect meta-analysis","title":"Example: Plaque psoriasis HTA report","text":"First, fit fixed effect model using nma() function trt_effects = \"fixed\", using probit link function link = \"probit\". use \\(\\mathrm{N}(0, 10^2)\\) prior distributions treatment effects \\(d_k\\), \\(\\mathrm{N}(0, 100^2)\\) prior distributions study-specific intercepts \\(\\mu_j\\). can examine range parameter values implied prior distributions summary() method: also need specify prior distributions latent cutpoints \\(c_\\textrm{PASI75}\\) \\(c_\\textrm{PASI90}\\) underlying scale - PASI standardised mean difference due probit link (cutpoint \\(c_\\textrm{PASI50}=0\\)). make easier reason , actually specify priors differences adjacent cutpoints, e.g. \\(c_\\textrm{PASI90} - c_\\textrm{PASI75}\\) \\(c_\\textrm{PASI75} - c_\\textrm{PASI50}\\). can given positive-valued prior distribution, Stan automatically impose necessary ordering constraints behind scenes. choose give implicit flat priors flat(). model fitted using nma() function. Basic parameter summaries given print() method: Note: treatment effects opposite sign TSD 2 (Dias et al. 2011). parameterise linear predictor \\(\\mu_j + d_k + c_m\\), rather \\(\\mu_j + d_k - c_m\\). interpretation thus follows standard binomial probit (logit) regression; SMDs (log ORs) greater zero mean treatment increases probability event compared comparator (less zero mean reduction probability). higher outcomes positive, active treatments estimated increase response (.e. greater reduction) PASI scale compared network reference (supportive care). default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  Focusing specifically cutpoints see highly identified data, implicit flat priors work parameters.","code":"summary(normal(scale = 10)) #> A Normal prior distribution: location = 0, scale = 10. #> 50% of the prior density lies between -6.74 and 6.74. #> 95% of the prior density lies between -19.6 and 19.6. summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. pso_fit_FE <- nma(pso_net,                    trt_effects = \"fixed\",                   link = \"probit\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 10),                   prior_aux = flat()) #> Note: Setting \"Supportive care\" as the network reference treatment. pso_fit_FE #> A fixed effects NMA with a ordered likelihood (probit link). #> Inference for Stan model: ordered_multinomial. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                         mean se_mean   sd     2.5%      25%      50%      75%    97.5% n_eff #> d[Ciclosporin]          1.92    0.01 0.34     1.29     1.68     1.90     2.13     2.62  1217 #> d[Efalizumab]           1.19    0.00 0.06     1.08     1.15     1.19     1.23     1.31  2068 #> d[Etanercept 25 mg]     1.51    0.00 0.10     1.32     1.45     1.51     1.58     1.71  2210 #> d[Etanercept 50 mg]     1.92    0.00 0.10     1.73     1.85     1.92     1.99     2.12  2559 #> d[Fumaderm]             1.49    0.01 0.50     0.62     1.14     1.44     1.79     2.58  2311 #> d[Infliximab]           2.34    0.00 0.26     1.84     2.16     2.33     2.51     2.87  3208 #> d[Methotrexate]         1.62    0.01 0.45     0.78     1.31     1.60     1.91     2.52  1398 #> lp__                -3405.17    0.09 3.65 -3413.33 -3407.40 -3404.82 -3402.45 -3399.20  1488 #> cc[PASI50]              0.00     NaN 0.00     0.00     0.00     0.00     0.00     0.00   NaN #> cc[PASI75]              0.76    0.00 0.03     0.70     0.74     0.76     0.78     0.82  5292 #> cc[PASI90]              1.56    0.00 0.05     1.46     1.53     1.56     1.60     1.67  6220 #>                     Rhat #> d[Ciclosporin]         1 #> d[Efalizumab]          1 #> d[Etanercept 25 mg]    1 #> d[Etanercept 50 mg]    1 #> d[Fumaderm]            1 #> d[Infliximab]          1 #> d[Methotrexate]        1 #> lp__                   1 #> cc[PASI50]           NaN #> cc[PASI75]             1 #> cc[PASI90]             1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:57:44 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(pso_fit_FE, pars = c(\"d\", \"mu\", \"cc\")) plot_prior_posterior(pso_fit_FE) plot_prior_posterior(pso_fit_FE, prior = \"aux\")"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"random-effects-meta-analysis","dir":"Articles","previous_headings":"Meta-analysis models","what":"Random effects meta-analysis","title":"Example: Plaque psoriasis HTA report","text":"now fit random effects model using nma() function trt_effects = \"random\". , use \\(\\mathrm{N}(0, 10^2)\\) prior distributions treatment effects \\(d_k\\), \\(\\mathrm{N}(0, 100^2)\\) prior distributions study-specific intercepts \\(\\mu_j\\), implicit flat prior distributions latent cutpoints, additionally use \\(\\textrm{half-N}(2.5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 10)) #> A Normal prior distribution: location = 0, scale = 10. #> 50% of the prior density lies between -6.74 and 6.74. #> 95% of the prior density lies between -19.6 and 19.6. summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 2.5)) #> A half-Normal prior distribution: location = 0, scale = 2.5. #> 50% of the prior density lies between 0 and 1.69. #> 95% of the prior density lies between 0 and 4.9. pso_fit_RE <- nma(pso_net,                    trt_effects = \"random\",                   link = \"probit\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 10),                   prior_aux = flat(),                   prior_het = half_normal(scale = 2.5),                   adapt_delta = 0.99) #> Note: Setting \"Supportive care\" as the network reference treatment. pso_fit_RE #> A random effects NMA with a ordered likelihood (probit link). #> Inference for Stan model: ordered_multinomial. #> 4 chains, each with iter=5000; warmup=2500; thin=1;  #> post-warmup draws per chain=2500, total post-warmup draws=10000. #>  #>                         mean se_mean   sd     2.5%      25%      50%      75%    97.5% n_eff #> d[Ciclosporin]          2.03    0.01 0.43     1.29     1.75     2.00     2.29     2.95  2898 #> d[Efalizumab]           1.19    0.00 0.19     0.81     1.10     1.19     1.28     1.59  4200 #> d[Etanercept 25 mg]     1.53    0.00 0.25     1.04     1.40     1.52     1.65     2.06  4514 #> d[Etanercept 50 mg]     1.93    0.00 0.28     1.35     1.79     1.93     2.07     2.53  5305 #> d[Fumaderm]             1.48    0.01 0.62     0.31     1.08     1.46     1.86     2.79  8839 #> d[Infliximab]           2.31    0.00 0.39     1.53     2.08     2.31     2.55     3.10  7123 #> d[Methotrexate]         1.73    0.01 0.63     0.59     1.32     1.69     2.10     3.08  3474 #> lp__                -3410.41    0.19 6.81 -3424.48 -3414.91 -3410.20 -3405.54 -3398.08  1272 #> tau                     0.32    0.01 0.22     0.02     0.16     0.27     0.44     0.85   936 #> cc[PASI50]              0.00     NaN 0.00     0.00     0.00     0.00     0.00     0.00   NaN #> cc[PASI75]              0.76    0.00 0.03     0.70     0.74     0.76     0.78     0.82 20555 #> cc[PASI90]              1.56    0.00 0.05     1.46     1.53     1.56     1.60     1.67 23977 #>                     Rhat #> d[Ciclosporin]      1.00 #> d[Efalizumab]       1.00 #> d[Etanercept 25 mg] 1.00 #> d[Etanercept 50 mg] 1.00 #> d[Fumaderm]         1.00 #> d[Infliximab]       1.00 #> d[Methotrexate]     1.00 #> lp__                1.01 #> tau                 1.01 #> cc[PASI50]           NaN #> cc[PASI75]          1.00 #> cc[PASI90]          1.00 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:59:16 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(pso_fit_RE, pars = c(\"d\", \"cc\", \"mu\", \"delta\")) plot_prior_posterior(pso_fit_RE, prior = c(\"trt\", \"aux\", \"het\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"model-comparison","dir":"Articles","previous_headings":"Meta-analysis models","what":"Model comparison","title":"Example: Plaque psoriasis HTA report","text":"Model fit can checked using dic() function: random effects model lower DIC residual deviance closer number data points, preferred case. can also examine residual deviance contributions corresponding plot() method.   data points fit well, posterior mean residual deviances close degrees freedom. Meffert 1997 study substantially higher residual deviance contribution, investigated see study appears outlier.","code":"(dic_FE <- dic(pso_fit_FE)) #> Residual deviance: 75 (on 58 data points) #>                pD: 25.6 #>               DIC: 100.5 (dic_RE <- dic(pso_fit_RE)) #> Residual deviance: 62.5 (on 58 data points) #>                pD: 33.5 #>               DIC: 96 plot(dic_FE) plot(dic_RE)"},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"predicted-probabilities-of-response","dir":"Articles","previous_headings":"Further results","what":"Predicted probabilities of response","title":"Example: Plaque psoriasis HTA report","text":"Dias et al. (2011) produce absolute predictions probability achieving responses PASI cutoff, assuming Normal distribution baseline probit probability PASI50 response supportive care mean \\(-1.097\\) precision \\(123\\). can replicate results using predict() method. baseline argument takes distr() distribution object, specify corresponding Normal distribution. set type = \"response\" produce predicted probabilities (type = \"link\" produce predicted probit probabilities).   instead information baseline PASI 50 response probit probability PASI 50 event counts, can use construct Beta distribution baseline probability PASI 50 response. example, 56 408 individuals achieved PASI 50 response supportive care target population interest, appropriate Beta distribution response probability \\(\\textrm{Beta}(56, 408-56)\\). can specify Beta distribution baseline response using baseline_type = \"reponse\" argument (default \"link\", used baseline probit probability).  (Notice results equivalent calculated using Normal distribution baseline probit probability, since event counts correspond probit probability.) can modify plots using standard ggplot2 functions. example, plot cutpoints together colour coding (instead split facets):  baseline argument omitted, predicted probabilities produced every study network based estimated baseline probit probability \\(\\mu_j\\).","code":"pred_FE <- predict(pso_fit_FE,                     baseline = distr(qnorm, mean = -1.097, sd = 123^-0.5),                     type = \"response\") pred_FE #>                                mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Supportive care, PASI50]  0.14 0.02 0.10 0.12 0.14 0.15  0.18     3675     3431    1 #> pred[Supportive care, PASI75]  0.03 0.01 0.02 0.03 0.03 0.04  0.05     3824     3675    1 #> pred[Supportive care, PASI90]  0.00 0.00 0.00 0.00 0.00 0.00  0.01     4182     3645    1 #> pred[Ciclosporin, PASI50]      0.78 0.10 0.57 0.72 0.79 0.85  0.94     1352     2061    1 #> pred[Ciclosporin, PASI75]      0.52 0.13 0.28 0.43 0.52 0.62  0.78     1373     2038    1 #> pred[Ciclosporin, PASI90]      0.24 0.11 0.08 0.16 0.22 0.30  0.49     1387     1974    1 #> pred[Efalizumab, PASI50]       0.54 0.04 0.45 0.51 0.54 0.57  0.62     3010     3464    1 #> pred[Efalizumab, PASI75]       0.25 0.04 0.19 0.23 0.25 0.28  0.33     3103     3210    1 #> pred[Efalizumab, PASI90]       0.07 0.02 0.04 0.06 0.07 0.08  0.11     3080     3389    1 #> pred[Etanercept 25 mg, PASI50] 0.66 0.05 0.56 0.63 0.66 0.69  0.75     2440     3231    1 #> pred[Etanercept 25 mg, PASI75] 0.37 0.05 0.27 0.33 0.37 0.40  0.47     2562     3138    1 #> pred[Etanercept 25 mg, PASI90] 0.13 0.03 0.08 0.11 0.12 0.15  0.19     2741     3257    1 #> pred[Etanercept 50 mg, PASI50] 0.79 0.04 0.71 0.77 0.79 0.82  0.86     2738     3194    1 #> pred[Etanercept 50 mg, PASI75] 0.53 0.05 0.42 0.49 0.53 0.56  0.64     2806     3246    1 #> pred[Etanercept 50 mg, PASI90] 0.23 0.04 0.16 0.20 0.23 0.26  0.32     2931     3360    1 #> pred[Fumaderm, PASI50]         0.63 0.17 0.30 0.52 0.64 0.76  0.93     2728     1985    1 #> pred[Fumaderm, PASI75]         0.37 0.17 0.10 0.24 0.34 0.48  0.77     2732     1968    1 #> pred[Fumaderm, PASI90]         0.15 0.12 0.02 0.06 0.11 0.19  0.47     2714     1844    1 #> pred[Infliximab, PASI50]       0.88 0.05 0.76 0.85 0.89 0.92  0.96     3349     2848    1 #> pred[Infliximab, PASI75]       0.68 0.10 0.47 0.61 0.69 0.75  0.85     3339     3192    1 #> pred[Infliximab, PASI90]       0.38 0.10 0.19 0.30 0.37 0.45  0.60     3408     2975    1 #> pred[Methotrexate, PASI50]     0.68 0.15 0.37 0.58 0.70 0.79  0.92     1476     2231    1 #> pred[Methotrexate, PASI75]     0.41 0.16 0.14 0.29 0.40 0.53  0.75     1489     2165    1 #> pred[Methotrexate, PASI90]     0.17 0.11 0.03 0.09 0.15 0.23  0.45     1505     2128    1 plot(pred_FE) pred_RE <- predict(pso_fit_RE,                     baseline = distr(qnorm, mean = -1.097, sd = 123^-0.5),                     type = \"response\") pred_RE #>                                mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Supportive care, PASI50]  0.14 0.02 0.10 0.12 0.14 0.15  0.18     9814     9874    1 #> pred[Supportive care, PASI75]  0.03 0.01 0.02 0.03 0.03 0.04  0.05    10467     9864    1 #> pred[Supportive care, PASI90]  0.00 0.00 0.00 0.00 0.00 0.00  0.01    11519     9729    1 #> pred[Ciclosporin, PASI50]      0.80 0.11 0.57 0.74 0.82 0.88  0.97     3350     3928    1 #> pred[Ciclosporin, PASI75]      0.56 0.15 0.28 0.45 0.56 0.67  0.87     3378     3950    1 #> pred[Ciclosporin, PASI90]      0.28 0.14 0.08 0.18 0.26 0.36  0.62     3399     4069    1 #> pred[Efalizumab, PASI50]       0.54 0.08 0.38 0.49 0.54 0.58  0.70     5349     3980    1 #> pred[Efalizumab, PASI75]       0.26 0.07 0.14 0.22 0.25 0.29  0.41     5424     4100    1 #> pred[Efalizumab, PASI90]       0.08 0.03 0.03 0.06 0.07 0.09  0.15     5541     4140    1 #> pred[Etanercept 25 mg, PASI50] 0.66 0.09 0.47 0.61 0.67 0.72  0.84     5503     4131    1 #> pred[Etanercept 25 mg, PASI75] 0.38 0.10 0.20 0.32 0.37 0.43  0.59     5555     4313    1 #> pred[Etanercept 25 mg, PASI90] 0.14 0.06 0.05 0.10 0.13 0.16  0.28     5637     4229    1 #> pred[Etanercept 50 mg, PASI50] 0.79 0.08 0.59 0.75 0.80 0.84  0.93     5772     4235    1 #> pred[Etanercept 50 mg, PASI75] 0.53 0.11 0.30 0.47 0.53 0.59  0.76     5802     4167    1 #> pred[Etanercept 50 mg, PASI90] 0.24 0.09 0.09 0.19 0.23 0.28  0.46     5871     4201    1 #> pred[Fumaderm, PASI50]         0.63 0.20 0.22 0.49 0.64 0.78  0.95     9282     5464    1 #> pred[Fumaderm, PASI75]         0.37 0.20 0.06 0.22 0.35 0.50  0.83     9294     5285    1 #> pred[Fumaderm, PASI90]         0.16 0.14 0.01 0.06 0.11 0.21  0.55     9355     5295    1 #> pred[Infliximab, PASI50]       0.87 0.08 0.66 0.83 0.89 0.93  0.98     7378     4971    1 #> pred[Infliximab, PASI75]       0.67 0.13 0.36 0.58 0.68 0.76  0.90     7436     4813    1 #> pred[Infliximab, PASI90]       0.37 0.14 0.12 0.28 0.36 0.46  0.68     7447     5043    1 #> pred[Methotrexate, PASI50]     0.70 0.18 0.30 0.59 0.72 0.84  0.98     4024     3725    1 #> pred[Methotrexate, PASI75]     0.45 0.21 0.10 0.30 0.44 0.60  0.90     4027     3803    1 #> pred[Methotrexate, PASI90]     0.21 0.17 0.02 0.09 0.17 0.29  0.67     4076     3668    1 plot(pred_RE) pred_FE_beta <- predict(pso_fit_FE,                          baseline = distr(qbeta, 56, 408-56),                         baseline_type = \"response\",                         type = \"response\") pred_FE_beta #>                                mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Supportive care, PASI50]  0.14 0.02 0.10 0.12 0.14 0.15  0.17     3931     4032    1 #> pred[Supportive care, PASI75]  0.03 0.01 0.02 0.03 0.03 0.04  0.05     4169     4016    1 #> pred[Supportive care, PASI90]  0.00 0.00 0.00 0.00 0.00 0.00  0.01     4415     3649    1 #> pred[Ciclosporin, PASI50]      0.78 0.10 0.57 0.72 0.79 0.85  0.94     1401     1792    1 #> pred[Ciclosporin, PASI75]      0.52 0.13 0.28 0.43 0.52 0.61  0.78     1410     1658    1 #> pred[Ciclosporin, PASI90]      0.24 0.11 0.08 0.16 0.22 0.30  0.49     1432     1710    1 #> pred[Efalizumab, PASI50]       0.54 0.04 0.46 0.51 0.54 0.56  0.61     3253     3415    1 #> pred[Efalizumab, PASI75]       0.25 0.03 0.19 0.23 0.25 0.28  0.32     3241     3167    1 #> pred[Efalizumab, PASI90]       0.07 0.02 0.05 0.06 0.07 0.08  0.10     3434     3193    1 #> pred[Etanercept 25 mg, PASI50] 0.66 0.05 0.57 0.63 0.66 0.69  0.75     2741     3251    1 #> pred[Etanercept 25 mg, PASI75] 0.37 0.05 0.28 0.34 0.37 0.40  0.46     2876     3505    1 #> pred[Etanercept 25 mg, PASI90] 0.13 0.03 0.08 0.11 0.13 0.14  0.19     3107     3811    1 #> pred[Etanercept 50 mg, PASI50] 0.79 0.04 0.72 0.77 0.79 0.82  0.86     2895     3631    1 #> pred[Etanercept 50 mg, PASI75] 0.53 0.05 0.43 0.49 0.53 0.56  0.62     2983     3081    1 #> pred[Etanercept 50 mg, PASI90] 0.23 0.04 0.16 0.20 0.23 0.26  0.31     3154     3360    1 #> pred[Fumaderm, PASI50]         0.63 0.17 0.31 0.52 0.64 0.76  0.93     2590     1966    1 #> pred[Fumaderm, PASI75]         0.37 0.17 0.10 0.24 0.34 0.48  0.77     2593     1938    1 #> pred[Fumaderm, PASI90]         0.15 0.12 0.02 0.06 0.11 0.19  0.48     2585     1780    1 #> pred[Infliximab, PASI50]       0.88 0.05 0.76 0.85 0.89 0.92  0.96     3389     3095    1 #> pred[Infliximab, PASI75]       0.68 0.10 0.48 0.61 0.68 0.75  0.86     3377     2957    1 #> pred[Infliximab, PASI90]       0.38 0.10 0.20 0.30 0.37 0.45  0.60     3443     2956    1 #> pred[Methotrexate, PASI50]     0.68 0.15 0.38 0.58 0.69 0.80  0.92     1506     1720    1 #> pred[Methotrexate, PASI75]     0.41 0.16 0.14 0.29 0.40 0.53  0.75     1512     1776    1 #> pred[Methotrexate, PASI90]     0.17 0.11 0.03 0.09 0.14 0.23  0.45     1528     1650    1 plot(pred_FE_beta) pred_RE_beta <- predict(pso_fit_RE,                          baseline = distr(qbeta, 56, 408-56),                         baseline_type = \"response\",                         type = \"response\") pred_RE_beta #>                                mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[Supportive care, PASI50]  0.14 0.02 0.11 0.13 0.14 0.15  0.17     9949     9570    1 #> pred[Supportive care, PASI75]  0.03 0.01 0.02 0.03 0.03 0.04  0.05    10714     9920    1 #> pred[Supportive care, PASI90]  0.00 0.00 0.00 0.00 0.00 0.00  0.01    12288     9886    1 #> pred[Ciclosporin, PASI50]      0.81 0.10 0.57 0.74 0.82 0.88  0.97     3300     3522    1 #> pred[Ciclosporin, PASI75]      0.56 0.15 0.28 0.45 0.56 0.67  0.87     3322     3565    1 #> pred[Ciclosporin, PASI90]      0.28 0.14 0.08 0.18 0.26 0.36  0.62     3350     3558    1 #> pred[Efalizumab, PASI50]       0.54 0.08 0.38 0.49 0.54 0.58  0.69     5048     3566    1 #> pred[Efalizumab, PASI75]       0.26 0.07 0.14 0.22 0.25 0.29  0.41     5101     3796    1 #> pred[Efalizumab, PASI90]       0.08 0.03 0.03 0.06 0.07 0.09  0.15     5276     3883    1 #> pred[Etanercept 25 mg, PASI50] 0.66 0.09 0.47 0.61 0.67 0.72  0.84     5478     4018    1 #> pred[Etanercept 25 mg, PASI75] 0.38 0.09 0.21 0.32 0.37 0.43  0.59     5529     4353    1 #> pred[Etanercept 25 mg, PASI90] 0.14 0.06 0.05 0.10 0.13 0.16  0.28     5627     4316    1 #> pred[Etanercept 50 mg, PASI50] 0.79 0.08 0.59 0.75 0.80 0.84  0.93     5802     4237    1 #> pred[Etanercept 50 mg, PASI75] 0.53 0.11 0.30 0.47 0.53 0.59  0.76     5802     4239    1 #> pred[Etanercept 50 mg, PASI90] 0.24 0.09 0.09 0.19 0.23 0.28  0.46     5875     4196    1 #> pred[Fumaderm, PASI50]         0.63 0.20 0.21 0.49 0.64 0.78  0.96     9303     5655    1 #> pred[Fumaderm, PASI75]         0.37 0.20 0.06 0.22 0.35 0.50  0.83     9318     5680    1 #> pred[Fumaderm, PASI90]         0.16 0.14 0.01 0.06 0.11 0.21  0.55     9381     5608    1 #> pred[Infliximab, PASI50]       0.87 0.08 0.66 0.83 0.89 0.93  0.98     7327     5206    1 #> pred[Infliximab, PASI75]       0.67 0.13 0.37 0.59 0.68 0.76  0.90     7373     5153    1 #> pred[Infliximab, PASI90]       0.37 0.14 0.13 0.28 0.36 0.46  0.68     7481     4945    1 #> pred[Methotrexate, PASI50]     0.70 0.18 0.30 0.59 0.72 0.84  0.98     3981     3438    1 #> pred[Methotrexate, PASI75]     0.45 0.21 0.10 0.30 0.44 0.60  0.89     3990     3536    1 #> pred[Methotrexate, PASI90]     0.21 0.17 0.02 0.09 0.17 0.29  0.67     4036     3492    1 plot(pred_RE_beta) library(ggplot2) plot(pred_RE, position = position_dodge(width = 0.75)) +   facet_null() +   aes(colour = Category) +   scale_colour_brewer(palette = \"Blues\")"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"ranks-and-rank-probabilities","dir":"Articles","previous_headings":"Further results","what":"Ranks and rank probabilities","title":"Example: Plaque psoriasis HTA report","text":"Treatment rankings, rank probabilities, cumulative rank probabilities can also produced. set lower_better = FALSE since higher outcome categories better (outcomes positive).","code":"(pso_ranks <- posterior_ranks(pso_fit_RE, lower_better = FALSE)) #>                        mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[Supportive care]  7.99 0.11    8   8   8   8     8     5520       NA    1 #> rank[Ciclosporin]      2.76 1.27    1   2   3   4     5     6521     7135    1 #> rank[Efalizumab]       6.35 0.82    4   6   7   7     7     5460       NA    1 #> rank[Etanercept 25 mg] 4.92 1.08    3   4   5   6     7     6787     6159    1 #> rank[Etanercept 50 mg] 3.05 1.21    1   2   3   4     5     5720     4234    1 #> rank[Fumaderm]         4.92 1.94    1   3   5   7     7     8860     5862    1 #> rank[Infliximab]       1.83 1.21    1   1   1   2     5     3118     3969    1 #> rank[Methotrexate]     4.19 1.88    1   3   4   6     7     5827     5437    1 plot(pso_ranks) (pso_rankprobs <- posterior_rank_probs(pso_fit_RE, lower_better = FALSE)) #>                     p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] p_rank[7] #> d[Supportive care]       0.00      0.00      0.00      0.00      0.00      0.00      0.01 #> d[Ciclosporin]           0.17      0.29      0.27      0.17      0.07      0.02      0.00 #> d[Efalizumab]            0.00      0.00      0.01      0.02      0.10      0.36      0.52 #> d[Etanercept 25 mg]      0.00      0.01      0.08      0.21      0.38      0.26      0.05 #> d[Etanercept 50 mg]      0.08      0.30      0.27      0.24      0.09      0.02      0.01 #> d[Fumaderm]              0.07      0.09      0.09      0.11      0.16      0.19      0.27 #> d[Infliximab]            0.58      0.18      0.13      0.07      0.03      0.01      0.00 #> d[Methotrexate]          0.10      0.13      0.15      0.18      0.16      0.14      0.14 #>                     p_rank[8] #> d[Supportive care]       0.99 #> d[Ciclosporin]           0.00 #> d[Efalizumab]            0.00 #> d[Etanercept 25 mg]      0.00 #> d[Etanercept 50 mg]      0.00 #> d[Fumaderm]              0.01 #> d[Infliximab]            0.00 #> d[Methotrexate]          0.00 plot(pso_rankprobs) (pso_cumrankprobs <- posterior_rank_probs(pso_fit_RE, lower_better = FALSE, cumulative = TRUE)) #>                     p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] p_rank[7] #> d[Supportive care]       0.00      0.00      0.00      0.00      0.00      0.00      0.01 #> d[Ciclosporin]           0.17      0.46      0.73      0.90      0.98      1.00      1.00 #> d[Efalizumab]            0.00      0.00      0.01      0.03      0.13      0.48      1.00 #> d[Etanercept 25 mg]      0.00      0.02      0.10      0.31      0.69      0.95      1.00 #> d[Etanercept 50 mg]      0.08      0.37      0.65      0.88      0.98      0.99      1.00 #> d[Fumaderm]              0.07      0.16      0.25      0.37      0.53      0.72      0.99 #> d[Infliximab]            0.58      0.76      0.89      0.96      0.99      1.00      1.00 #> d[Methotrexate]          0.10      0.22      0.37      0.55      0.71      0.86      1.00 #>                     p_rank[8] #> d[Supportive care]          1 #> d[Ciclosporin]              1 #> d[Efalizumab]               1 #> d[Etanercept 25 mg]         1 #> d[Etanercept 50 mg]         1 #> d[Fumaderm]                 1 #> d[Infliximab]               1 #> d[Methotrexate]             1 plot(pso_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_hta_psoriasis.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Plaque psoriasis HTA report","text":"Dias, S., N. J. Welton, . J. Sutton, . E. Ades. 2011. “NICE DSU Technical Support Document 2: Generalised Linear Modelling Framework Pair-Wise Network Meta-Analysis Randomised Controlled Trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Woolacott, N., N. Hawkins, . Mason, . Kainth, Z. Khadjesari, Y. Bravo Vergel, K. Misso, et al. 2006. “Etanercept Efalizumab Treatment Psoriasis: Systematic Review.” Health Technology Assessment 10 (46). https://doi.org/10.3310/hta10460.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"analysis-of-arm-based-data","dir":"Articles","previous_headings":"","what":"Analysis of arm-based data","title":"Example: Parkinson's disease","text":"begin analysis arm-based data - means standard errors.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"Analysis of arm-based data","what":"Setting up the network","title":"Example: Parkinson's disease","text":"arm-level continuous data giving mean -time reduction (y) standard error (se) arm. use function set_agd_arm() set network. let treatment 4 set default network reference treatment, since results considerably improved sampling efficiency choosing treatment 1 network reference. sample_size argument optional, enables nodes weighted sample size network plot. Plot network structure.","code":"arm_net <- set_agd_arm(parkinsons,                        study = studyn,                       trt = trtn,                       y = y,                        se = se,                       sample_size = n) arm_net #> A network with 7 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments   #>  1     2: 1 | 3     #>  2     2: 1 | 2     #>  3     3: 1 | 2 | 4 #>  4     2: 3 | 4     #>  5     2: 3 | 4     #>  6     2: 4 | 5     #>  7     2: 4 | 5     #>  #>  Outcome type: continuous #> ------------------------------------------------------------------------------------ #> Total number of treatments: 5 #> Total number of studies: 7 #> Reference treatment is: 4 #> Network is connected plot(arm_net, weight_edges = TRUE, weight_nodes = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"Analysis of arm-based data","what":"Meta-analysis models","title":"Example: Parkinson's disease","text":"fit fixed effect (FE) random effects (RE) models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"fixed-effect-meta-analysis","dir":"Articles","previous_headings":"Analysis of arm-based data > Meta-analysis models","what":"Fixed effect meta-analysis","title":"Example: Parkinson's disease","text":"First, fit fixed effect model using nma() function trt_effects = \"fixed\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. arm_fit_FE <- nma(arm_net,                    trt_effects = \"fixed\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 10)) #> Note: Setting \"4\" as the network reference treatment. arm_fit_FE #> A fixed effects NMA with a normal likelihood (identity link). #> Inference for Stan model: normal. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>       mean se_mean   sd   2.5%   25%   50%   75% 97.5% n_eff Rhat #> d[1]  0.53    0.01 0.46  -0.38  0.21  0.53  0.84  1.42  1624    1 #> d[2] -1.29    0.01 0.50  -2.27 -1.63 -1.29 -0.95 -0.30  1731    1 #> d[3]  0.03    0.01 0.32  -0.60 -0.18  0.04  0.24  0.66  2253    1 #> d[5] -0.30    0.00 0.21  -0.71 -0.44 -0.30 -0.17  0.10  2401    1 #> lp__ -6.63    0.06 2.35 -12.04 -7.99 -6.28 -4.92 -3.10  1719    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:59:51 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(arm_fit_FE, pars = c(\"d\", \"mu\")) plot_prior_posterior(arm_fit_FE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"random-effects-meta-analysis","dir":"Articles","previous_headings":"Analysis of arm-based data > Meta-analysis models","what":"Random effects meta-analysis","title":"Example: Parkinson's disease","text":"now fit random effects model using nma() function trt_effects = \"random\". , use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), additionally use \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model see small number divergent transition errors, simply removed increasing value adapt_delta argument (default set 0.95 RE models). diagnose, use pairs() method investigate posterior distribution divergences happening (indicated red crosses):  divergent transitions occur upper tail heterogeneity standard deviation. case, small number studies, much information estimate heterogeneity standard deviation prior distribution may heavy-tailed. consider informative prior distribution heterogeneity variance aid estimation. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. arm_fit_RE <- nma(arm_net,                    seed = 379394727,                   trt_effects = \"random\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100),                   prior_het = half_normal(scale = 5),                   adapt_delta = 0.99) #> Note: Setting \"4\" as the network reference treatment. #> Warning: There were 1 divergent transitions after warmup. See #> http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems pairs(arm_fit_RE, pars = c(\"mu[4]\", \"d[3]\", \"delta[4: 3]\", \"tau\")) arm_fit_RE #> A random effects NMA with a normal likelihood (identity link). #> Inference for Stan model: normal. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>        mean se_mean   sd   2.5%    25%    50%    75% 97.5% n_eff Rhat #> d[1]   0.55    0.01 0.61  -0.65   0.16   0.54   0.91  1.73  1990 1.00 #> d[2]  -1.29    0.02 0.70  -2.66  -1.72  -1.29  -0.86  0.09  1968 1.00 #> d[3]   0.03    0.01 0.45  -0.83  -0.24   0.03   0.31  0.95  1921 1.00 #> d[5]  -0.30    0.01 0.44  -1.18  -0.51  -0.30  -0.10  0.58  1932 1.00 #> lp__ -12.88    0.10 3.62 -21.03 -15.18 -12.48 -10.28 -6.78  1268 1.00 #> tau    0.38    0.01 0.38   0.01   0.12   0.27   0.51  1.43   776 1.01 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:00:01 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(arm_fit_RE, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(arm_fit_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"model-comparison","dir":"Articles","previous_headings":"Analysis of arm-based data > Meta-analysis models","what":"Model comparison","title":"Example: Parkinson's disease","text":"Model fit can checked using dic() function: models fit data well, posterior mean residual deviance close number data points. DIC similar models, choose FE model based parsimony. can also examine residual deviance contributions corresponding plot() method.","code":"(arm_dic_FE <- dic(arm_fit_FE)) #> Residual deviance: 13.2 (on 15 data points) #>                pD: 10.9 #>               DIC: 24.2 (arm_dic_RE <- dic(arm_fit_RE)) #> Residual deviance: 13.6 (on 15 data points) #>                pD: 12.4 #>               DIC: 26 plot(arm_dic_FE) plot(arm_dic_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"further-results","dir":"Articles","previous_headings":"Analysis of arm-based data","what":"Further results","title":"Example: Parkinson's disease","text":"comparison Dias et al. (2011), can produce relative effects placebo using relative_effects() function trt_ref = 1:   Following Dias et al. (2011), produce absolute predictions mean -time reduction treatment assuming Normal distribution outcomes treatment 1 (placebo) mean \\(-0.73\\) precision \\(21\\). use predict() method, baseline argument takes distr() distribution object specify corresponding Normal distribution, specify trt_ref = 1 indicate baseline distribution corresponds treatment 1. (Strictly speaking, type = \"response\" unnecessary , since identity link function used.)   baseline argument omitted, predictions mean -time reduction produced every study network based estimated baseline response \\(\\mu_j\\):  can also produce treatment rankings, rank probabilities, cumulative rank probabilities.","code":"(arm_releff_FE <- relative_effects(arm_fit_FE, trt_ref = 1)) #>       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[4] -0.53 0.46 -1.42 -0.84 -0.53 -0.21  0.38     1651     2196    1 #> d[2] -1.81 0.34 -2.49 -2.04 -1.81 -1.59 -1.15     5966     2868    1 #> d[3] -0.49 0.48 -1.41 -0.82 -0.50 -0.18  0.44     2452     2664    1 #> d[5] -0.83 0.51 -1.83 -1.17 -0.83 -0.48  0.16     1727     2595    1 plot(arm_releff_FE, ref_line = 0) (arm_releff_RE <- relative_effects(arm_fit_RE, trt_ref = 1)) #>       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[4] -0.55 0.61 -1.73 -0.91 -0.54 -0.16  0.65     2066     2196    1 #> d[2] -1.84 0.51 -2.87 -2.12 -1.83 -1.54 -0.88     4112     2809    1 #> d[3] -0.51 0.63 -1.75 -0.89 -0.50 -0.12  0.73     3255     2872    1 #> d[5] -0.85 0.77 -2.38 -1.26 -0.83 -0.41  0.62     1917     1749    1 plot(arm_releff_RE, ref_line = 0) arm_pred_FE <- predict(arm_fit_FE,                         baseline = distr(qnorm, mean = -0.73, sd = 21^-0.5),                        type = \"response\",                        trt_ref = 1) arm_pred_FE #>          mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[4] -1.25 0.51 -2.26 -1.61 -1.26 -0.91 -0.25     1857     2502    1 #> pred[1] -0.73 0.22 -1.16 -0.88 -0.73 -0.58 -0.29     3856     3973    1 #> pred[2] -2.54 0.40 -3.32 -2.82 -2.53 -2.27 -1.77     4862     3580    1 #> pred[3] -1.22 0.53 -2.24 -1.58 -1.23 -0.87 -0.17     2583     3165    1 #> pred[5] -1.56 0.56 -2.65 -1.94 -1.56 -1.18 -0.48     1862     2737    1 plot(arm_pred_FE) arm_pred_RE <- predict(arm_fit_RE,                         baseline = distr(qnorm, mean = -0.73, sd = 21^-0.5),                        type = \"response\",                        trt_ref = 1) arm_pred_RE #>          mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[4] -1.27 0.65 -2.53 -1.68 -1.26 -0.86 -0.04     2233     2423    1 #> pred[1] -0.73 0.22 -1.16 -0.87 -0.73 -0.58 -0.30     4018     3891    1 #> pred[2] -2.57 0.56 -3.65 -2.90 -2.56 -2.22 -1.50     4130     2500    1 #> pred[3] -1.24 0.67 -2.53 -1.64 -1.23 -0.82  0.02     3426     3011    1 #> pred[5] -1.57 0.80 -3.17 -2.03 -1.57 -1.10 -0.09     2004     1893    1 plot(arm_pred_RE) arm_pred_FE_studies <- predict(arm_fit_FE, type = \"response\") arm_pred_FE_studies #> ---------------------------------------------------------------------- Study: 1 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[1: 4] -1.64 0.45 -2.52 -1.94 -1.63 -1.33 -0.76     2234     2589    1 #> pred[1: 1] -1.11 0.42 -1.99 -1.39 -1.10 -0.83 -0.31     3763     3473    1 #> pred[1: 2] -2.93 0.51 -3.97 -3.25 -2.92 -2.57 -1.96     3963     3300    1 #> pred[1: 3] -1.60 0.39 -2.37 -1.87 -1.61 -1.33 -0.85     4325     3198    1 #> pred[1: 5] -1.94 0.50 -2.92 -2.28 -1.93 -1.60 -0.97     2299     2607    1 #>  #> ---------------------------------------------------------------------- Study: 2 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[2: 4] -1.16 0.49 -2.10 -1.49 -1.16 -0.83 -0.19     1586     2331    1 #> pred[2: 1] -0.63 0.27 -1.14 -0.82 -0.64 -0.46 -0.10     4997     3648    1 #> pred[2: 2] -2.45 0.25 -2.94 -2.62 -2.45 -2.28 -1.95     4711     3519    1 #> pred[2: 3] -1.13 0.51 -2.10 -1.47 -1.13 -0.78 -0.12     2322     2912    1 #> pred[2: 5] -1.46 0.54 -2.52 -1.83 -1.47 -1.10 -0.40     1720     2486    1 #>  #> ---------------------------------------------------------------------- Study: 3 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[3: 4] -1.11 0.41 -1.91 -1.38 -1.11 -0.84 -0.31     2063     2604    1 #> pred[3: 1] -0.59 0.36 -1.31 -0.82 -0.59 -0.34  0.10     4798     3478    1 #> pred[3: 2] -2.40 0.38 -3.17 -2.66 -2.39 -2.14 -1.66     4721     3589    1 #> pred[3: 3] -1.08 0.46 -1.98 -1.40 -1.08 -0.77 -0.20     2916     3219    1 #> pred[3: 5] -1.42 0.46 -2.35 -1.72 -1.41 -1.10 -0.55     2148     2783    1 #>  #> ---------------------------------------------------------------------- Study: 4 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[4: 4] -0.39 0.29 -0.96 -0.58 -0.39 -0.20  0.17     2717     2565    1 #> pred[4: 1]  0.13 0.50 -0.84 -0.20  0.14  0.48  1.09     2260     2870    1 #> pred[4: 2] -1.68 0.54 -2.76 -2.05 -1.67 -1.31 -0.63     2359     3246    1 #> pred[4: 3] -0.36 0.24 -0.83 -0.52 -0.35 -0.19  0.11     5150     3423    1 #> pred[4: 5] -0.70 0.36 -1.38 -0.93 -0.70 -0.46  0.01     2774     2712    1 #>  #> ---------------------------------------------------------------------- Study: 5 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[5: 4] -0.55 0.33 -1.19 -0.78 -0.55 -0.32  0.10     3031     3130    1 #> pred[5: 1] -0.03 0.53 -1.08 -0.39 -0.02  0.34  1.00     2498     2749    1 #> pred[5: 2] -1.84 0.57 -2.97 -2.22 -1.83 -1.46 -0.75     2502     2669    1 #> pred[5: 3] -0.52 0.30 -1.09 -0.72 -0.52 -0.31  0.06     5268     3171    1 #> pred[5: 5] -0.85 0.39 -1.61 -1.11 -0.86 -0.59 -0.09     2930     3007    1 #>  #> ---------------------------------------------------------------------- Study: 6 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[6: 4] -2.20 0.17 -2.53 -2.31 -2.20 -2.08 -1.85     2763     2659    1 #> pred[6: 1] -1.67 0.49 -2.62 -2.00 -1.66 -1.34 -0.71     1733     2462    1 #> pred[6: 2] -3.48 0.53 -4.51 -3.86 -3.49 -3.13 -2.44     1875     2820    1 #> pred[6: 3] -2.16 0.36 -2.88 -2.40 -2.16 -1.92 -1.46     2467     2783    1 #> pred[6: 5] -2.50 0.17 -2.82 -2.61 -2.50 -2.39 -2.16     5210     3246    1 #>  #> ---------------------------------------------------------------------- Study: 7 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[7: 4] -1.80 0.18 -2.14 -1.92 -1.80 -1.68 -1.45     3269     2777    1 #> pred[7: 1] -1.27 0.49 -2.24 -1.60 -1.26 -0.93 -0.32     1679     2193    1 #> pred[7: 2] -3.09 0.53 -4.13 -3.44 -3.09 -2.72 -2.03     1833     2704    1 #> pred[7: 3] -1.77 0.36 -2.47 -2.00 -1.77 -1.53 -1.04     2388     2556    1 #> pred[7: 5] -2.10 0.20 -2.49 -2.24 -2.10 -1.97 -1.72     4280     3521    1 plot(arm_pred_FE_studies) (arm_ranks <- posterior_ranks(arm_fit_FE)) #>         mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[4] 3.51 0.70    2   3   3   4     5     2141       NA    1 #> rank[1] 4.66 0.75    2   5   5   5     5     2219       NA    1 #> rank[2] 1.05 0.25    1   1   1   1     2     3106     3099    1 #> rank[3] 3.51 0.91    2   3   4   4     5     2884       NA    1 #> rank[5] 2.26 0.65    1   2   2   2     4     2386     2538    1 plot(arm_ranks) (arm_rankprobs <- posterior_rank_probs(arm_fit_FE)) #>      p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[4]      0.00      0.04      0.49      0.39      0.08 #> d[1]      0.00      0.04      0.06      0.11      0.79 #> d[2]      0.96      0.04      0.00      0.00      0.00 #> d[3]      0.00      0.16      0.28      0.44      0.12 #> d[5]      0.04      0.73      0.17      0.05      0.01 plot(arm_rankprobs) (arm_cumrankprobs <- posterior_rank_probs(arm_fit_FE, cumulative = TRUE)) #>      p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[4]      0.00      0.04      0.53      0.92         1 #> d[1]      0.00      0.04      0.10      0.21         1 #> d[2]      0.96      0.99      1.00      1.00         1 #> d[3]      0.00      0.16      0.44      0.88         1 #> d[5]      0.04      0.77      0.94      0.99         1 plot(arm_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"analysis-of-contrast-based-data","dir":"Articles","previous_headings":"","what":"Analysis of contrast-based data","title":"Example: Parkinson's disease","text":"now perform analysis using contrast-based data (mean differences standard errors).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"setting-up-the-network-1","dir":"Articles","previous_headings":"Analysis of contrast-based data","what":"Setting up the network","title":"Example: Parkinson's disease","text":"contrast-level data giving mean difference -time reduction (diff) standard error (se_diff), use function set_agd_contrast() set network. sample_size argument optional, enables nodes weighted sample size network plot. Plot network structure.","code":"contr_net <- set_agd_contrast(parkinsons,                                study = studyn,                               trt = trtn,                               y = diff,                                se = se_diff,                               sample_size = n) contr_net #> A network with 7 AgD studies (contrast-based). #>  #> -------------------------------------------------- AgD studies (contrast-based) ----  #>  Study Treatments   #>  1     2: 1 | 3     #>  2     2: 1 | 2     #>  3     3: 1 | 2 | 4 #>  4     2: 3 | 4     #>  5     2: 3 | 4     #>  6     2: 4 | 5     #>  7     2: 4 | 5     #>  #>  Outcome type: continuous #> ------------------------------------------------------------------------------------ #> Total number of treatments: 5 #> Total number of studies: 7 #> Reference treatment is: 4 #> Network is connected plot(contr_net, weight_edges = TRUE, weight_nodes = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"meta-analysis-models-1","dir":"Articles","previous_headings":"Analysis of contrast-based data","what":"Meta-analysis models","title":"Example: Parkinson's disease","text":"fit fixed effect (FE) random effects (RE) models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"fixed-effect-meta-analysis-1","dir":"Articles","previous_headings":"Analysis of contrast-based data > Meta-analysis models","what":"Fixed effect meta-analysis","title":"Example: Parkinson's disease","text":"First, fit fixed effect model using nma() function trt_effects = \"fixed\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. Basic parameter summaries given print() method: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. contr_fit_FE <- nma(contr_net,                      trt_effects = \"fixed\",                     prior_trt = normal(scale = 100)) #> Note: Setting \"4\" as the network reference treatment. contr_fit_FE #> A fixed effects NMA with a normal likelihood (identity link). #> Inference for Stan model: normal. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>       mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> d[1]  0.51    0.01 0.49 -0.45  0.19  0.51  0.84  1.49  2164    1 #> d[2] -1.30    0.01 0.53 -2.31 -1.67 -1.29 -0.93 -0.27  2274    1 #> d[3]  0.04    0.01 0.32 -0.59 -0.18  0.04  0.26  0.65  2857    1 #> d[5] -0.30    0.00 0.21 -0.70 -0.44 -0.30 -0.16  0.12  3772    1 #> lp__ -3.16    0.04 1.41 -6.68 -3.86 -2.84 -2.11 -1.39  1572    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:00:18 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). plot_prior_posterior(contr_fit_FE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"random-effects-meta-analysis-1","dir":"Articles","previous_headings":"Analysis of contrast-based data > Meta-analysis models","what":"Random effects meta-analysis","title":"Example: Parkinson's disease","text":"now fit random effects model using nma() function trt_effects = \"random\". , use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\), additionally use \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model see small number divergent transition errors, simply removed increasing value adapt_delta argument (default set 0.95 RE models). diagnose, use pairs() method investigate posterior distribution divergences happening (indicated red crosses):  divergent transitions occur upper tail heterogeneity standard deviation. case, small number studies, much information estimate heterogeneity standard deviation prior distribution may heavy-tailed. consider informative prior distribution heterogeneity variance aid estimation. Basic parameter summaries given print() method: default, summaries study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. contr_fit_RE <- nma(contr_net,                      seed = 1150676438,                     trt_effects = \"random\",                     prior_trt = normal(scale = 100),                     prior_het = half_normal(scale = 5),                     adapt_delta = 0.99) #> Note: Setting \"4\" as the network reference treatment. pairs(contr_fit_RE, pars = c(\"d[3]\", \"delta[4: 4 vs. 3]\", \"tau\")) contr_fit_RE #> A random effects NMA with a normal likelihood (identity link). #> Inference for Stan model: normal. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>       mean se_mean   sd   2.5%   25%   50%   75% 97.5% n_eff Rhat #> d[1]  0.54    0.01 0.62  -0.66  0.17  0.53  0.91  1.76  2055    1 #> d[2] -1.30    0.02 0.72  -2.69 -1.73 -1.29 -0.88  0.09  2187    1 #> d[3]  0.04    0.01 0.47  -0.86 -0.24  0.04  0.32  0.93  2086    1 #> d[5] -0.29    0.01 0.40  -1.07 -0.50 -0.30 -0.09  0.53  1836    1 #> lp__ -8.18    0.08 2.86 -14.57 -9.85 -7.85 -6.17 -3.55  1217    1 #> tau   0.38    0.01 0.37   0.01  0.13  0.29  0.52  1.33   948    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:00:24 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(contr_fit_RE, pars = c(\"d\", \"delta\")) plot_prior_posterior(contr_fit_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"model-comparison-1","dir":"Articles","previous_headings":"Analysis of contrast-based data > Meta-analysis models","what":"Model comparison","title":"Example: Parkinson's disease","text":"Model fit can checked using dic() function: models fit data well, posterior mean residual deviance close number data points. DIC similar models, choose FE model based parsimony. can also examine residual deviance contributions corresponding plot() method.","code":"(contr_dic_FE <- dic(contr_fit_FE)) #> Residual deviance: 6.3 (on 8 data points) #>                pD: 4 #>               DIC: 10.3 (contr_dic_RE <- dic(contr_fit_RE)) #> Residual deviance: 6.6 (on 8 data points) #>                pD: 5.4 #>               DIC: 12 plot(contr_dic_FE) plot(contr_dic_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"further-results-1","dir":"Articles","previous_headings":"Analysis of contrast-based data","what":"Further results","title":"Example: Parkinson's disease","text":"comparison Dias et al. (2011), can produce relative effects placebo using relative_effects() function trt_ref = 1:   Following Dias et al. (2011), produce absolute predictions mean -time reduction treatment assuming Normal distribution outcomes treatment 1 (placebo) mean \\(-0.73\\) precision \\(21\\). use predict() method, baseline argument takes distr() distribution object specify corresponding Normal distribution, specify trt_ref = 1 indicate baseline distribution corresponds treatment 1. (Strictly speaking, type = \"response\" unnecessary , since identity link function used.)   baseline argument omitted error raised, study baselines estimated network. can also produce treatment rankings, rank probabilities, cumulative rank probabilities.","code":"(contr_releff_FE <- relative_effects(contr_fit_FE, trt_ref = 1)) #>       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[4] -0.51 0.49 -1.49 -0.84 -0.51 -0.19  0.45     2185     2594    1 #> d[2] -1.81 0.33 -2.46 -2.03 -1.81 -1.59 -1.17     5439     2816    1 #> d[3] -0.47 0.50 -1.48 -0.78 -0.46 -0.15  0.51     3016     2726    1 #> d[5] -0.81 0.53 -1.89 -1.16 -0.81 -0.46  0.21     2455     2499    1 plot(contr_releff_FE, ref_line = 0) (contr_releff_RE <- relative_effects(contr_fit_RE, trt_ref = 1)) #>       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[4] -0.54 0.62 -1.76 -0.91 -0.53 -0.17  0.66     2167     1835    1 #> d[2] -1.84 0.49 -2.86 -2.12 -1.83 -1.56 -0.90     3458     2342    1 #> d[3] -0.50 0.63 -1.72 -0.89 -0.49 -0.11  0.74     3265     2484    1 #> d[5] -0.83 0.75 -2.27 -1.27 -0.81 -0.40  0.65     2150     1713    1 plot(contr_releff_RE, ref_line = 0) contr_pred_FE <- predict(contr_fit_FE,                         baseline = distr(qnorm, mean = -0.73, sd = 21^-0.5),                        type = \"response\",                        trt_ref = 1) contr_pred_FE #>          mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[4] -1.24 0.53 -2.30 -1.60 -1.23 -0.87 -0.21     2329     2559    1 #> pred[1] -0.73 0.22 -1.16 -0.88 -0.73 -0.58 -0.30     3967     3603    1 #> pred[2] -2.54 0.40 -3.30 -2.81 -2.54 -2.28 -1.75     4680     3602    1 #> pred[3] -1.20 0.55 -2.29 -1.57 -1.18 -0.82 -0.14     3202     3030    1 #> pred[5] -1.54 0.57 -2.68 -1.92 -1.54 -1.14 -0.44     2550     2990    1 plot(contr_pred_FE) contr_pred_RE <- predict(contr_fit_RE,                         baseline = distr(qnorm, mean = -0.73, sd = 21^-0.5),                        type = \"response\",                        trt_ref = 1) contr_pred_RE #>          mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[4] -1.27 0.66 -2.55 -1.67 -1.27 -0.88 -0.03     2250     1993    1 #> pred[1] -0.73 0.22 -1.16 -0.88 -0.73 -0.59 -0.30     3676     3583    1 #> pred[2] -2.57 0.54 -3.70 -2.89 -2.56 -2.25 -1.55     3441     2438    1 #> pred[3] -1.23 0.67 -2.53 -1.65 -1.22 -0.82  0.05     3349     2601    1 #> pred[5] -1.56 0.78 -3.06 -2.03 -1.56 -1.10 -0.01     2166     1880    1 plot(contr_pred_RE) # Not run predict(contr_fit_FE, type = \"response\") (contr_ranks <- posterior_ranks(contr_fit_FE)) #>         mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[4] 3.52 0.72    2   3   3   4     5     2461       NA    1 #> rank[1] 4.63 0.78    2   5   5   5     5     2477       NA    1 #> rank[2] 1.05 0.29    1   1   1   1     2     2698     2751    1 #> rank[3] 3.51 0.92    2   3   4   4     5     3706       NA    1 #> rank[5] 2.28 0.67    1   2   2   2     4     2916     2847    1 plot(contr_ranks) (contr_rankprobs <- posterior_rank_probs(contr_fit_FE)) #>      p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[4]      0.00      0.05      0.48      0.39      0.09 #> d[1]      0.00      0.04      0.07      0.12      0.78 #> d[2]      0.96      0.03      0.01      0.00      0.00 #> d[3]      0.00      0.17      0.27      0.44      0.12 #> d[5]      0.04      0.71      0.18      0.06      0.01 plot(contr_rankprobs) (contr_cumrankprobs <- posterior_rank_probs(contr_fit_FE, cumulative = TRUE)) #>      p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[4]      0.00      0.05      0.53      0.91         1 #> d[1]      0.00      0.04      0.11      0.22         1 #> d[2]      0.96      0.99      1.00      1.00         1 #> d[3]      0.00      0.17      0.44      0.88         1 #> d[5]      0.04      0.75      0.93      0.99         1 plot(contr_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"analysis-of-mixed-arm-based-and-contrast-based-data","dir":"Articles","previous_headings":"","what":"Analysis of mixed arm-based and contrast-based data","title":"Example: Parkinson's disease","text":"now perform analysis studies contribute arm-based data, contribute contrast-based data. Replicating Dias et al. (2011), consider arm-based data studies 1-3, contrast-based data studies 4-7.","code":"studies <- parkinsons$studyn (parkinsons_arm <- parkinsons[studies %in% 1:3, ]) #>   studyn trtn     y    se   n  diff se_diff #> 1      1    1 -1.22 0.504  54    NA   0.504 #> 2      1    3 -1.53 0.439  95 -0.31   0.668 #> 3      2    1 -0.70 0.282 172    NA   0.282 #> 4      2    2 -2.40 0.258 173 -1.70   0.382 #> 5      3    1 -0.30 0.505  76    NA   0.505 #> 6      3    2 -2.60 0.510  71 -2.30   0.718 #> 7      3    4 -1.20 0.478  81 -0.90   0.695 (parkinsons_contr <- parkinsons[studies %in% 4:7, ]) #>    studyn trtn     y    se   n  diff se_diff #> 8       4    3 -0.24 0.265 128    NA   0.265 #> 9       4    4 -0.59 0.354  72 -0.35   0.442 #> 10      5    3 -0.73 0.335  80    NA   0.335 #> 11      5    4 -0.18 0.442  46  0.55   0.555 #> 12      6    4 -2.20 0.197 137    NA   0.197 #> 13      6    5 -2.50 0.190 131 -0.30   0.274 #> 14      7    4 -1.80 0.200 154    NA   0.200 #> 15      7    5 -2.10 0.250 143 -0.30   0.320"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"setting-up-the-network-2","dir":"Articles","previous_headings":"Analysis of mixed arm-based and contrast-based data","what":"Setting up the network","title":"Example: Parkinson's disease","text":"use functions set_agd_arm() set_agd_contrast() set respective data sources within network, combine together combine_network(). sample_size argument optional, enables nodes weighted sample size network plot. Plot network structure.","code":"mix_arm_net <- set_agd_arm(parkinsons_arm,                             study = studyn,                            trt = trtn,                            y = y,                             se = se,                            sample_size = n)  mix_contr_net <- set_agd_contrast(parkinsons_contr,                                    study = studyn,                                   trt = trtn,                                   y = diff,                                    se = se_diff,                                   sample_size = n)  mix_net <- combine_network(mix_arm_net, mix_contr_net) mix_net #> A network with 3 AgD studies (arm-based), and 4 AgD studies (contrast-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments   #>  1     2: 1 | 3     #>  2     2: 1 | 2     #>  3     3: 1 | 2 | 4 #>  #>  Outcome type: continuous #> -------------------------------------------------- AgD studies (contrast-based) ----  #>  Study Treatments #>  4     2: 3 | 4   #>  5     2: 3 | 4   #>  6     2: 4 | 5   #>  7     2: 4 | 5   #>  #>  Outcome type: continuous #> ------------------------------------------------------------------------------------ #> Total number of treatments: 5 #> Total number of studies: 7 #> Reference treatment is: 4 #> Network is connected plot(mix_net, weight_edges = TRUE, weight_nodes = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"meta-analysis-models-2","dir":"Articles","previous_headings":"Analysis of mixed arm-based and contrast-based data","what":"Meta-analysis models","title":"Example: Parkinson's disease","text":"fit fixed effect (FE) random effects (RE) models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"fixed-effect-meta-analysis-2","dir":"Articles","previous_headings":"Analysis of mixed arm-based and contrast-based data > Meta-analysis models","what":"Fixed effect meta-analysis","title":"Example: Parkinson's disease","text":"First, fit fixed effect model using nma() function trt_effects = \"fixed\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. mix_fit_FE <- nma(mix_net,                    trt_effects = \"fixed\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100)) #> Note: Setting \"4\" as the network reference treatment. mix_fit_FE #> A fixed effects NMA with a normal likelihood (identity link). #> Inference for Stan model: normal. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>       mean se_mean   sd  2.5%   25%   50%   75% 97.5% n_eff Rhat #> d[1]  0.50    0.01 0.47 -0.43  0.17  0.49  0.82  1.40  1223    1 #> d[2] -1.32    0.01 0.52 -2.33 -1.68 -1.32 -0.96 -0.31  1352    1 #> d[3]  0.04    0.01 0.32 -0.58 -0.19  0.04  0.25  0.66  2231    1 #> d[5] -0.29    0.00 0.21 -0.70 -0.43 -0.30 -0.16  0.12  3097    1 #> lp__ -4.54    0.04 1.87 -9.07 -5.58 -4.19 -3.16 -1.92  1807    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:00:35 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(mix_fit_FE, pars = c(\"d\", \"mu\")) plot_prior_posterior(mix_fit_FE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"random-effects-meta-analysis-2","dir":"Articles","previous_headings":"Analysis of mixed arm-based and contrast-based data > Meta-analysis models","what":"Random effects meta-analysis","title":"Example: Parkinson's disease","text":"now fit random effects model using nma() function trt_effects = \"random\". , use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), additionally use \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model see small number divergent transition errors, simply removed increasing value adapt_delta argument (default set 0.95 RE models). diagnose, use pairs() method investigate posterior distribution divergences happening (indicated red crosses):  divergent transitions occur upper tail heterogeneity standard deviation. case, small number studies, much information estimate heterogeneity standard deviation prior distribution may heavy-tailed. consider informative prior distribution heterogeneity variance aid estimation. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. mix_fit_RE <- nma(mix_net,                    seed = 437219664,                   trt_effects = \"random\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100),                   prior_het = half_normal(scale = 5),                   adapt_delta = 0.99) #> Note: Setting \"4\" as the network reference treatment. #> Warning: There were 4 divergent transitions after warmup. See #> http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems pairs(mix_fit_RE, pars = c(\"d[3]\", \"delta[4: 4 vs. 3]\", \"tau\")) mix_fit_RE #> A random effects NMA with a normal likelihood (identity link). #> Inference for Stan model: normal. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>        mean se_mean   sd   2.5%    25%    50%   75% 97.5% n_eff Rhat #> d[1]   0.53    0.02 0.61  -0.69   0.14   0.53  0.90  1.73  1490 1.00 #> d[2]  -1.31    0.02 0.69  -2.66  -1.73  -1.30 -0.89  0.06  1614 1.00 #> d[3]   0.05    0.01 0.48  -0.88  -0.23   0.05  0.31  1.05  2322 1.00 #> d[5]  -0.29    0.01 0.42  -1.17  -0.50  -0.30 -0.10  0.60  2196 1.00 #> lp__ -10.79    0.10 3.26 -17.96 -12.82 -10.48 -8.47 -5.21  1130 1.00 #> tau    0.40    0.01 0.40   0.01   0.13   0.28  0.52  1.53   724 1.01 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:00:45 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(mix_fit_RE, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(mix_fit_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"model-comparison-2","dir":"Articles","previous_headings":"Analysis of mixed arm-based and contrast-based data > Meta-analysis models","what":"Model comparison","title":"Example: Parkinson's disease","text":"Model fit can checked using dic() function: models fit data well, posterior mean residual deviance close number data points. DIC similar models, choose FE model based parsimony. can also examine residual deviance contributions corresponding plot() method.","code":"(mix_dic_FE <- dic(mix_fit_FE)) #> Residual deviance: 9.1 (on 11 data points) #>                pD: 6.8 #>               DIC: 15.9 (mix_dic_RE <- dic(mix_fit_RE)) #> Residual deviance: 9.7 (on 11 data points) #>                pD: 8.5 #>               DIC: 18.2 plot(mix_dic_FE) plot(mix_dic_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"further-results-2","dir":"Articles","previous_headings":"Analysis of mixed arm-based and contrast-based data","what":"Further results","title":"Example: Parkinson's disease","text":"comparison Dias et al. (2011), can produce relative effects placebo using relative_effects() function trt_ref = 1:   Following Dias et al. (2011), produce absolute predictions mean -time reduction treatment assuming Normal distribution outcomes treatment 1 (placebo) mean \\(-0.73\\) precision \\(21\\). use predict() method, baseline argument takes distr() distribution object specify corresponding Normal distribution, specify trt_ref = 1 indicate baseline distribution corresponds treatment 1. (Strictly speaking, type = \"response\" unnecessary , since identity link function used.)   baseline argument omitted, predictions mean -time reduction produced every arm-based study network based estimated baseline response \\(\\mu_j\\):  can also produce treatment rankings, rank probabilities, cumulative rank probabilities.","code":"(mix_releff_FE <- relative_effects(mix_fit_FE, trt_ref = 1)) #>       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[4] -0.50 0.47 -1.40 -0.82 -0.49 -0.17  0.43     1274     1999    1 #> d[2] -1.82 0.33 -2.46 -2.04 -1.82 -1.59 -1.15     5684     3358    1 #> d[3] -0.46 0.47 -1.40 -0.78 -0.47 -0.15  0.49     2261     2677    1 #> d[5] -0.79 0.52 -1.80 -1.15 -0.80 -0.44  0.22     1470     2371    1 plot(mix_releff_FE, ref_line = 0) (mix_releff_RE <- relative_effects(mix_fit_RE, trt_ref = 1)) #>       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[4] -0.53 0.61 -1.73 -0.90 -0.53 -0.14  0.69     1549     1721    1 #> d[2] -1.83 0.51 -2.87 -2.13 -1.84 -1.54 -0.84     4042     2535    1 #> d[3] -0.48 0.66 -1.74 -0.88 -0.49 -0.07  0.78     2691     2108    1 #> d[5] -0.82 0.76 -2.27 -1.27 -0.83 -0.37  0.71     1513     1435    1 plot(mix_releff_RE, ref_line = 0) mix_pred_FE <- predict(mix_fit_FE,                         baseline = distr(qnorm, mean = -0.73, sd = 21^-0.5),                        type = \"response\",                        trt_ref = 1) mix_pred_FE #>          mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[4] -1.22 0.52 -2.23 -1.57 -1.22 -0.87 -0.19     1421     2225    1 #> pred[1] -0.72 0.22 -1.14 -0.87 -0.72 -0.58 -0.30     3607     3552    1 #> pred[2] -2.54 0.39 -3.30 -2.80 -2.54 -2.28 -1.76     4755     3768    1 #> pred[3] -1.18 0.52 -2.19 -1.54 -1.19 -0.83 -0.17     2371     2548    1 #> pred[5] -1.51 0.56 -2.61 -1.89 -1.52 -1.14 -0.40     1612     2458    1 plot(mix_pred_FE) mix_pred_RE <- predict(mix_fit_RE,                         baseline = distr(qnorm, mean = -0.73, sd = 21^-0.5),                        type = \"response\",                        trt_ref = 1) mix_pred_RE #>          mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[4] -1.26 0.65 -2.54 -1.66 -1.25 -0.84  0.00     1618     1881    1 #> pred[1] -0.73 0.22 -1.17 -0.88 -0.73 -0.58 -0.31     3923     3771    1 #> pred[2] -2.56 0.55 -3.69 -2.91 -2.56 -2.23 -1.48     4009     2874    1 #> pred[3] -1.21 0.70 -2.57 -1.65 -1.21 -0.77  0.10     2651     2137    1 #> pred[5] -1.55 0.79 -3.08 -2.03 -1.56 -1.08  0.00     1605     1368    1 plot(mix_pred_RE) mix_pred_FE_studies <- predict(mix_fit_FE, type = \"response\") mix_pred_FE_studies #> ---------------------------------------------------------------------- Study: 1 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[1: 4] -1.63 0.45 -2.53 -1.93 -1.63 -1.33 -0.74     1944     2554    1 #> pred[1: 1] -1.13 0.43 -1.96 -1.42 -1.13 -0.83 -0.27     3542     3134    1 #> pred[1: 2] -2.95 0.52 -3.92 -3.30 -2.95 -2.60 -1.90     3426     3094    1 #> pred[1: 3] -1.59 0.39 -2.36 -1.85 -1.59 -1.34 -0.84     3708     3132    1 #> pred[1: 5] -1.92 0.50 -2.91 -2.25 -1.92 -1.58 -0.94     1959     2377    1 #>  #> ---------------------------------------------------------------------- Study: 2 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[2: 4] -1.13 0.51 -2.11 -1.49 -1.13 -0.79 -0.16     1298     2118    1 #> pred[2: 1] -0.64 0.26 -1.13 -0.81 -0.63 -0.46 -0.14     4851     3491    1 #> pred[2: 2] -2.45 0.23 -2.91 -2.61 -2.45 -2.30 -1.99     5347     3744    1 #> pred[2: 3] -1.10 0.52 -2.12 -1.45 -1.09 -0.75 -0.08     2181     2728    1 #> pred[2: 5] -1.43 0.55 -2.48 -1.80 -1.43 -1.06 -0.35     1420     2068    1 #>  #> ---------------------------------------------------------------------- Study: 3 ----  #>  #>             mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[3: 4] -1.10 0.42 -1.90 -1.38 -1.11 -0.81 -0.28     1779     2576    1 #> pred[3: 1] -0.60 0.36 -1.30 -0.84 -0.60 -0.35  0.10     4343     3088    1 #> pred[3: 2] -2.42 0.38 -3.17 -2.66 -2.41 -2.16 -1.68     3626     2831    1 #> pred[3: 3] -1.06 0.46 -1.95 -1.37 -1.06 -0.74 -0.17     2744     2788    1 #> pred[3: 5] -1.39 0.47 -2.30 -1.71 -1.40 -1.07 -0.47     1920     2547    1 plot(mix_pred_FE_studies) (mix_ranks <- posterior_ranks(mix_fit_FE)) #>         mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[4] 3.52 0.72    2   3   3   4     5     2034       NA    1 #> rank[1] 4.62 0.79    2   5   5   5     5     2043       NA    1 #> rank[2] 1.04 0.24    1   1   1   1     2     2359     2422    1 #> rank[3] 3.52 0.91    2   3   4   4     5     2879       NA    1 #> rank[5] 2.29 0.68    1   2   2   2     4     2311     2581    1 plot(mix_ranks) (mix_rankprobs <- posterior_rank_probs(mix_fit_FE)) #>      p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[4]      0.00      0.04      0.48      0.39      0.09 #> d[1]      0.00      0.04      0.07      0.11      0.78 #> d[2]      0.97      0.03      0.01      0.00      0.00 #> d[3]      0.00      0.16      0.27      0.44      0.12 #> d[5]      0.03      0.73      0.17      0.06      0.01 plot(mix_rankprobs) (mix_cumrankprobs <- posterior_rank_probs(mix_fit_FE, cumulative = TRUE)) #>      p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[4]      0.00      0.04      0.53      0.91         1 #> d[1]      0.00      0.04      0.11      0.22         1 #> d[2]      0.97      0.99      1.00      1.00         1 #> d[3]      0.00      0.16      0.43      0.88         1 #> d[5]      0.03      0.76      0.93      0.99         1 plot(mix_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_parkinsons.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Parkinson's disease","text":"Dias, S., N. J. Welton, . J. Sutton, . E. Ades. 2011. “NICE DSU Technical Support Document 2: Generalised Linear Modelling Framework Pair-Wise Network Meta-Analysis Randomised Controlled Trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"preparing-the-data","dir":"Articles","previous_headings":"","what":"Preparing the data","title":"Example: Plaque psoriasis ML-NMR","text":"need prepare data acceptable format run ML-NMR model. Firstly, need handle binary covariates prevsys psa. IPD, coded TRUE FALSE, AgD coded percentages (100). need transform sets variables numeric lie interval \\([0,1]\\), variables compatible across data sources. Whilst , also transform body surface area bsa (percentage) lie \\([0,1]\\), since make specifying appropriate marginal distribution easier later, rescale weight duration aid interpretation regression coefficients (terms 10 kilos 10 years respectively). also add trtclass variable, indicating treatments belong classes. Finally, check missing values IPD. small number individuals missing covariates: Since proportion missing data small, simply exclude individuals analysis.","code":"pso_ipd <- pso_ipd %>%    mutate(# Variable transformations          bsa = bsa / 100,          prevsys = as.numeric(prevsys),          psa = as.numeric(psa),          weight = weight / 10,          durnpso = durnpso / 10,          # Treatment classes          trtclass = case_when(trtn == 1 ~ \"Placebo\",                               trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                               trtn == 4 ~ \"TNFa blocker\"),          # Check complete cases for covariates of interest          complete = complete.cases(durnpso, prevsys, bsa, weight, psa)   )  pso_agd <- pso_agd %>%    mutate(     # Variable transformations     bsa_mean = bsa_mean / 100,     bsa_sd = bsa_sd / 100,     prevsys = prevsys / 100,     psa = psa / 100,     weight_mean = weight_mean / 10,     weight_sd = weight_sd / 10,     durnpso_mean = durnpso_mean / 10,     durnpso_sd = durnpso_sd / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                               trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                               trtn == 4 ~ \"TNFa blocker\")   ) sum(!pso_ipd$complete) #> [1] 4 mean(!pso_ipd$complete) #> [1] 0.001036807 pso_ipd <- filter(pso_ipd, complete)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"creating-the-network","dir":"Articles","previous_headings":"","what":"Creating the network","title":"Example: Plaque psoriasis ML-NMR","text":"Set network, setting IPD set_ipd(), AgD (arm-based) set_agd_arm(), combining together using combine_network(). specify binary pasi75 outcome r IPD, count outcome pasi75_r denominator pasi75_n r n AgD. specify treatment classes trt_class = trtclass. can produce network plot plot() method:","code":"pso_net <- combine_network(   set_ipd(pso_ipd,            study = studyc,            trt = trtc,            r = pasi75,           trt_class = trtclass),   set_agd_arm(pso_agd,                study = studyc,                trt = trtc,                r = pasi75_r,                n = pasi75_n,               trt_class = trtclass) )  pso_net #> A network with 3 IPD studies, and 1 AgD study (arm-based). #>  #> ------------------------------------------------------------------- IPD studies ----  #>  Study     Treatments                       #>  UNCOVER-1 3: IXE_Q2W | IXE_Q4W | PBO       #>  UNCOVER-2 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  UNCOVER-3 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  #>  Outcome type: binary #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study   Treatments                       #>  FIXTURE 4: ETN | PBO | SEC_150 | SEC_300 #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 6, in 3 classes #> Total number of studies: 4 #> Reference treatment is: PBO #> Network is connected plot(pso_net, weight_nodes = TRUE, weight_edges = TRUE, show_trt_class = TRUE) +    ggplot2::theme(legend.position = \"bottom\", legend.box = \"vertical\")"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"numerical-integration-for-ml-nmr","dir":"Articles","previous_headings":"","what":"Numerical integration for ML-NMR","title":"Example: Plaque psoriasis ML-NMR","text":"ML-NMR models define meta-regression model individual level, exactly manner full-IPD meta-regression. ML-NMR incorporates AgD model integrating individual-level model covariate distribution AgD study (Phillippo et al. 2020; Phillippo 2019). Using integration, instead simply “plugging-” mean covariate values AgD studies, avoids aggregation bias link function identity function. package utilises numerical integration incorporate aggregate data - specifically, quasi-Monte Carlo (QMC) integration Gaussian copula (Phillippo et al. 2020; Phillippo 2019). QMC integration general flexible integration approach, typically requires far fewer integration points standard (pseudo-random) Monte-Carlo integration achieve numerical accuracy.1 Gaussian copula allows us account correlations covariates, may specified marginal distributions. now set numerical integration network. five covariates consider adjusting body surface area bsa, duration psoriasis durnpso, previous systemic treatment prevsys, psoriatic arthritis psa, weight weight. need choose suitable marginal distributions covariates draw integration points . prevsys psa binary covariates, given Bernoulli distribution. bsa percentage, choose logit-Normal distribution (note, requires logitnorm package installed). choose Gamma distributions durnpso weight account skewness. choices seem match well marginal distributions observed IPD:  add integration points AgD studies network using add_integration() function. Marginal distributions covariate specified using distr() function, takes cumulative distribution function corresponding chosen marginal distribution, arguments distribution column names aggregate data. Since know correlations covariates AgD studies, impute weighted mean correlations IPD studies (default option). Note: package provides several convenience functions specifying distributions, including qgamma() allows parameterisation Gamma distribution terms mean standard deviation, qbern() provides Bernoulli distribution, qlogitnorm() provides logit-Normal distribution allowing parameterisation terms mean standard deviation (requires logitnorm package installed).","code":"# Get mean and sd of covariates in each study ipd_summary <- pso_ipd %>%    group_by(studyc) %>%    summarise_at(vars(weight, durnpso, bsa), list(mean = mean, sd = sd, min = min, max = max)) %>%    pivot_longer(weight_mean:bsa_max, names_sep = \"_\", names_to = c(\"covariate\", \".value\")) %>%    # Assign distributions   mutate(dist = recode(covariate,                        bsa = \"dlogitnorm\",                        durnpso = \"dgamma\",                        weight = \"dgamma\")) %>%    # Compute density curves   group_by(studyc, covariate) %>%    mutate(value = if_else(dist == \"dlogitnorm\",                          list(seq(0, 1, length.out = 101)),                          list(seq(min*0.8, max*1.2, length.out = 101)))) %>%    unnest(cols = value) %>%    mutate(dens = eval(call(first(dist), x = value, mean = first(mean), sd = first(sd))))  # Plot histograms and assumed densities pso_ipd %>%    pivot_longer(c(weight, durnpso, bsa), names_to = \"covariate\", values_to = \"value\") %>%  ggplot(aes(x = value)) +   geom_histogram(aes(y = stat(density)),                   binwidth = function(x) diff(range(x)) / nclass.Sturges(x),                  boundary = 0,                  fill = \"grey50\") +   geom_line(aes(y = dens), data = ipd_summary,             colour = \"darkred\", size = 0.5) +   facet_wrap(~studyc + covariate, scales = \"free\", ncol = 3) +   theme_multinma() pso_net <- add_integration(pso_net,   durnpso = distr(qgamma, mean = durnpso_mean, sd = durnpso_sd),   prevsys = distr(qbern, prob = prevsys),   bsa = distr(qlogitnorm, mean = bsa_mean, sd = bsa_sd),   weight = distr(qgamma, mean = weight_mean, sd = weight_sd),   psa = distr(qbern, prob = psa),   n_int = 1000 ) #> Using weighted average correlation matrix computed from IPD studies."},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"ml-nmr-models","dir":"Articles","previous_headings":"","what":"ML-NMR models","title":"Example: Plaque psoriasis ML-NMR","text":"fit fixed effect (FE) random effects (RE) ML-NMR models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"fixed-effect-ml-nmr","dir":"Articles","previous_headings":"","what":"Fixed effect ML-NMR","title":"Example: Plaque psoriasis ML-NMR","text":"First, fit FE ML-NMR model using function nma(). Following (Phillippo et al. 2020) specify weakly-informative \\(N(0, 10^2)\\) priors parameter. range parameter values implied prior distributions can checked using summary() method: regression model specified regression = ~(durnpso + prevsys + bsa + weight + psa)*.trt, include main (prognostic) effects covariate well interactions treatment. use probit link function (link = \"probit\"), specify two-parameter Binomial approximation aggregate-level likelihood used (likelihood = \"bernoulli2\", “bernoulli” refers individual-level likelihood, “2” denotes two-parameter adjustment aggregate-level likelihood) (Phillippo et al. 2020). utilise shared effect modifier assumption help identify model, setting treatment-covariate interactions equal within class (class_interactions = \"common\"). narrow possible range random initial values init_r = 0.1 (default init_r = 2), since probit models particular often hard initialise. Using QR decomposition (QR = TRUE) greatly improves sampling efficiency , often case regression models. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  Plots estimated numerical integration error produced using plot_integration_error() function:","code":"summary(normal(scale = 10)) #> A Normal prior distribution: location = 0, scale = 10. #> 50% of the prior density lies between -6.74 and 6.74. #> 95% of the prior density lies between -19.6 and 19.6. pso_fit_FE <- nma(pso_net,                    trt_effects = \"fixed\",                   link = \"probit\",                    likelihood = \"bernoulli2\",                   regression = ~(durnpso + prevsys + bsa + weight + psa)*.trt,                   class_interactions = \"common\",                   prior_intercept = normal(scale = 10),                   prior_trt = normal(scale = 10),                   prior_reg = normal(scale = 10),                   init_r = 0.1,                   QR = TRUE) #> Note: Setting \"PBO\" as the network reference treatment. print(pso_fit_FE) #> A fixed effects ML-NMR with a bernoulli2 likelihood (probit link). #> Regression model: ~(durnpso + prevsys + bsa + weight + psa) * .trt. #> Centred covariates at the following overall mean values: #>   durnpso   prevsys       bsa    weight       psa  #> 1.8259772 0.6496080 0.2917665 8.9328237 0.2167777  #> Inference for Stan model: binomial_2par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                         mean se_mean   sd     2.5%      25%      50%      75% #> beta[durnpso]                           0.04    0.00 0.06    -0.08     0.00     0.05     0.09 #> beta[prevsys]                          -0.13    0.00 0.16    -0.44    -0.24    -0.13    -0.03 #> beta[bsa]                              -0.06    0.01 0.45    -0.97    -0.36    -0.05     0.24 #> beta[weight]                            0.04    0.00 0.03    -0.02     0.02     0.04     0.06 #> beta[psa]                              -0.08    0.00 0.17    -0.41    -0.18    -0.07     0.04 #> beta[durnpso:.trtclassTNFa blocker]    -0.03    0.00 0.07    -0.17    -0.08    -0.03     0.02 #> beta[durnpso:.trtclassIL blocker]      -0.01    0.00 0.07    -0.14    -0.06    -0.01     0.03 #> beta[prevsys:.trtclassTNFa blocker]     0.18    0.00 0.18    -0.19     0.06     0.19     0.31 #> beta[prevsys:.trtclassIL blocker]       0.06    0.00 0.18    -0.29    -0.06     0.06     0.18 #> beta[bsa:.trtclassTNFa blocker]         0.05    0.01 0.53    -0.94    -0.32     0.03     0.39 #> beta[bsa:.trtclassIL blocker]           0.29    0.01 0.49    -0.63    -0.05     0.28     0.60 #> beta[weight:.trtclassTNFa blocker]     -0.17    0.00 0.04    -0.24    -0.19    -0.17    -0.14 #> beta[weight:.trtclassIL blocker]       -0.10    0.00 0.03    -0.16    -0.12    -0.10    -0.08 #> beta[psa:.trtclassTNFa blocker]        -0.06    0.00 0.20    -0.46    -0.19    -0.06     0.08 #> beta[psa:.trtclassIL blocker]           0.01    0.00 0.18    -0.35    -0.12     0.00     0.13 #> d[ETN]                                  1.55    0.00 0.08     1.39     1.50     1.55     1.61 #> d[IXE_Q2W]                              2.95    0.00 0.09     2.78     2.89     2.95     3.02 #> d[IXE_Q4W]                              2.54    0.00 0.08     2.39     2.49     2.54     2.60 #> d[SEC_150]                              2.14    0.00 0.11     1.93     2.07     2.14     2.22 #> d[SEC_300]                              2.45    0.00 0.12     2.23     2.38     2.45     2.53 #> lp__                                -1576.40    0.09 3.42 -1583.72 -1578.55 -1576.06 -1573.98 #>                                        97.5% n_eff Rhat #> beta[durnpso]                           0.16  5450    1 #> beta[prevsys]                           0.19  5288    1 #> beta[bsa]                               0.77  6205    1 #> beta[weight]                            0.09  5326    1 #> beta[psa]                               0.25  6489    1 #> beta[durnpso:.trtclassTNFa blocker]     0.11  5836    1 #> beta[durnpso:.trtclassIL blocker]       0.13  6500    1 #> beta[prevsys:.trtclassTNFa blocker]     0.54  5823    1 #> beta[prevsys:.trtclassIL blocker]       0.41  6662    1 #> beta[bsa:.trtclassTNFa blocker]         1.08  6736    1 #> beta[bsa:.trtclassIL blocker]           1.29  7988    1 #> beta[weight:.trtclassTNFa blocker]     -0.09  6452    1 #> beta[weight:.trtclassIL blocker]       -0.03  6097    1 #> beta[psa:.trtclassTNFa blocker]         0.34  7036    1 #> beta[psa:.trtclassIL blocker]           0.37  6884    1 #> d[ETN]                                  1.71  3899    1 #> d[IXE_Q2W]                              3.12  4157    1 #> d[IXE_Q4W]                              2.70  4388    1 #> d[SEC_150]                              2.37  5817    1 #> d[SEC_300]                              2.68  6155    1 #> lp__                                -1570.59  1443    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:02:09 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(pso_fit_FE, pars = c(\"d\", \"beta\", \"mu\")) plot_prior_posterior(pso_fit_FE, prior = c(\"intercept\", \"trt\", \"reg\")) plot_integration_error(pso_fit_FE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"random-effects-ml-nmr","dir":"Articles","previous_headings":"","what":"Random effects ML-NMR","title":"Example: Plaque psoriasis ML-NMR","text":"now fit RE model. , specify weakly-informative \\(N(0, 10^2)\\) priors parameter, now specify \\(\\textrm{half-N}(0, 2.5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). range parameter values implied prior distributions can checked using summary() method: Fitting model uses call nma() , except now trt_effects = \"random\". Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: number divergent transitions, can investigate using pairs() method:  divergent transition errors (red crosses) seem concentrated upper tail heterogeneity standard deviation parameter. suggests information identify heterogeneity parameter weak - four studies network - informative prior distribution might aid estimation. prior posterior distributions can compared visually using plot_prior_posterior() function:  Plots estimated numerical integration error produced using plot_integration_error() function:","code":"summary(normal(scale = 10)) #> A Normal prior distribution: location = 0, scale = 10. #> 50% of the prior density lies between -6.74 and 6.74. #> 95% of the prior density lies between -19.6 and 19.6. summary(half_normal(scale = 2.5)) #> A half-Normal prior distribution: location = 0, scale = 2.5. #> 50% of the prior density lies between 0 and 1.69. #> 95% of the prior density lies between 0 and 4.9. pso_fit_RE <- nma(pso_net,                    trt_effects = \"random\",                   link = \"probit\",                    likelihood = \"bernoulli2\",                   regression = ~(durnpso + prevsys + bsa + weight + psa)*.trt,                   class_interactions = \"common\",                   prior_intercept = normal(scale = 10),                   prior_trt = normal(scale = 10),                   prior_reg = normal(scale = 10),                   prior_het = half_normal(scale = 2.5),                   init_r = 0.1,                   QR = TRUE) #> Note: Setting \"PBO\" as the network reference treatment. #> Warning: There were 4 divergent transitions after warmup. See #> http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems print(pso_fit_RE) #> A random effects ML-NMR with a bernoulli2 likelihood (probit link). #> Regression model: ~(durnpso + prevsys + bsa + weight + psa) * .trt. #> Centred covariates at the following overall mean values: #>   durnpso   prevsys       bsa    weight       psa  #> 1.8259772 0.6496080 0.2917665 8.9328237 0.2167777  #> Inference for Stan model: binomial_2par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                         mean se_mean   sd     2.5%      25%      50%      75% #> beta[durnpso]                           0.05    0.00 0.06    -0.08     0.00     0.05     0.09 #> beta[prevsys]                          -0.12    0.00 0.16    -0.45    -0.24    -0.12    -0.01 #> beta[bsa]                              -0.09    0.01 0.45    -1.02    -0.39    -0.07     0.22 #> beta[weight]                            0.04    0.00 0.03    -0.02     0.02     0.04     0.06 #> beta[psa]                              -0.06    0.00 0.17    -0.41    -0.17    -0.06     0.05 #> beta[durnpso:.trtclassTNFa blocker]    -0.03    0.00 0.07    -0.17    -0.08    -0.03     0.02 #> beta[durnpso:.trtclassIL blocker]      -0.01    0.00 0.07    -0.15    -0.06    -0.02     0.03 #> beta[prevsys:.trtclassTNFa blocker]     0.18    0.00 0.19    -0.20     0.05     0.18     0.31 #> beta[prevsys:.trtclassIL blocker]       0.05    0.00 0.18    -0.31    -0.07     0.05     0.17 #> beta[bsa:.trtclassTNFa blocker]         0.08    0.01 0.52    -0.90    -0.27     0.07     0.43 #> beta[bsa:.trtclassIL blocker]           0.33    0.01 0.49    -0.63    -0.02     0.32     0.65 #> beta[weight:.trtclassTNFa blocker]     -0.17    0.00 0.04    -0.24    -0.20    -0.17    -0.15 #> beta[weight:.trtclassIL blocker]       -0.10    0.00 0.03    -0.17    -0.12    -0.10    -0.08 #> beta[psa:.trtclassTNFa blocker]        -0.07    0.00 0.21    -0.49    -0.22    -0.07     0.07 #> beta[psa:.trtclassIL blocker]          -0.01    0.00 0.19    -0.38    -0.14    -0.02     0.11 #> d[ETN]                                  1.56    0.00 0.15     1.28     1.47     1.55     1.64 #> d[IXE_Q2W]                              2.98    0.00 0.15     2.69     2.89     2.97     3.06 #> d[IXE_Q4W]                              2.56    0.00 0.14     2.28     2.47     2.55     2.64 #> d[SEC_150]                              2.13    0.00 0.22     1.67     2.00     2.13     2.25 #> d[SEC_300]                              2.44    0.00 0.22     2.00     2.31     2.44     2.56 #> lp__                                -1580.48    0.14 4.77 -1590.54 -1583.67 -1580.21 -1577.04 #> tau                                     0.18    0.00 0.12     0.01     0.10     0.16     0.24 #>                                        97.5% n_eff Rhat #> beta[durnpso]                           0.16  4412    1 #> beta[prevsys]                           0.20  3941    1 #> beta[bsa]                               0.77  2963    1 #> beta[weight]                            0.10  4261    1 #> beta[psa]                               0.27  3786    1 #> beta[durnpso:.trtclassTNFa blocker]     0.11  4425    1 #> beta[durnpso:.trtclassIL blocker]       0.11  4967    1 #> beta[prevsys:.trtclassTNFa blocker]     0.55  4309    1 #> beta[prevsys:.trtclassIL blocker]       0.39  4654    1 #> beta[bsa:.trtclassTNFa blocker]         1.13  3432    1 #> beta[bsa:.trtclassIL blocker]           1.31  3237    1 #> beta[weight:.trtclassTNFa blocker]     -0.10  4936    1 #> beta[weight:.trtclassIL blocker]       -0.04  4884    1 #> beta[psa:.trtclassTNFa blocker]         0.33  4070    1 #> beta[psa:.trtclassIL blocker]           0.36  4260    1 #> d[ETN]                                  1.86  2189    1 #> d[IXE_Q2W]                              3.27  1915    1 #> d[IXE_Q4W]                              2.85  2085    1 #> d[SEC_150]                              2.56  2884    1 #> d[SEC_300]                              2.89  2263    1 #> lp__                                -1571.96  1226    1 #> tau                                     0.46   697    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:11:31 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(pso_fit_RE, pars = c(\"d\", \"beta\", \"tau\", \"mu\", \"delta\")) pairs(pso_fit_RE, pars = c(\"delta[UNCOVER-2: ETN]\", \"d[ETN]\", \"tau\", \"lp__\")) plot_prior_posterior(pso_fit_RE, prior = c(\"intercept\", \"trt\", \"reg\", \"het\")) plot_integration_error(pso_fit_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model comparison","title":"Example: Plaque psoriasis ML-NMR","text":"model fit FE RE models can checked using dic() function. DIC similar FE RE models, suggesting little evidence residual heterogeneity.","code":"(pso_dic_FE <- dic(pso_fit_FE)) #> Residual deviance: 3129.6 (on 3858 data points) #>                pD: 24.3 #>               DIC: 3153.9 (pso_dic_RE <- dic(pso_fit_RE)) #> Residual deviance: 3123.9 (on 3858 data points) #>                pD: 28.1 #>               DIC: 3152"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: Plaque psoriasis ML-NMR","text":"Parameter estimates can plotted using plot() method, example examine estimated regression coefficients:  Plots posterior summaries based ggdist package, allows great degree flexibility, can customised using ggplot2 commands. command specify \"halfeye\" plot, shows posterior density along posterior medians (points) 95% Credible Intervals (thin line) 66% inner bands (thicker line) default. details plotting options see ?plot.nma_summary. can produce population-adjusted relative effects study population network using relative_effects() function.  Predicted probabilities achieving PASI 75 study population treatment produced using predict() method. argument type = \"reponse\" specifies want predicted probabilities, rather probit probabilities.  can produce population-adjusted ranks, rank probabilities, cumulative rank probabilities study population using posterior_ranks() posterior_rank_probs() functions (although ranks unchanged populations, distributions effect modifiers similar). specify lower_better = FALSE, since higher outcome better (higher chance achieving PASI 75).    estimates (relative effects, predictions, rankings) can also produced specific target population populations providing suitable newdata argument function (baseline distribution predict()). produce population-adjusted relative effects (corresponding rankings) chosen target population, require mean covariate values population. example, newdata provide following mean covariate values: Population-adjusted relative effects target population calculated using relative_effects() function, can plotted corresponding plot() method:  absolute predictions, require information full covariate distribution target population, just mean values. IPD available target population, newdata simply data frame IPD. AgD available target population, newdata must data frame added integration points created using add_integration() function. example, suppose aggregate target population introduced following covariate means standard deviations (continuous covariates) proportions (discrete covariates): add integration points data frame similar manner . , need supply correlation matrix joint covariate distribution; use weighted mean correlation matrix computed earlier IPD network, stored network object int_cor. Predicted probabilities achieving PASI 75 target population, given \\(N(-1.75, 0.08^2)\\) distribution baseline probit-probability response Placebo (reference levels covariates), produced using predict() method:","code":"plot(pso_fit_FE,      pars = \"beta\",      stat = \"halfeye\",      ref_line = 0) (pso_releff_FE <- relative_effects(pso_fit_FE)) #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                     mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[FIXTURE: ETN]     1.66 0.09 1.49 1.60 1.66 1.72  1.84     3563     2715    1 #> d[FIXTURE: IXE_Q2W] 3.03 0.10 2.84 2.96 3.03 3.10  3.22     3655     2873    1 #> d[FIXTURE: IXE_Q4W] 2.62 0.09 2.44 2.55 2.62 2.68  2.80     3918     3501    1 #> d[FIXTURE: SEC_150] 2.22 0.12 2.00 2.14 2.22 2.30  2.45     5342     3163    1 #> d[FIXTURE: SEC_300] 2.53 0.12 2.30 2.45 2.53 2.61  2.77     5667     3485    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                       mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[UNCOVER-1: ETN]     1.51 0.08 1.34 1.45 1.51 1.56  1.68     4277     3586    1 #> d[UNCOVER-1: IXE_Q2W] 2.92 0.09 2.75 2.86 2.92 2.98  3.09     4538     3524    1 #> d[UNCOVER-1: IXE_Q4W] 2.51 0.08 2.36 2.46 2.51 2.56  2.67     4730     3449    1 #> d[UNCOVER-1: SEC_150] 2.11 0.12 1.88 2.03 2.11 2.19  2.35     6082     3279    1 #> d[UNCOVER-1: SEC_300] 2.42 0.12 2.19 2.34 2.42 2.50  2.67     6431     3409    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                       mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[UNCOVER-2: ETN]     1.51 0.08 1.35 1.45 1.51 1.56  1.68     4453     3578    1 #> d[UNCOVER-2: IXE_Q2W] 2.92 0.09 2.75 2.86 2.92 2.98  3.09     4902     3207    1 #> d[UNCOVER-2: IXE_Q4W] 2.51 0.08 2.36 2.46 2.51 2.56  2.67     5281     3132    1 #> d[UNCOVER-2: SEC_150] 2.11 0.12 1.89 2.03 2.11 2.19  2.34     6210     3082    1 #> d[UNCOVER-2: SEC_300] 2.42 0.12 2.19 2.34 2.42 2.50  2.66     6618     3369    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                       mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[UNCOVER-3: ETN]     1.53 0.08 1.37 1.47 1.53 1.58  1.69     4544     3476    1 #> d[UNCOVER-3: IXE_Q2W] 2.94 0.09 2.77 2.88 2.94 3.00  3.11     4734     3270    1 #> d[UNCOVER-3: IXE_Q4W] 2.53 0.08 2.38 2.47 2.53 2.58  2.68     5193     2986    1 #> d[UNCOVER-3: SEC_150] 2.13 0.11 1.91 2.05 2.13 2.21  2.36     6131     3010    1 #> d[UNCOVER-3: SEC_300] 2.44 0.12 2.21 2.36 2.44 2.52  2.67     6620     3228    1 plot(pso_releff_FE, ref_line = 0) (pso_pred_FE <- predict(pso_fit_FE, type = \"response\")) #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #>                        mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[FIXTURE: PBO]     0.04 0.01 0.03 0.04 0.04 0.05  0.06     4257     2997    1 #> pred[FIXTURE: ETN]     0.46 0.02 0.41 0.44 0.46 0.47  0.51     7777     3390    1 #> pred[FIXTURE: IXE_Q2W] 0.89 0.02 0.85 0.88 0.89 0.90  0.92     6690     3480    1 #> pred[FIXTURE: IXE_Q4W] 0.80 0.03 0.75 0.78 0.80 0.81  0.84     7343     3399    1 #> pred[FIXTURE: SEC_150] 0.67 0.03 0.62 0.65 0.67 0.69  0.72     9668     3050    1 #> pred[FIXTURE: SEC_300] 0.77 0.02 0.72 0.76 0.77 0.79  0.81    10076     3005    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #>                          mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[UNCOVER-1: PBO]     0.06 0.01 0.04 0.05 0.06 0.06  0.08     5735     3289    1 #> pred[UNCOVER-1: ETN]     0.46 0.03 0.41 0.44 0.46 0.48  0.52     7588     3358    1 #> pred[UNCOVER-1: IXE_Q2W] 0.90 0.01 0.88 0.89 0.90 0.91  0.92     7649     2963    1 #> pred[UNCOVER-1: IXE_Q4W] 0.81 0.01 0.78 0.80 0.81 0.82  0.84     9920     3142    1 #> pred[UNCOVER-1: SEC_150] 0.69 0.04 0.60 0.66 0.69 0.72  0.76     7008     3341    1 #> pred[UNCOVER-1: SEC_300] 0.79 0.04 0.71 0.76 0.79 0.81  0.85     7431     3470    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #>                          mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[UNCOVER-2: PBO]     0.05 0.01 0.03 0.04 0.05 0.05  0.06     5266     3004    1 #> pred[UNCOVER-2: ETN]     0.42 0.02 0.38 0.41 0.42 0.43  0.46     9173     3341    1 #> pred[UNCOVER-2: IXE_Q2W] 0.88 0.01 0.86 0.87 0.88 0.89  0.90     7350     3091    1 #> pred[UNCOVER-2: IXE_Q4W] 0.78 0.02 0.75 0.77 0.78 0.79  0.81     7792     2915    1 #> pred[UNCOVER-2: SEC_150] 0.65 0.04 0.57 0.62 0.65 0.68  0.73     7150     3074    1 #> pred[UNCOVER-2: SEC_300] 0.75 0.04 0.68 0.73 0.76 0.78  0.82     7001     3691    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #>                          mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[UNCOVER-3: PBO]     0.08 0.01 0.06 0.07 0.08 0.08  0.10     6041     3252    1 #> pred[UNCOVER-3: ETN]     0.53 0.02 0.49 0.52 0.53 0.54  0.57     8236     3026    1 #> pred[UNCOVER-3: IXE_Q2W] 0.93 0.01 0.91 0.92 0.93 0.93  0.94     7771     3367    1 #> pred[UNCOVER-3: IXE_Q4W] 0.85 0.01 0.83 0.85 0.85 0.86  0.88     8762     2320    1 #> pred[UNCOVER-3: SEC_150] 0.75 0.03 0.68 0.72 0.75 0.77  0.81     7842     3074    1 #> pred[UNCOVER-3: SEC_300] 0.83 0.03 0.77 0.81 0.83 0.85  0.88     7528     3551    1 plot(pso_pred_FE, ref_line = c(0, 1)) (pso_ranks_FE <- posterior_ranks(pso_fit_FE, lower_better = FALSE)) #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                        mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[FIXTURE: PBO]     6.00 0.00    6   6   6   6     6       NA       NA   NA #> rank[FIXTURE: ETN]     5.00 0.00    5   5   5   5     5       NA       NA   NA #> rank[FIXTURE: IXE_Q2W] 1.00 0.00    1   1   1   1     1       NA       NA   NA #> rank[FIXTURE: IXE_Q4W] 2.24 0.43    2   2   2   2     3     4288       NA    1 #> rank[FIXTURE: SEC_150] 4.00 0.05    4   4   4   4     4     3513       NA    1 #> rank[FIXTURE: SEC_300] 2.76 0.43    2   3   3   3     3     4309     3513    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                          mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[UNCOVER-1: PBO]     6.00 0.00    6   6   6   6     6       NA       NA   NA #> rank[UNCOVER-1: ETN]     5.00 0.00    5   5   5   5     5       NA       NA   NA #> rank[UNCOVER-1: IXE_Q2W] 1.00 0.00    1   1   1   1     1       NA       NA   NA #> rank[UNCOVER-1: IXE_Q4W] 2.24 0.43    2   2   2   2     3     4288       NA    1 #> rank[UNCOVER-1: SEC_150] 4.00 0.05    4   4   4   4     4     3513       NA    1 #> rank[UNCOVER-1: SEC_300] 2.76 0.43    2   3   3   3     3     4309     3513    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                          mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[UNCOVER-2: PBO]     6.00 0.00    6   6   6   6     6       NA       NA   NA #> rank[UNCOVER-2: ETN]     5.00 0.00    5   5   5   5     5       NA       NA   NA #> rank[UNCOVER-2: IXE_Q2W] 1.00 0.00    1   1   1   1     1       NA       NA   NA #> rank[UNCOVER-2: IXE_Q4W] 2.24 0.43    2   2   2   2     3     4288       NA    1 #> rank[UNCOVER-2: SEC_150] 4.00 0.05    4   4   4   4     4     3513       NA    1 #> rank[UNCOVER-2: SEC_300] 2.76 0.43    2   3   3   3     3     4309     3513    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                          mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[UNCOVER-3: PBO]     6.00 0.00    6   6   6   6     6       NA       NA   NA #> rank[UNCOVER-3: ETN]     5.00 0.00    5   5   5   5     5       NA       NA   NA #> rank[UNCOVER-3: IXE_Q2W] 1.00 0.00    1   1   1   1     1       NA       NA   NA #> rank[UNCOVER-3: IXE_Q4W] 2.24 0.43    2   2   2   2     3     4288       NA    1 #> rank[UNCOVER-3: SEC_150] 4.00 0.05    4   4   4   4     4     3513       NA    1 #> rank[UNCOVER-3: SEC_300] 2.76 0.43    2   3   3   3     3     4309     3513    1 plot(pso_ranks_FE) (pso_rankprobs_FE <- posterior_rank_probs(pso_fit_FE, lower_better = FALSE)) #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                     p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[FIXTURE: PBO]             0      0.00      0.00         0         0         1 #> d[FIXTURE: ETN]             0      0.00      0.00         0         1         0 #> d[FIXTURE: IXE_Q2W]         1      0.00      0.00         0         0         0 #> d[FIXTURE: IXE_Q4W]         0      0.76      0.24         0         0         0 #> d[FIXTURE: SEC_150]         0      0.00      0.00         1         0         0 #> d[FIXTURE: SEC_300]         0      0.24      0.76         0         0         0 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[UNCOVER-1: PBO]             0      0.00      0.00         0         0         1 #> d[UNCOVER-1: ETN]             0      0.00      0.00         0         1         0 #> d[UNCOVER-1: IXE_Q2W]         1      0.00      0.00         0         0         0 #> d[UNCOVER-1: IXE_Q4W]         0      0.76      0.24         0         0         0 #> d[UNCOVER-1: SEC_150]         0      0.00      0.00         1         0         0 #> d[UNCOVER-1: SEC_300]         0      0.24      0.76         0         0         0 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[UNCOVER-2: PBO]             0      0.00      0.00         0         0         1 #> d[UNCOVER-2: ETN]             0      0.00      0.00         0         1         0 #> d[UNCOVER-2: IXE_Q2W]         1      0.00      0.00         0         0         0 #> d[UNCOVER-2: IXE_Q4W]         0      0.76      0.24         0         0         0 #> d[UNCOVER-2: SEC_150]         0      0.00      0.00         1         0         0 #> d[UNCOVER-2: SEC_300]         0      0.24      0.76         0         0         0 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[UNCOVER-3: PBO]             0      0.00      0.00         0         0         1 #> d[UNCOVER-3: ETN]             0      0.00      0.00         0         1         0 #> d[UNCOVER-3: IXE_Q2W]         1      0.00      0.00         0         0         0 #> d[UNCOVER-3: IXE_Q4W]         0      0.76      0.24         0         0         0 #> d[UNCOVER-3: SEC_150]         0      0.00      0.00         1         0         0 #> d[UNCOVER-3: SEC_300]         0      0.24      0.76         0         0         0 plot(pso_rankprobs_FE) (pso_cumrankprobs_FE <- posterior_rank_probs(pso_fit_FE, lower_better = FALSE, cumulative = TRUE)) #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                     p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[FIXTURE: PBO]             0      0.00         0         0         0         1 #> d[FIXTURE: ETN]             0      0.00         0         0         1         1 #> d[FIXTURE: IXE_Q2W]         1      1.00         1         1         1         1 #> d[FIXTURE: IXE_Q4W]         0      0.76         1         1         1         1 #> d[FIXTURE: SEC_150]         0      0.00         0         1         1         1 #> d[FIXTURE: SEC_300]         0      0.24         1         1         1         1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[UNCOVER-1: PBO]             0      0.00         0         0         0         1 #> d[UNCOVER-1: ETN]             0      0.00         0         0         1         1 #> d[UNCOVER-1: IXE_Q2W]         1      1.00         1         1         1         1 #> d[UNCOVER-1: IXE_Q4W]         0      0.76         1         1         1         1 #> d[UNCOVER-1: SEC_150]         0      0.00         0         1         1         1 #> d[UNCOVER-1: SEC_300]         0      0.24         1         1         1         1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[UNCOVER-2: PBO]             0      0.00         0         0         0         1 #> d[UNCOVER-2: ETN]             0      0.00         0         0         1         1 #> d[UNCOVER-2: IXE_Q2W]         1      1.00         1         1         1         1 #> d[UNCOVER-2: IXE_Q4W]         0      0.76         1         1         1         1 #> d[UNCOVER-2: SEC_150]         0      0.00         0         1         1         1 #> d[UNCOVER-2: SEC_300]         0      0.24         1         1         1         1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[UNCOVER-3: PBO]             0      0.00         0         0         0         1 #> d[UNCOVER-3: ETN]             0      0.00         0         0         1         1 #> d[UNCOVER-3: IXE_Q2W]         1      1.00         1         1         1         1 #> d[UNCOVER-3: IXE_Q4W]         0      0.76         1         1         1         1 #> d[UNCOVER-3: SEC_150]         0      0.00         0         1         1         1 #> d[UNCOVER-3: SEC_300]         0      0.24         1         1         1         1 plot(pso_cumrankprobs_FE) new_agd_means <- tibble(   bsa = 0.6,   prevsys = 0.1,   psa = 0.2,   weight = 10,   durnpso = 3) (pso_releff_FE_new <- relative_effects(pso_fit_FE, newdata = new_agd_means)) #> ------------------------------------------------------------------ Study: New 1 ----  #>  #> Covariate values: #>  durnpso prevsys bsa weight psa #>        3     0.1 0.6     10 0.2 #>  #>                   mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[New 1: ETN]     1.25 0.23 0.82 1.10 1.25 1.40  1.71     6705     3628    1 #> d[New 1: IXE_Q2W] 2.89 0.22 2.46 2.74 2.89 3.03  3.32     7539     3559    1 #> d[New 1: IXE_Q4W] 2.48 0.21 2.07 2.33 2.47 2.62  2.90     8350     3691    1 #> d[New 1: SEC_150] 2.08 0.22 1.66 1.93 2.08 2.22  2.52     7273     3755    1 #> d[New 1: SEC_300] 2.39 0.22 1.96 2.23 2.39 2.54  2.83     7671     3160    1 plot(pso_releff_FE_new, ref_line = 0) new_agd_int <- tibble(   bsa_mean = 0.6,   bsa_sd = 0.3,   prevsys = 0.1,   psa = 0.2,   weight_mean = 10,   weight_sd = 1,   durnpso_mean = 3,   durnpso_sd = 1 ) new_agd_int <- add_integration(new_agd_int,   durnpso = distr(qgamma, mean = durnpso_mean, sd = durnpso_sd),   prevsys = distr(qbern, prob = prevsys),   bsa = distr(qlogitnorm, mean = bsa_mean, sd = bsa_sd),   weight = distr(qgamma, mean = weight_mean, sd = weight_sd),   psa = distr(qbern, prob = psa),   cor = pso_net$int_cor,   n_int = 1000) (pso_pred_FE_new <- predict(pso_fit_FE,                              type = \"response\",                             newdata = new_agd_int,                             baseline = distr(qnorm, -1.75, 0.08))) #> ------------------------------------------------------------------ Study: New 1 ----  #>  #>                      mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[New 1: PBO]     0.06 0.02 0.03 0.04 0.06 0.07  0.12     5548     3438    1 #> pred[New 1: ETN]     0.37 0.06 0.26 0.33 0.37 0.41  0.48     6059     3604    1 #> pred[New 1: IXE_Q2W] 0.90 0.03 0.84 0.88 0.90 0.92  0.94     4574     3352    1 #> pred[New 1: IXE_Q4W] 0.81 0.04 0.73 0.78 0.81 0.83  0.87     4640     3170    1 #> pred[New 1: SEC_150] 0.68 0.05 0.57 0.65 0.68 0.72  0.78     5291     3694    1 #> pred[New 1: SEC_300] 0.78 0.05 0.68 0.75 0.78 0.81  0.87     5577     3689    1 plot(pso_pred_FE_new, ref_line = c(0, 1))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_plaque_psoriasis.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Plaque psoriasis ML-NMR","text":"Caflisch, R. E. 1998. “Monte Carlo Quasi-Monte Carlo Methods.” Acta Numerica 7: 1–49. https://doi.org/10.1017/S0962492900002804. Gordon, K. B., . Blauvelt, K. . Papp, R. G. Langley, T. Luger, M. Ohtsuki, K. Reich, et al. 2016. “Phase 3 Trials Ixekizumab Moderate--Severe Plaque Psoriasis.” New England Journal Medicine 375 (4): 345–56. https://doi.org/10.1056/nejmoa1512711. Griffiths, C. E. M., K. Reich, M. Lebwohl, P. van de Kerkhof, C. Paul, . Menter, G. S. Cameron, et al. 2015. “Comparison Ixekizumab Etanercept Placebo Moderate--Severe Psoriasis (UNCOVER-2 UNCOVER-3): Results Two Phase 3 Randomised Trials.” Lancet 386 (9993): 541–51. https://doi.org/10.1016/s0140-6736(15)60125-8. Langley, R. G., B. E. Elewski, M. Lebwohl, K. Reich, C. E. M. Griffiths, K. Papp, L. Puig, et al. 2014. “Secukinumab Plaque Psoriasis — Results Two Phase 3 Trials.” New England Journal Medicine 371 (4): 326–38. https://doi.org/10.1056/nejmoa1314258. Niederreiter, H. 1978. “Quasi-Monte Carlo Methods Pseudo-Random Numbers.” Bulletin American Mathematical Society 84 (6): 957–1041. https://doi.org/10.1090/S0002-9904-1978-14532-7. Phillippo, D. M. 2019. “Calibration Treatment Effects Network Meta-Analysis Using Individual Patient Data.” PhD thesis, University Bristol. Phillippo, D. M., S. Dias, . E. Ades, M. Belger, . Brnabic, . Schacht, D. Saure, Z. Kadziola, N. J. Welton. 2020. “Multilevel Network Meta-Regression Population-Adjusted Treatment Comparisons.” Journal Royal Statistical Society: Series (Statistics Society) 183 (3): 1189–1210. https://doi.org/10.1111/rssa.12579.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_smoking.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Smoking cessation","text":"begin setting network. arm-level count data giving number quitting smoking (r) total (n) arm, use function set_agd_arm(). Treatment “intervention” set network reference treatment. Plot network structure.","code":"smknet <- set_agd_arm(smoking,                        study = studyn,                       trt = trtc,                       r = r,                        n = n,                       trt_ref = \"No intervention\") smknet #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected plot(smknet, weight_edges = TRUE, weight_nodes = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_smoking.html","id":"random-effects-nma","dir":"Articles","previous_headings":"","what":"Random effects NMA","title":"Example: Smoking cessation","text":"Following TSD 4, fit random effects NMA model, using nma() function trt_effects = \"random\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), \\(\\textrm{half-N}(5^2)\\) prior distribution -study heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. default, use Binomial likelihood logit link function, auto-detected data. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  default, displays model parameters given prior distributions (case \\(d_k\\), \\(\\mu_j\\), \\(\\tau\\)), may changed using prior argument:  Model fit can checked using dic() function residual deviance contributions examined corresponding plot() method  Overall model fit seems adequate, almost points showing good fit (mean residual deviance contribution 1). two points higher residual deviance (.e. worse fit) correspond two zero counts data:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. smkfit <- nma(smknet,                trt_effects = \"random\",               prior_intercept = normal(scale = 100),               prior_trt = normal(scale = 100),               prior_het = normal(scale = 5)) smkfit #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                               mean se_mean   sd     2.5%      25%      50%      75%    97.5% #> d[Group counselling]          1.08    0.01 0.44     0.23     0.79     1.08     1.37     1.95 #> d[Individual counselling]     0.84    0.01 0.24     0.39     0.68     0.83     0.99     1.34 #> d[Self-help]                  0.49    0.01 0.41    -0.30     0.22     0.49     0.76     1.31 #> lp__                      -5767.93    0.21 6.58 -5781.69 -5772.17 -5767.71 -5763.19 -5756.21 #> tau                           0.84    0.01 0.19     0.55     0.71     0.81     0.95     1.32 #>                           n_eff Rhat #> d[Group counselling]       1648    1 #> d[Individual counselling]  1197    1 #> d[Self-help]               1416    1 #> lp__                        951    1 #> tau                        1168    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:14:01 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(smkfit, pars = c(\"d\", \"tau\", \"mu\", \"delta\")) plot_prior_posterior(smkfit) plot_prior_posterior(smkfit, prior = \"het\") (dic_consistency <- dic(smkfit)) #> Residual deviance: 54 (on 50 data points) #>                pD: 43.8 #>               DIC: 97.9 plot(dic_consistency) smoking[smoking$r == 0, ] #>    studyn trtn            trtc r  n #> 13      6    1 No intervention 0 33 #> 31     15    1 No intervention 0 20"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_smoking.html","id":"checking-for-inconsistency","dir":"Articles","previous_headings":"","what":"Checking for inconsistency","title":"Example: Smoking cessation","text":"fit unrelated mean effects (UME) model (Dias et al. 2011) assess consistency assumption. , use function nma(), now argument consistency = \"ume\". Comparing model fit statistics see little choose two models. However, also important examine individual contributions model fit data point two models (-called “dev-dev” plot). Passing two nma_dic objects produced dic() function plot() method produces dev-dev plot:  points lie roughly line equality, evidence inconsistency .","code":"smkfit_ume <- nma(smknet,                    consistency = \"ume\",                   trt_effects = \"random\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100),                   prior_het = normal(scale = 5)) smkfit_ume #> A random effects NMA with a binomial likelihood (logit link). #> An inconsistency model ('ume') was fitted. #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                                     mean se_mean   sd     2.5%      25% #> d[Group counselling vs. No intervention]            1.09    0.02 0.80    -0.45     0.56 #> d[Individual counselling vs. No intervention]       0.89    0.01 0.27     0.38     0.71 #> d[Self-help vs. No intervention]                    0.32    0.01 0.59    -0.85    -0.06 #> d[Individual counselling vs. Group counselling]    -0.30    0.01 0.61    -1.52    -0.69 #> d[Self-help vs. Group counselling]                 -0.61    0.01 0.71    -2.03    -1.07 #> d[Self-help vs. Individual counselling]             0.14    0.02 1.05    -1.96    -0.53 #> lp__                                            -5765.29    0.21 6.32 -5778.85 -5769.35 #> tau                                                 0.94    0.01 0.23     0.59     0.78 #>                                                      50%      75%    97.5% n_eff Rhat #> d[Group counselling vs. No intervention]            1.06     1.60     2.76  2319 1.00 #> d[Individual counselling vs. No intervention]       0.88     1.06     1.45  1046 1.01 #> d[Self-help vs. No intervention]                    0.32     0.71     1.46  1741 1.00 #> d[Individual counselling vs. Group counselling]    -0.31     0.09     0.96  2330 1.00 #> d[Self-help vs. Group counselling]                 -0.62    -0.16     0.83  2292 1.00 #> d[Self-help vs. Individual counselling]             0.14     0.82     2.26  2610 1.00 #> lp__                                            -5764.85 -5760.82 -5754.31   920 1.00 #> tau                                                 0.90     1.06     1.48   963 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:14:19 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). dic_consistency #> Residual deviance: 54 (on 50 data points) #>                pD: 43.8 #>               DIC: 97.9 (dic_ume <- dic(smkfit_ume)) #> Residual deviance: 53.8 (on 50 data points) #>                pD: 45 #>               DIC: 98.8 plot(dic_consistency, dic_ume, point_alpha = 0.5, interval_alpha = 0.2)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_smoking.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: Smoking cessation","text":"Pairwise relative effects, pairwise contrasts all_contrasts = TRUE.  Treatment rankings, rank probabilities, cumulative rank probabilities. set lower_better = FALSE since higher log odds cessation better (outcome positive).","code":"(smk_releff <- relative_effects(smkfit, all_contrasts = TRUE)) #>                                                  mean   sd  2.5%   25%   50%   75% 97.5% #> d[Group counselling vs. No intervention]         1.08 0.44  0.23  0.79  1.08  1.37  1.95 #> d[Individual counselling vs. No intervention]    0.84 0.24  0.39  0.68  0.83  0.99  1.34 #> d[Self-help vs. No intervention]                 0.49 0.41 -0.30  0.22  0.49  0.76  1.31 #> d[Individual counselling vs. Group counselling] -0.24 0.42 -1.08 -0.53 -0.25  0.03  0.58 #> d[Self-help vs. Group counselling]              -0.59 0.49 -1.59 -0.90 -0.58 -0.28  0.34 #> d[Self-help vs. Individual counselling]         -0.35 0.42 -1.17 -0.61 -0.34 -0.08  0.47 #>                                                 Bulk_ESS Tail_ESS Rhat #> d[Group counselling vs. No intervention]            1629     2307    1 #> d[Individual counselling vs. No intervention]       1197     1876    1 #> d[Self-help vs. No intervention]                    1446     2264    1 #> d[Individual counselling vs. Group counselling]     2792     2806    1 #> d[Self-help vs. Group counselling]                  2964     2983    1 #> d[Self-help vs. Individual counselling]             2229     2798    1 plot(smk_releff, ref_line = 0) (smk_ranks <- posterior_ranks(smkfit, lower_better = FALSE)) #>                              mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[No intervention]        3.88 0.33    3   4   4   4     4     2395       NA    1 #> rank[Group counselling]      1.38 0.63    1   1   1   2     3     3072     3263    1 #> rank[Individual counselling] 1.92 0.64    1   2   2   2     3     2722       NA    1 #> rank[Self-help]              2.82 0.70    1   3   3   3     4     2503       NA    1 plot(smk_ranks) (smk_rankprobs <- posterior_rank_probs(smkfit, lower_better = FALSE)) #>                           p_rank[1] p_rank[2] p_rank[3] p_rank[4] #> d[No intervention]             0.00      0.00      0.11      0.89 #> d[Group counselling]           0.69      0.24      0.06      0.00 #> d[Individual counselling]      0.25      0.58      0.17      0.00 #> d[Self-help]                   0.06      0.17      0.66      0.11 plot(smk_rankprobs) (smk_cumrankprobs <- posterior_rank_probs(smkfit, lower_better = FALSE, cumulative = TRUE)) #>                           p_rank[1] p_rank[2] p_rank[3] p_rank[4] #> d[No intervention]             0.00      0.00      0.11         1 #> d[Group counselling]           0.69      0.93      1.00         1 #> d[Individual counselling]      0.25      0.83      1.00         1 #> d[Self-help]                   0.06      0.23      0.89         1 plot(smk_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_smoking.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Smoking cessation","text":"Dias, S., N. J. Welton, . J. Sutton, D. M. Caldwell, G. Lu, . E. Ades. 2011. “NICE DSU Technical Support Document 4: Inconsistency Networks Evidence Based Randomised Controlled Trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Hasselblad, V. 1998. “Meta-Analysis Multitreatment Studies.” Medical Decision Making 18 (1): 37–43. https://doi.org/10.1177/0272989x9801800110.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_statins.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Statins for cholesterol lowering","text":"data giving number deaths (r) total (n) arm, use function set_agd_arm() set network. set placebo network reference treatment. prevention variable statins data frame automatically available use meta-regression model.","code":"statin_net <- set_agd_arm(statins,                            study = studyc,                           trt = trtc,                           r = r,                            n = n,                           trt_ref = \"Placebo\") statin_net #> A network with 19 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study     Treatments          #>  4S        2: Placebo | Statin #>  Bestehorn 2: Placebo | Statin #>  Brown     2: Placebo | Statin #>  CCAIT     2: Placebo | Statin #>  Downs     2: Placebo | Statin #>  EXCEL     2: Placebo | Statin #>  Furberg   2: Placebo | Statin #>  Haskell   2: Placebo | Statin #>  Jones     2: Placebo | Statin #>  KAPS      2: Placebo | Statin #>  ... plus 9 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 2 #> Total number of studies: 19 #> Reference treatment is: Placebo #> Network is connected"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_statins.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: Statins for cholesterol lowering","text":"fit fixed effect (FE) random effects (RE) models, meta-regression binary covariate prevention.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_statins.html","id":"fixed-effect-meta-regression","dir":"Articles","previous_headings":"Meta-analysis models","what":"Fixed effect meta-regression","title":"Example: Statins for cholesterol lowering","text":"start fitting FE model. use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effect \\(d_\\mathrm{Statin}\\), study-specific intercepts \\(\\mu_j\\), regression coefficient \\(\\beta\\). can examine range parameter values implied prior distributions summary() method: model fitted nma() function, fixed effect model specified trt_effects = \"fixed\". regression formula ~ .trt:prevention means interaction primary/secondary prevention treatment included; .trt special variable indicates treatment, prevention original data set. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. statin_fit_FE <- nma(statin_net,                       trt_effects = \"fixed\",                      regression = ~.trt:prevention,                      prior_intercept = normal(scale = 100),                      prior_trt = normal(scale = 100),                      prior_reg = normal(scale = 100)) #> Note: No treatment classes specified in network, any interactions in `regression` formula will be separate (independent) for each treatment. #> Use set_*() argument `trt_class` and nma() argument `class_interactions` to change this. statin_fit_FE #> A fixed effects NMA with a binomial likelihood (logit link). #> Regression model: ~.trt:prevention. #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                          mean se_mean   sd     2.5%      25%      50%      75% #> beta[.trtStatin:preventionSecondary]    -0.20    0.00 0.11    -0.41    -0.28    -0.20    -0.13 #> d[Statin]                               -0.11    0.00 0.10    -0.30    -0.17    -0.11    -0.04 #> lp__                                 -7246.68    0.09 3.36 -7254.11 -7248.69 -7246.36 -7244.34 #>                                         97.5% n_eff Rhat #> beta[.trtStatin:preventionSecondary]     0.01  2279    1 #> d[Statin]                                0.08  2288    1 #> lp__                                 -7241.14  1522    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:14:36 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(statin_fit_FE, pars = c(\"d\", \"beta\", \"mu\")) plot_prior_posterior(statin_fit_FE, prior = c(\"trt\", \"reg\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_statins.html","id":"random-effects-meta-regression","dir":"Articles","previous_headings":"Meta-analysis models","what":"Random effects meta-regression","title":"Example: Statins for cholesterol lowering","text":"now fit RE model. use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effect \\(d_\\mathrm{Statin}\\), study-specific intercepts \\(\\mu_j\\), regression coefficient \\(\\beta\\). use \\(\\textrm{half-N}(0, 5^2)\\) prior distribution heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: , model fitted nma() function, now trt_effects = \"random\". increase adapt_delta 0.99 remove small number divergent transition errors (default RE models set 0.95). Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. statin_fit_RE <- nma(statin_net,                       trt_effects = \"random\",                      regression = ~.trt:prevention,                      prior_intercept = normal(scale = 100),                      prior_trt = normal(scale = 100),                      prior_reg = normal(scale = 100),                      prior_het = half_normal(scale = 5),                      adapt_delta = 0.99) #> Note: No treatment classes specified in network, any interactions in `regression` formula will be separate (independent) for each treatment. #> Use set_*() argument `trt_class` and nma() argument `class_interactions` to change this. statin_fit_RE #> A random effects NMA with a binomial likelihood (logit link). #> Regression model: ~.trt:prevention. #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                          mean se_mean   sd     2.5%      25%      50%      75% #> beta[.trtStatin:preventionSecondary]    -0.30    0.01 0.27    -0.89    -0.43    -0.28    -0.15 #> d[Statin]                               -0.07    0.01 0.20    -0.46    -0.18    -0.07     0.04 #> lp__                                 -7255.56    0.17 5.22 -7266.14 -7258.97 -7255.41 -7251.88 #> tau                                      0.25    0.01 0.20     0.01     0.10     0.20     0.34 #>                                         97.5% n_eff Rhat #> beta[.trtStatin:preventionSecondary]     0.22   914 1.00 #> d[Statin]                                0.35   907 1.00 #> lp__                                 -7246.05   911 1.00 #> tau                                      0.78   498 1.01 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:14:49 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(statin_fit_RE, pars = c(\"d\", \"beta\", \"mu\", \"delta\")) plot_prior_posterior(statin_fit_RE, prior = c(\"trt\", \"reg\", \"het\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_statins.html","id":"model-fit-and-comparison","dir":"Articles","previous_headings":"","what":"Model fit and comparison","title":"Example: Statins for cholesterol lowering","text":"Model fit can checked using dic() function: DIC similar FE RE models, might choose FE model based parsimony. residual deviance statistics larger number data points, suggesting data points fit well. can also examine residual deviance contributions corresponding plot() method.   number studies fit well either model, posterior mean residual deviance contributions greater 1, investigated see substantive differences studies.","code":"(statin_dic_FE <- dic(statin_fit_FE)) #> Residual deviance: 46 (on 38 data points) #>                pD: 21.7 #>               DIC: 67.7 (statin_dic_RE <- dic(statin_fit_RE)) #> Residual deviance: 42.3 (on 38 data points) #>                pD: 24.9 #>               DIC: 67.2 plot(statin_dic_FE) plot(statin_dic_RE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_statins.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: Statins for cholesterol lowering","text":"can produce estimates relative effect statins vs. placebo either primary secondary prevention, using relative_effects() function. newdata argument specifies data frame containing levels covariate prevention interested , study argument used specify column newdata informative label. plot() method may used visually compare estimates:  Model parameters may plotted corresponding plot() method:  Whilst 95% Credible Interval includes zero, suggestion statins effective secondary prevention.","code":"statin_releff_FE <- relative_effects(statin_fit_FE,                                      newdata = data.frame(prevention = c(\"Primary\", \"Secondary\")),                                      study = prevention)  statin_releff_FE #> ---------------------------------------------------------------- Study: Primary ----  #>  #> Covariate values: #>  prevention #>     Primary #>  #>                     mean  sd 2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[Primary: Statin] -0.11 0.1 -0.3 -0.17 -0.11 -0.04  0.08     2300     2897    1 #>  #> -------------------------------------------------------------- Study: Secondary ----  #>  #> Covariate values: #>  prevention #>   Secondary #>  #>                       mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[Secondary: Statin] -0.31 0.05 -0.42 -0.35 -0.31 -0.28 -0.21     4132     3313    1 plot(statin_releff_FE,       ref_line = 0) plot(statin_fit_FE,       pars = \"beta\",       ref_line = 0,      stat = \"halfeye\")"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_statins.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Statins for cholesterol lowering","text":"Dias, S., . J. Sutton, N. J. Welton, . E. Ades. 2011. “NICE DSU Technical Support Document 3: Heterogeneity: Subgroups, Meta-Regression, Bias Bias-Adjustment.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_thrombolytics.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: Thrombolytic treatments","text":"begin setting network. arm-level count data giving number deaths (r) total (n) arm, use function set_agd_arm(). default, SK set network reference treatment. Plot network structure.","code":"thrombo_net <- set_agd_arm(thrombolytics,                             study = studyn,                            trt = trtc,                            r = r,                             n = n) thrombo_net #> A network with 50 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                   #>  1     3: SK | Acc t-PA | SK + t-PA #>  2     2: SK | t-PA                 #>  3     2: SK | t-PA                 #>  4     2: SK | t-PA                 #>  5     2: SK | t-PA                 #>  6     3: SK | t-PA | ASPAC         #>  7     2: SK | t-PA                 #>  8     2: SK | t-PA                 #>  9     2: SK | t-PA                 #>  10    2: SK | SK + t-PA            #>  ... plus 40 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 9 #> Total number of studies: 50 #> Reference treatment is: SK #> Network is connected plot(thrombo_net, weight_edges = TRUE, weight_nodes = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_thrombolytics.html","id":"fixed-effects-nma","dir":"Articles","previous_headings":"","what":"Fixed effects NMA","title":"Example: Thrombolytic treatments","text":"Following TSD 4 (Dias et al. 2011), fit fixed effects NMA model, using nma() function trt_effects = \"fixed\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\). can examine range parameter values implied prior distributions summary() method: model fitted using nma() function. default, use Binomial likelihood logit link function, auto-detected data. Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  Model fit can checked using dic() function residual deviance contributions examined corresponding plot() method.  number points well fit model, posterior mean residual deviance contributions greater 1.","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. thrombo_fit <- nma(thrombo_net,                     trt_effects = \"fixed\",                    prior_intercept = normal(scale = 100),                    prior_trt = normal(scale = 100)) #> Note: Setting \"SK\" as the network reference treatment. thrombo_fit #> A fixed effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                   mean se_mean   sd      2.5%       25%       50%       75%     97.5% n_eff #> d[Acc t-PA]      -0.18    0.00 0.04     -0.27     -0.21     -0.18     -0.15     -0.09  2102 #> d[ASPAC]          0.02    0.00 0.04     -0.05     -0.01      0.02      0.04      0.09  5115 #> d[PTCA]          -0.48    0.00 0.10     -0.68     -0.55     -0.48     -0.41     -0.29  3528 #> d[r-PA]          -0.13    0.00 0.06     -0.24     -0.17     -0.13     -0.09     -0.01  2912 #> d[SK + t-PA]     -0.05    0.00 0.05     -0.14     -0.08     -0.05     -0.02      0.04  4493 #> d[t-PA]           0.00    0.00 0.03     -0.06     -0.02      0.00      0.02      0.06  4183 #> d[TNK]           -0.17    0.00 0.08     -0.32     -0.23     -0.17     -0.12     -0.02  2992 #> d[UK]            -0.20    0.00 0.22     -0.65     -0.35     -0.20     -0.05      0.24  4707 #> lp__         -43043.08    0.15 5.55 -43054.79 -43046.53 -43042.77 -43039.15 -43033.37  1307 #>              Rhat #> d[Acc t-PA]  1.00 #> d[ASPAC]     1.00 #> d[PTCA]      1.00 #> d[r-PA]      1.00 #> d[SK + t-PA] 1.00 #> d[t-PA]      1.00 #> d[TNK]       1.00 #> d[UK]        1.00 #> lp__         1.01 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:15:05 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(thrombo_fit, pars = c(\"d\", \"mu\")) plot_prior_posterior(thrombo_fit, prior = \"trt\") (dic_consistency <- dic(thrombo_fit)) #> Residual deviance: 106.3 (on 102 data points) #>                pD: 59.1 #>               DIC: 165.5 plot(dic_consistency)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_thrombolytics.html","id":"checking-for-inconsistency","dir":"Articles","previous_headings":"","what":"Checking for inconsistency","title":"Example: Thrombolytic treatments","text":"fit unrelated mean effects (UME) model (Dias et al. 2011) assess consistency assumption. , use function nma(), now argument consistency = \"ume\". Comparing model fit statistics Whilst UME model fits data better, lower residual deviance, additional parameters UME model mean DIC similar models. However, also important examine individual contributions model fit data point two models (-called “dev-dev” plot). Passing two nma_dic objects produced dic() function plot() method produces dev-dev plot:  four points lying lower right corner plot much lower posterior mean residual deviance UME model, indicating data potentially inconsistent. points correspond trials 44 45, two trials comparing Acc t-PA ASPAC. ASPAC vs. Acc t-PA estimates different consistency model inconsistency (UME) model, suggesting two trials may systematically different others network.","code":"thrombo_fit_ume <- nma(thrombo_net,                    consistency = \"ume\",                   trt_effects = \"fixed\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100)) #> Note: Setting \"SK\" as the network reference treatment. thrombo_fit_ume #> A fixed effects NMA with a binomial likelihood (logit link). #> An inconsistency model ('ume') was fitted. #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                            mean se_mean   sd      2.5%       25%       50%       75%     97.5% #> d[Acc t-PA vs. SK]        -0.16    0.00 0.05     -0.25     -0.19     -0.16     -0.13     -0.06 #> d[ASPAC vs. SK]            0.00    0.00 0.04     -0.07     -0.02      0.00      0.03      0.07 #> d[PTCA vs. SK]            -0.66    0.00 0.19     -1.03     -0.79     -0.66     -0.53     -0.30 #> d[r-PA vs. SK]            -0.06    0.00 0.09     -0.24     -0.12     -0.06      0.00      0.12 #> d[SK + t-PA vs. SK]       -0.04    0.00 0.05     -0.14     -0.08     -0.05     -0.01      0.05 #> d[t-PA vs. SK]             0.00    0.00 0.03     -0.06     -0.02     -0.01      0.02      0.05 #> d[UK vs. SK]              -0.39    0.01 0.52     -1.45     -0.72     -0.37     -0.04      0.62 #> d[ASPAC vs. Acc t-PA]      1.40    0.01 0.41      0.64      1.12      1.38      1.67      2.24 #> d[PTCA vs. Acc t-PA]      -0.22    0.00 0.12     -0.45     -0.30     -0.22     -0.14      0.02 #> d[r-PA vs. Acc t-PA]       0.02    0.00 0.07     -0.10     -0.02      0.02      0.06      0.15 #> d[TNK vs. Acc t-PA]        0.01    0.00 0.06     -0.12     -0.04      0.00      0.05      0.13 #> d[UK vs. Acc t-PA]         0.14    0.01 0.36     -0.54     -0.10      0.14      0.38      0.86 #> d[t-PA vs. ASPAC]          0.29    0.01 0.36     -0.40      0.04      0.29      0.53      1.00 #> d[t-PA vs. PTCA]           0.54    0.01 0.44     -0.29      0.25      0.54      0.83      1.44 #> d[UK vs. t-PA]            -0.31    0.00 0.35     -0.99     -0.54     -0.31     -0.07      0.35 #> lp__                  -43039.67    0.14 5.73 -43051.69 -43043.44 -43039.34 -43035.58 -43029.29 #>                       n_eff Rhat #> d[Acc t-PA vs. SK]     5596    1 #> d[ASPAC vs. SK]        5295    1 #> d[PTCA vs. SK]         4758    1 #> d[r-PA vs. SK]         5205    1 #> d[SK + t-PA vs. SK]    5157    1 #> d[t-PA vs. SK]         4335    1 #> d[UK vs. SK]           5337    1 #> d[ASPAC vs. Acc t-PA]  3801    1 #> d[PTCA vs. Acc t-PA]   4653    1 #> d[r-PA vs. Acc t-PA]   4396    1 #> d[TNK vs. Acc t-PA]    5927    1 #> d[UK vs. Acc t-PA]     4169    1 #> d[t-PA vs. ASPAC]      4065    1 #> d[t-PA vs. PTCA]       3526    1 #> d[UK vs. t-PA]         5233    1 #> lp__                   1592    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:15:18 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). dic_consistency #> Residual deviance: 106.3 (on 102 data points) #>                pD: 59.1 #>               DIC: 165.5 (dic_ume <- dic(thrombo_fit_ume)) #> Residual deviance: 99.5 (on 102 data points) #>                pD: 65.7 #>               DIC: 165.2 plot(dic_consistency, dic_ume, show_uncertainty = FALSE)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_thrombolytics.html","id":"further-results","dir":"Articles","previous_headings":"","what":"Further results","title":"Example: Thrombolytic treatments","text":"Relative effects pairwise contrasts treatments can produced using relative_effects() function, all_contrasts = TRUE.  Treatment rankings, rank probabilities, cumulative rank probabilities.","code":"(thrombo_releff <- relative_effects(thrombo_fit, all_contrasts = TRUE)) #>                            mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[Acc t-PA vs. SK]        -0.18 0.04 -0.27 -0.21 -0.18 -0.15 -0.09     2134     2792    1 #> d[ASPAC vs. SK]            0.02 0.04 -0.05 -0.01  0.02  0.04  0.09     5161     3288    1 #> d[PTCA vs. SK]            -0.48 0.10 -0.68 -0.55 -0.48 -0.41 -0.29     3567     3704    1 #> d[r-PA vs. SK]            -0.13 0.06 -0.24 -0.17 -0.13 -0.09 -0.01     2933     3374    1 #> d[SK + t-PA vs. SK]       -0.05 0.05 -0.14 -0.08 -0.05 -0.02  0.04     4503     3201    1 #> d[t-PA vs. SK]             0.00 0.03 -0.06 -0.02  0.00  0.02  0.06     4212     3372    1 #> d[TNK vs. SK]             -0.17 0.08 -0.32 -0.23 -0.17 -0.12 -0.02     3032     3217    1 #> d[UK vs. SK]              -0.20 0.22 -0.65 -0.35 -0.20 -0.05  0.24     4757     3702    1 #> d[ASPAC vs. Acc t-PA]      0.20 0.06  0.08  0.16  0.20  0.23  0.31     3158     3016    1 #> d[PTCA vs. Acc t-PA]      -0.30 0.10 -0.49 -0.37 -0.30 -0.23 -0.12     5276     3540    1 #> d[r-PA vs. Acc t-PA]       0.05 0.06 -0.05  0.02  0.05  0.09  0.17     5413     3569    1 #> d[SK + t-PA vs. Acc t-PA]  0.13 0.05  0.02  0.09  0.13  0.17  0.23     5714     3619    1 #> d[t-PA vs. Acc t-PA]       0.18 0.05  0.08  0.15  0.18  0.22  0.28     2847     2949    1 #> d[TNK vs. Acc t-PA]        0.00 0.06 -0.12 -0.04  0.00  0.05  0.13     5184     3818    1 #> d[UK vs. Acc t-PA]        -0.02 0.22 -0.46 -0.17 -0.02  0.13  0.42     4923     3463    1 #> d[PTCA vs. ASPAC]         -0.49 0.11 -0.71 -0.57 -0.49 -0.42 -0.29     3823     3467    1 #> d[r-PA vs. ASPAC]         -0.14 0.07 -0.28 -0.19 -0.14 -0.10 -0.01     3691     2726    1 #> d[SK + t-PA vs. ASPAC]    -0.07 0.06 -0.18 -0.11 -0.07 -0.03  0.05     5084     3003    1 #> d[t-PA vs. ASPAC]         -0.01 0.04 -0.09 -0.04 -0.01  0.01  0.06     7515     3385    1 #> d[TNK vs. ASPAC]          -0.19 0.08 -0.35 -0.25 -0.19 -0.13 -0.02     3173     3108    1 #> d[UK vs. ASPAC]           -0.22 0.23 -0.67 -0.37 -0.22 -0.07  0.23     4829     3787    1 #> d[r-PA vs. PTCA]           0.35 0.11  0.14  0.28  0.35  0.43  0.57     5493     3642    1 #> d[SK + t-PA vs. PTCA]      0.43 0.11  0.22  0.35  0.43  0.50  0.64     4642     3440    1 #> d[t-PA vs. PTCA]           0.48 0.11  0.28  0.41  0.48  0.55  0.69     3802     3513    1 #> d[TNK vs. PTCA]            0.30 0.12  0.08  0.22  0.30  0.39  0.54     6278     3607    1 #> d[UK vs. PTCA]             0.28 0.24 -0.20  0.12  0.27  0.44  0.76     4882     3363    1 #> d[SK + t-PA vs. r-PA]      0.08 0.07 -0.06  0.03  0.08  0.12  0.22     5232     2968    1 #> d[t-PA vs. r-PA]           0.13 0.07  0.00  0.08  0.13  0.17  0.26     3424     3172    1 #> d[TNK vs. r-PA]           -0.05 0.08 -0.21 -0.10 -0.05  0.01  0.11     6258     3215    1 #> d[UK vs. r-PA]            -0.07 0.23 -0.53 -0.23 -0.08  0.08  0.37     4931     3588    1 #> d[t-PA vs. SK + t-PA]      0.05 0.05 -0.05  0.02  0.05  0.09  0.16     4959     3427    1 #> d[TNK vs. SK + t-PA]      -0.12 0.08 -0.28 -0.18 -0.12 -0.07  0.03     5157     3057    1 #> d[UK vs. SK + t-PA]       -0.15 0.23 -0.60 -0.30 -0.15  0.00  0.29     4960     3721    1 #> d[TNK vs. t-PA]           -0.18 0.08 -0.33 -0.23 -0.18 -0.12 -0.02     3321     3231    1 #> d[UK vs. t-PA]            -0.20 0.22 -0.64 -0.35 -0.20 -0.06  0.24     4830     3849    1 #> d[UK vs. TNK]             -0.03 0.23 -0.49 -0.18 -0.02  0.13  0.43     4793     3519    1 plot(thrombo_releff, ref_line = 0) (thrombo_ranks <- posterior_ranks(thrombo_fit)) #>                 mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[SK]        7.46 0.97    6   7   7   8     9     3696       NA    1 #> rank[Acc t-PA]  3.19 0.82    2   3   3   4     5     4055     3075    1 #> rank[ASPAC]     7.98 1.12    5   7   8   9     9     4764       NA    1 #> rank[PTCA]      1.13 0.35    1   1   1   1     2     4147     4033    1 #> rank[r-PA]      4.38 1.16    2   4   4   5     7     5051     3404    1 #> rank[SK + t-PA] 5.96 1.20    4   5   6   6     9     4525       NA    1 #> rank[t-PA]      7.50 1.09    5   7   8   8     9     4115       NA    1 #> rank[TNK]       3.46 1.24    2   3   3   4     6     4673     3233    1 #> rank[UK]        3.94 2.71    1   2   3   6     9     4562       NA    1 plot(thrombo_ranks) (thrombo_rankprobs <- posterior_rank_probs(thrombo_fit)) #>              p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] p_rank[7] p_rank[8] #> d[SK]             0.00      0.00      0.00      0.00      0.02      0.13      0.39      0.31 #> d[Acc t-PA]       0.00      0.21      0.44      0.30      0.05      0.00      0.00      0.00 #> d[ASPAC]          0.00      0.00      0.00      0.00      0.02      0.09      0.19      0.26 #> d[PTCA]           0.87      0.13      0.00      0.00      0.00      0.00      0.00      0.00 #> d[r-PA]           0.00      0.06      0.15      0.31      0.38      0.08      0.01      0.01 #> d[SK + t-PA]      0.00      0.00      0.01      0.06      0.25      0.46      0.10      0.06 #> d[t-PA]           0.00      0.00      0.00      0.00      0.03      0.14      0.29      0.33 #> d[TNK]            0.00      0.24      0.32      0.24      0.14      0.03      0.01      0.01 #> d[UK]             0.13      0.37      0.07      0.07      0.11      0.06      0.02      0.03 #>              p_rank[9] #> d[SK]             0.16 #> d[Acc t-PA]       0.00 #> d[ASPAC]          0.43 #> d[PTCA]           0.00 #> d[r-PA]           0.01 #> d[SK + t-PA]      0.05 #> d[t-PA]           0.20 #> d[TNK]            0.00 #> d[UK]             0.15 plot(thrombo_rankprobs) (thrombo_cumrankprobs <- posterior_rank_probs(thrombo_fit, cumulative = TRUE)) #>              p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] p_rank[7] p_rank[8] #> d[SK]             0.00      0.00      0.00      0.00      0.02      0.15      0.53      0.84 #> d[Acc t-PA]       0.00      0.21      0.65      0.95      1.00      1.00      1.00      1.00 #> d[ASPAC]          0.00      0.00      0.00      0.00      0.03      0.12      0.31      0.57 #> d[PTCA]           0.87      1.00      1.00      1.00      1.00      1.00      1.00      1.00 #> d[r-PA]           0.00      0.06      0.21      0.52      0.89      0.97      0.98      0.99 #> d[SK + t-PA]      0.00      0.00      0.01      0.08      0.33      0.79      0.89      0.95 #> d[t-PA]           0.00      0.00      0.00      0.00      0.04      0.18      0.47      0.80 #> d[TNK]            0.00      0.24      0.56      0.81      0.95      0.99      0.99      1.00 #> d[UK]             0.13      0.49      0.57      0.64      0.75      0.80      0.83      0.85 #>              p_rank[9] #> d[SK]                1 #> d[Acc t-PA]          1 #> d[ASPAC]             1 #> d[PTCA]              1 #> d[r-PA]              1 #> d[SK + t-PA]         1 #> d[t-PA]              1 #> d[TNK]               1 #> d[UK]                1 plot(thrombo_cumrankprobs)"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_thrombolytics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: Thrombolytic treatments","text":"Boland, ., Y. Dundar, . Bagust, . Haycox, R. Hill, R. Mujica Mota, T. Walley, R. Dickson. 2003. “Early Thrombolysis Treatment Acute Myocardial Infarction: Systematic Review Economic Evaluation.” Health Technology Assessment 7 (15). https://doi.org/10.3310/hta7150. Dias, S., N. J. Welton, . J. Sutton, D. M. Caldwell, G. Lu, . E. Ades. 2011. “NICE DSU Technical Support Document 4: Inconsistency Networks Evidence Based Randomised Controlled Trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Lu, G. B., . E. Ades. 2006. “Assessing Evidence Inconsistency Mixed Treatment Comparisons.” Journal American Statistical Association 101 (474): 447–59. https://doi.org/10.1198/016214505000001302.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_transfusion.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"Setting up the network","title":"Example: White blood cell transfusion","text":"begin setting network - just pairwise meta-analysis. arm-level count data giving number deaths (r) total (n) arm, use function set_agd_arm(). set “Control” reference treatment.","code":"tr_net <- set_agd_arm(transfusion,                             study = studyc,                            trt = trtc,                            r = r,                             n = n,                            trt_ref = \"Control\") tr_net #> A network with 6 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study         Treatments               #>  Bow 1984      2: Transfusion | Control #>  Herzig 1977   2: Transfusion | Control #>  Higby 1975    2: Transfusion | Control #>  Scali 1978    2: Transfusion | Control #>  Vogler 1977   2: Transfusion | Control #>  Winston 1982a 2: Transfusion | Control #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 2 #> Total number of studies: 6 #> Reference treatment is: Control #> Network is connected"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_transfusion.html","id":"meta-analysis-models","dir":"Articles","previous_headings":"","what":"Meta-analysis models","title":"Example: White blood cell transfusion","text":"fit two random effects models, first non-informative prior heterogeneity, using informative prior described Turner et al. (2012).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_transfusion.html","id":"random-effects-meta-analysis-with-non-informative-heterogeneity-prior","dir":"Articles","previous_headings":"Meta-analysis models","what":"Random effects meta-analysis with non-informative heterogeneity prior","title":"Example: White blood cell transfusion","text":"fit random effects model using nma() function trt_effects = \"random\". use \\(\\mathrm{N}(0, 100^2)\\) prior distributions treatment effects \\(d_k\\) study-specific intercepts \\(\\mu_j\\), non-informative \\(\\textrm{half-N}(5^2)\\) prior heterogeneity standard deviation \\(\\tau\\). can examine range parameter values implied prior distributions summary() method: Fitting RE model Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  posterior distribution heterogeneity variance \\(\\tau^2\\) summarised ","code":"summary(normal(scale = 100)) #> A Normal prior distribution: location = 0, scale = 100. #> 50% of the prior density lies between -67.45 and 67.45. #> 95% of the prior density lies between -196 and 196. summary(half_normal(scale = 5)) #> A half-Normal prior distribution: location = 0, scale = 5. #> 50% of the prior density lies between 0 and 3.37. #> 95% of the prior density lies between 0 and 9.8. tr_fit_RE_noninf <- nma(tr_net,                          trt_effects = \"random\",                         prior_intercept = normal(scale = 100),                         prior_trt = normal(scale = 100),                         prior_het = half_normal(scale = 5)) tr_fit_RE_noninf #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                   mean se_mean   sd    2.5%     25%     50%     75%   97.5% n_eff Rhat #> d[Transfusion]   -1.15    0.05 1.08   -3.32   -1.63   -1.07   -0.56    0.62   511 1.01 #> lp__           -134.26    0.09 3.15 -141.56 -136.10 -133.90 -131.97 -129.13  1257 1.00 #> tau               1.87    0.04 1.04    0.57    1.17    1.63    2.31    4.71   816 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:15:36 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(tr_fit_RE_noninf, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(tr_fit_RE_noninf, prior = \"het\") noninf_tau <- as.array(tr_fit_RE_noninf, pars = \"tau\") noninf_tausq <- noninf_tau^2 names(noninf_tausq) <- \"tausq\" summary(noninf_tausq) #>       mean sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> tausq  4.6  6 0.32 1.38 2.65 5.32 22.17     1091      879    1"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_transfusion.html","id":"random-effects-meta-analysis-with-informative-heterogeneity-prior","dir":"Articles","previous_headings":"Meta-analysis models","what":"Random effects meta-analysis with informative heterogeneity prior","title":"Example: White blood cell transfusion","text":"Keeping rest model setup , now use informative \\(\\textrm{log-N}(-3.93, 1.51^2)\\) prior heterogeneity variance \\(\\tau^2\\). can examine range parameter values implied prior distribution summary() method: Fitting RE model, specify log_normal prior distribution prior_het argument, set prior_het_type = \"var\" indicate prior distribution variance scale (instead standard deviation, default). Basic parameter summaries given print() method: default, summaries study-specific intercepts \\(\\mu_j\\) study-specific relative effects \\(\\delta_{jk}\\) hidden, examined changing pars argument: prior posterior distributions can compared visually using plot_prior_posterior() function:  Note: heterogeneity variance \\(\\tau^2\\) plotted since prior specified \\(\\tau^2\\). posterior distribution heterogeneity variance \\(\\tau^2\\) summarised ","code":"summary(log_normal(-3.93, 1.51)) #> A log-Normal prior distribution: location = -3.93, scale = 1.51. #> 50% of the prior density lies between 0.01 and 0.05. #> 95% of the prior density lies between 0 and 0.38. tr_fit_RE_inf <- nma(tr_net,                       trt_effects = \"random\",                      prior_intercept = normal(scale = 100),                      prior_trt = normal(scale = 100),                      prior_het = log_normal(-3.93, 1.51),                      prior_het_type = \"var\") tr_fit_RE_inf #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                   mean se_mean   sd    2.5%     25%     50%     75%   97.5% n_eff Rhat #> d[Transfusion]   -0.77    0.01 0.43   -1.67   -1.02   -0.74   -0.48    0.05  2024    1 #> lp__           -140.27    0.08 2.88 -146.76 -141.90 -139.92 -138.22 -135.57  1378    1 #> tau               0.48    0.01 0.35    0.05    0.21    0.41    0.68    1.31  1383    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 14:15:40 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # Not run print(tr_fit_RE_inf, pars = c(\"d\", \"mu\", \"delta\")) plot_prior_posterior(tr_fit_RE_inf, prior = \"het\") inf_tau <- as.array(tr_fit_RE_inf, pars = \"tau\") inf_tausq <- inf_tau^2 names(inf_tausq) <- \"tausq\" summary(inf_tausq) #>       mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> tausq 0.35 0.51    0 0.04 0.17 0.46   1.7     1267     2474    1"},{"path":"https://dmphillippo.github.io/multinma/dev/articles/example_transfusion.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example: White blood cell transfusion","text":"Stanworth, S., E. Massey, C. Hyde, S. J. Brunskill, C. Navarette, G. Lucas, D. Marks, U. Paulus. 2005. “Granulocyte Transfusions Treating Infections Patients Neutropenia Neutrophil Dysfunction.” Cochrane Database Systematic Reviews, . 3. https://doi.org/10.1002/14651858.CD005339. Turner, R. M., J. Davey, M. J. Clarke, S. G. Thompson, J. P. T. Higgins. 2012. “Predicting Extent Heterogeneity Meta-Analysis, Using Empirical Data Cochrane Database Systematic Reviews.” International Journal Epidemiology 41 (3): 818–27. https://doi.org/10.1093/ije/dys041.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/articles/vignette_overview.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Overview of Examples","text":"Cooper, N. J., . J. Sutton, D. Morris, . E. Ades, N. J. Welton. 2009. “Addressing -Study Heterogeneity Inconsistency Mixed Treatment Comparisons: Application Stroke Prevention Treatments Individuals Non-Rheumatic Atrial Fibrillation.” Statistics Medicine 28 (14): 1861–81. https://doi.org/10.1002/sim.3594. Dias, S., N. J. Welton, . J. Sutton, D. M. Caldwell, G. Lu, S. Reken, . E. Ades. 2011. “NICE DSU Technical Support Documents 1-7: Evidence Synthesis Decision Making.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Phillippo, D. M., S. Dias, . E. Ades, M. Belger, . Brnabic, . Schacht, D. Saure, Z. Kadziola, N. J. Welton. 2020. “Multilevel Network Meta-Regression Population-Adjusted Treatment Comparisons.” Journal Royal Statistical Society: Series (Statistics Society) 183 (3): 1189–1210. https://doi.org/10.1111/rssa.12579. Turner, R. M., J. Davey, M. J. Clarke, S. G. Thompson, J. P. T. Higgins. 2012. “Predicting Extent Heterogeneity Meta-Analysis, Using Empirical Data Cochrane Database Systematic Reviews.” International Journal Epidemiology 41 (3): 818–27. https://doi.org/10.1093/ije/dys041.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David M. Phillippo. Author, maintainer.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Phillippo DM (????). multinma: Network Meta-Analysis Individual Aggregate Data Stan. doi: 10.5281/zenodo.3904454, R package version 0.3.0.9000, https://dmphillippo.github.io/multinma/. Phillippo DM, Dias S, Ades AE, Belger M, Brnabic , Schacht , Saure D, Kadziola Z, Welton NJ (2020). “Multilevel Network Meta-Regression population-adjusted treatment comparisons.” Journal Royal Statistical Society: Series (Statistics Society), 183(3), 1189-1210. doi: 10.1111/rssa.12579.","code":"@Manual{,   title = {multinma: Network Meta-Analysis of Individual and Aggregate Data in Stan},   author = {David M. Phillippo},   note = {R package version 0.3.0.9000},   url = {https://dmphillippo.github.io/multinma/},   doi = {10.5281/zenodo.3904454}, } @Article{,   title = {Multilevel Network Meta-Regression for population-adjusted treatment comparisons},   author = {David M. Phillippo and Sofia Dias and A. E. Ades and Mark Belger and Alan Brnabic and Alexander Schacht and Daniel Saure and Zbigniew Kadziola and Nicky J. Welton},   year = {2020},   doi = {10.1111/rssa.12579},   journal = {Journal of the Royal Statistical Society: Series A (Statistics in Society)},   volume = {183},   number = {3},   pages = {1189-1210}, }"},{"path":"https://dmphillippo.github.io/multinma/dev/index.html","id":"multinma-network-meta-analysis-of-individual-and-aggregate-data-in-stan-","dir":"","previous_headings":"","what":"Bayesian network meta-analysis of individual and aggregate data","title":"Bayesian network meta-analysis of individual and aggregate data","text":"multinma package implements network meta-analysis, network meta-regression, multilevel network meta-regression models combine evidence network studies treatments using either aggregate data individual patient data study (Phillippo et al. 2020; Phillippo 2019). Models estimated Bayesian framework using Stan (Carpenter et al. 2017).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian network meta-analysis of individual and aggregate data","text":"can install released version multinma CRAN : development version GitHub : Installing source (either CRAN GitHub) requires rstan package installed configured. See installation guide .","code":"install.packages(\"multinma\") # install.packages(\"devtools\") devtools::install_github(\"dmphillippo/multinma\")"},{"path":"https://dmphillippo.github.io/multinma/dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Bayesian network meta-analysis of individual and aggregate data","text":"good place start package vignettes walk example analyses, see vignette(\"vignette_overview\") overview. series NICE Technical Support Documents evidence synthesis gives detailed introduction network meta-analysis: Dias, S. et al. (2011). “NICE DSU Technical Support Documents 1-7: Evidence Synthesis Decision Making.” National Institute Health Care Excellence. Available http://nicedsu.org.uk/. Multilevel network meta-regression set following methods paper: Phillippo, D. M. et al. (2020). “Multilevel Network Meta-Regression population-adjusted treatment comparisons.” Journal Royal Statistical Society: Series (Statistics Society), 183(3):1189-1210. doi: 10.1111/rssa.12579.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/index.html","id":"citing-multinma","dir":"","previous_headings":"","what":"Citing multinma","title":"Bayesian network meta-analysis of individual and aggregate data","text":"multinma package can cited follows: Phillippo, D. M. (2021). multinma: Network Meta-Analysis Individual Aggregate Data Stan. R package version 0.3.0.9000, doi: 10.5281/zenodo.3904454. fitting ML-NMR models, please cite methods paper: Phillippo, D. M. et al. (2020). “Multilevel Network Meta-Regression population-adjusted treatment comparisons.” Journal Royal Statistical Society: Series (Statistics Society), 183(3):1189-1210. doi: 10.1111/rssa.12579.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Bayesian network meta-analysis of individual and aggregate data","text":"Carpenter, B., . Gelman, M. D. Hoffman, D. Lee, B. Goodrich, M. Betancourt, M. Brubaker, J. Guo, P. Li, . Riddell. 2017. “Stan: Probabilistic Programming Language.” Journal Statistical Software 76 (1). https://doi.org/10.18637/jss.v076.i01. Phillippo, D. M. 2019. “Calibration Treatment Effects Network Meta-Analysis Using Individual Patient Data.” PhD thesis, University Bristol. Phillippo, D. M., S. Dias, . E. Ades, M. Belger, . Brnabic, . Schacht, D. Saure, Z. Kadziola, N. J. Welton. 2020. “Multilevel Network Meta-Regression Population-Adjusted Treatment Comparisons.” Journal Royal Statistical Society: Series (Statistics Society) 183 (3): 1189–1210. https://doi.org/10.1111/rssa.12579.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/Bernoulli.html","id":null,"dir":"Reference","previous_headings":"","what":"The Bernoulli Distribution — qbern","title":"The Bernoulli Distribution — qbern","text":"quantile function qbern Bernoulli distribution, success probability prob. equivalent qbinom(p, 1, prob).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/Bernoulli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Bernoulli Distribution — qbern","text":"","code":"qbern(p, prob, lower.tail = TRUE, log.p = FALSE)  pbern(q, prob, lower.tail = TRUE, log.p = FALSE)  dbern(x, prob, log = FALSE)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/Bernoulli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Bernoulli Distribution — qbern","text":"p vector probabilities prob probability success lower.tail, log.p, log see stats::Binomial x, q vector quantiles","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/GammaDist.html","id":null,"dir":"Reference","previous_headings":"","what":"The Gamma distribution — qgamma","title":"The Gamma distribution — qgamma","text":"provide convenient extensions [dpq]gamma functions, allow distribution specified terms mean standard deviation, instead shape rate/scale.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/GammaDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Gamma distribution — qgamma","text":"","code":"qgamma(   p,   shape,   rate = 1,   scale = 1/rate,   lower.tail = TRUE,   log.p = FALSE,   mean,   sd )  dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE, mean, sd)  pgamma(   q,   shape,   rate = 1,   scale = 1/rate,   lower.tail = TRUE,   log.p = FALSE,   mean,   sd )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/GammaDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Gamma distribution — qgamma","text":"p vector probabilities shape, rate, scale, log, lower.tail, log.p see stats::GammaDist mean, sd mean standard deviation, overriding shape rate scale specified x, q vector quantiles","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_pso_mlnmr.html","id":null,"dir":"Reference","previous_headings":"","what":"Example plaque psoriasis ML-NMR — example_pso_mlnmr","title":"Example plaque psoriasis ML-NMR — example_pso_mlnmr","text":"Calling example(\"example_pso_mlnmr\") run ML-NMR model plaque psoriasis IPD AgD, using code Examples section . resulting stan_nma object pso_fit available global environment.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_pso_mlnmr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example plaque psoriasis ML-NMR — example_pso_mlnmr","text":"Plaque psoriasis ML-NMR use examples.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_pso_mlnmr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example plaque psoriasis ML-NMR — example_pso_mlnmr","text":"","code":"# Set up plaque psoriasis network combining IPD and AgD library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union pso_ipd <- filter(plaque_psoriasis_ipd,                   studyc %in% c(\"UNCOVER-1\", \"UNCOVER-2\", \"UNCOVER-3\"))  pso_agd <- filter(plaque_psoriasis_agd,                   studyc == \"FIXTURE\")  head(pso_ipd) #>      studyc      trtc_long    trtc trtn pasi75 pasi90 pasi100 age  bmi pasi_w0 #> 1 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  34 32.2    18.2 #> 2 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  64 41.9    23.4 #> 3 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       0  42 26.2    12.8 #> 4 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  45 52.9    36.0 #> 5 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  67 22.9    20.9 #> 6 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       1  57 22.4    18.2 #>    male bsa weight durnpso prevsys   psa #> 1  TRUE  18   98.1     6.7    TRUE  TRUE #> 2  TRUE  33  129.6    14.5   FALSE  TRUE #> 3  TRUE  33   78.0    26.5    TRUE FALSE #> 4 FALSE  50  139.9    25.0    TRUE  TRUE #> 5 FALSE  35   54.2    11.9    TRUE FALSE #> 6  TRUE  29   67.5    15.2    TRUE FALSE head(pso_agd) #>    studyc          trtc_long    trtc trtn pasi75_r pasi75_n pasi90_r pasi90_n #> 1 FIXTURE         Etanercept     ETN    4      142      323       67      323 #> 2 FIXTURE            Placebo     PBO    1       16      324        5      324 #> 3 FIXTURE Secukinumab 150 mg SEC_150    5      219      327      137      327 #> 4 FIXTURE Secukinumab 300 mg SEC_300    6      249      323      175      323 #>   pasi100_r pasi100_n sample_size_w0 age_mean age_sd bmi_mean bmi_sd #> 1        14       323            326     43.8   13.0     28.7    5.9 #> 2         0       324            326     44.1   12.6     27.9    6.1 #> 3        47       327            327     45.4   12.9     28.4    5.9 #> 4        78       323            327     44.5   13.2     28.4    6.4 #>   pasi_w0_mean pasi_w0_sd male bsa_mean bsa_sd weight_mean weight_sd #> 1         23.2        9.8 71.2     33.6   18.0        84.6      20.5 #> 2         24.1       10.5 72.7     35.2   19.1        82.0      20.4 #> 3         23.7       10.5 72.2     34.5   19.4        83.6      20.8 #> 4         23.9        9.9 68.5     34.3   19.2        83.0      21.6 #>   durnpso_mean durnpso_sd prevsys  psa #> 1         16.4       12.0    65.6 13.5 #> 2         16.6       11.6    62.6 15.0 #> 3         17.3       12.2    64.8 15.0 #> 4         15.8       12.3    63.0 15.3  pso_ipd <- pso_ipd %>%   mutate(# Variable transformations     bsa = bsa / 100,     prevsys = as.numeric(prevsys),     psa = as.numeric(psa),     weight = weight / 10,     durnpso = durnpso / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\"),     # Check complete cases for covariates of interest     complete = complete.cases(durnpso, prevsys, bsa, weight, psa)   )  pso_agd <- pso_agd %>%   mutate(     # Variable transformations     bsa_mean = bsa_mean / 100,     bsa_sd = bsa_sd / 100,     prevsys = prevsys / 100,     psa = psa / 100,     weight_mean = weight_mean / 10,     weight_sd = weight_sd / 10,     durnpso_mean = durnpso_mean / 10,     durnpso_sd = durnpso_sd / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\")   )  # Exclude small number of individuals with missing covariates pso_ipd <- filter(pso_ipd, complete)  pso_net <- combine_network(   set_ipd(pso_ipd,           study = studyc,           trt = trtc,           r = pasi75,           trt_class = trtclass),   set_agd_arm(pso_agd,               study = studyc,               trt = trtc,               r = pasi75_r,               n = pasi75_n,               trt_class = trtclass) )  # Print network details pso_net #> A network with 3 IPD studies, and 1 AgD study (arm-based). #>  #> ------------------------------------------------------------------- IPD studies ----  #>  Study     Treatments                       #>  UNCOVER-1 3: IXE_Q2W | IXE_Q4W | PBO       #>  UNCOVER-2 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  UNCOVER-3 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  #>  Outcome type: binary #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study   Treatments                       #>  FIXTURE 4: ETN | PBO | SEC_150 | SEC_300 #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 6, in 3 classes #> Total number of studies: 4 #> Reference treatment is: PBO #> Network is connected  # Add integration points to the network pso_net <- add_integration(pso_net,   durnpso = distr(qgamma, mean = durnpso_mean, sd = durnpso_sd),   prevsys = distr(qbern, prob = prevsys),   bsa = distr(qlogitnorm, mean = bsa_mean, sd = bsa_sd),   weight = distr(qgamma, mean = weight_mean, sd = weight_sd),   psa = distr(qbern, prob = psa),   n_int = 1000) #> Using weighted average correlation matrix computed from IPD studies.  # \\donttest{ # Fitting a ML-NMR model. # Specify a regression model to include effect modifier interactions for five # covariates, along with main (prognostic) effects. We use a probit link and # specify that the two-parameter Binomial approximation for the aggregate-level # likelihood should be used. We set treatment-covariate interactions to be equal # within each class. We narrow the possible range for random initial values with # init_r = 0.1, since probit models in particular are often hard to initialise. # Using the QR decomposition greatly improves sampling efficiency here, as is # often the case for regression models. pso_fit <- nma(pso_net, refresh = if (interactive()) 200 else 0,                trt_effects = \"fixed\",                link = \"probit\",                likelihood = \"bernoulli2\",                regression = ~(durnpso + prevsys + bsa + weight + psa)*.trt,                class_interactions = \"common\",                prior_intercept = normal(scale = 10),                prior_trt = normal(scale = 10),                prior_reg = normal(scale = 10),                init_r = 0.1,                QR = TRUE) #> Note: Setting \"PBO\" as the network reference treatment. pso_fit #> A fixed effects ML-NMR with a bernoulli2 likelihood (probit link). #> Regression model: ~(durnpso + prevsys + bsa + weight + psa) * .trt. #> Centred covariates at the following overall mean values: #>   durnpso   prevsys       bsa    weight       psa  #> 1.8259772 0.6496080 0.2917665 8.9328237 0.2167777  #> Inference for Stan model: binomial_2par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                         mean se_mean   sd     2.5%      25% #> beta[durnpso]                           0.04    0.00 0.06    -0.08     0.00 #> beta[prevsys]                          -0.13    0.00 0.16    -0.45    -0.24 #> beta[bsa]                              -0.06    0.01 0.44    -0.92    -0.35 #> beta[weight]                            0.04    0.00 0.03    -0.02     0.02 #> beta[psa]                              -0.08    0.00 0.17    -0.41    -0.19 #> beta[durnpso:.trtclassTNFa blocker]    -0.03    0.00 0.07    -0.18    -0.08 #> beta[durnpso:.trtclassIL blocker]      -0.01    0.00 0.07    -0.14    -0.06 #> beta[prevsys:.trtclassTNFa blocker]     0.18    0.00 0.19    -0.18     0.05 #> beta[prevsys:.trtclassIL blocker]       0.06    0.00 0.18    -0.29    -0.06 #> beta[bsa:.trtclassTNFa blocker]         0.05    0.01 0.52    -0.95    -0.31 #> beta[bsa:.trtclassIL blocker]           0.28    0.01 0.49    -0.63    -0.05 #> beta[weight:.trtclassTNFa blocker]     -0.17    0.00 0.04    -0.24    -0.19 #> beta[weight:.trtclassIL blocker]       -0.10    0.00 0.03    -0.16    -0.12 #> beta[psa:.trtclassTNFa blocker]        -0.06    0.00 0.21    -0.45    -0.19 #> beta[psa:.trtclassIL blocker]           0.01    0.00 0.18    -0.36    -0.12 #> d[ETN]                                  1.55    0.00 0.08     1.39     1.50 #> d[IXE_Q2W]                              2.95    0.00 0.09     2.78     2.89 #> d[IXE_Q4W]                              2.54    0.00 0.08     2.38     2.48 #> d[SEC_150]                              2.15    0.00 0.12     1.92     2.07 #> d[SEC_300]                              2.45    0.00 0.12     2.22     2.37 #> lp__                                -1576.39    0.09 3.40 -1584.12 -1578.52 #>                                          50%      75%    97.5% n_eff Rhat #> beta[durnpso]                           0.04     0.09     0.17  5671    1 #> beta[prevsys]                          -0.13    -0.03     0.18  4824    1 #> beta[bsa]                              -0.05     0.24     0.78  4533    1 #> beta[weight]                            0.04     0.06     0.10  5318    1 #> beta[psa]                              -0.08     0.03     0.25  5841    1 #> beta[durnpso:.trtclassTNFa blocker]    -0.03     0.02     0.12  5922    1 #> beta[durnpso:.trtclassIL blocker]      -0.01     0.03     0.12  6169    1 #> beta[prevsys:.trtclassTNFa blocker]     0.18     0.31     0.55  5053    1 #> beta[prevsys:.trtclassIL blocker]       0.06     0.18     0.40  6205    1 #> beta[bsa:.trtclassTNFa blocker]         0.05     0.40     1.08  4811    1 #> beta[bsa:.trtclassIL blocker]           0.27     0.60     1.25  5781    1 #> beta[weight:.trtclassTNFa blocker]     -0.17    -0.14    -0.10  5621    1 #> beta[weight:.trtclassIL blocker]       -0.10    -0.08    -0.04  7113    1 #> beta[psa:.trtclassTNFa blocker]        -0.06     0.08     0.35  5673    1 #> beta[psa:.trtclassIL blocker]           0.01     0.13     0.37  7068    1 #> d[ETN]                                  1.55     1.61     1.71  4509    1 #> d[IXE_Q2W]                              2.95     3.01     3.12  4494    1 #> d[IXE_Q4W]                              2.54     2.60     2.70  5070    1 #> d[SEC_150]                              2.14     2.22     2.38  5059    1 #> d[SEC_300]                              2.45     2.53     2.69  5690    1 #> lp__                                -1576.02 -1573.93 -1570.88  1447    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:47:17 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }  # \\dontshow{ if (requireNamespace(\"pkgdown\", quietly = TRUE) && pkgdown::in_pkgdown()) {   assign(\"pso_net\", pso_net, .GlobalEnv)   assign(\"pso_fit\", pso_fit, .GlobalEnv) } # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Example smoking FE NMA — example_smk_fe","title":"Example smoking FE NMA — example_smk_fe","text":"Calling example(\"example_smk_fe\") run fixed effects NMA model smoking cessation data, using code Examples section . resulting stan_nma object smk_fit_FE available global environment.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example smoking FE NMA — example_smk_fe","text":"Smoking FE NMA use examples.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_fe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example smoking FE NMA — example_smk_fe","text":"","code":"# Set up network of smoking cessation data head(smoking) #>   studyn trtn                   trtc  r   n #> 1      1    1        No intervention  9 140 #> 2      1    3 Individual counselling 23 140 #> 3      1    4      Group counselling 10 138 #> 4      2    2              Self-help 11  78 #> 5      2    3 Individual counselling 12  85 #> 6      2    4      Group counselling 29 170  smk_net <- set_agd_arm(smoking,                        study = studyn,                        trt = trtc,                        r = r,                        n = n,                        trt_ref = \"No intervention\")  # Print details smk_net #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected  # \\donttest{ # Fitting a fixed effect model smk_fit_FE <- nma(smk_net, refresh = if (interactive()) 200 else 0,                   trt_effects = \"fixed\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100))  smk_fit_FE #> A fixed effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                               mean se_mean   sd     2.5%      25%      50% #> d[Group counselling]          0.84    0.00 0.18     0.51     0.72     0.84 #> d[Individual counselling]     0.76    0.00 0.06     0.65     0.73     0.76 #> d[Self-help]                  0.23    0.00 0.13    -0.02     0.14     0.23 #> lp__                      -5859.23    0.08 3.59 -5867.18 -5861.38 -5858.93 #>                                75%    97.5% n_eff Rhat #> d[Group counselling]          0.96     1.20  2382    1 #> d[Individual counselling]     0.80     0.88  2016    1 #> d[Self-help]                  0.31     0.47  2586    1 #> lp__                      -5856.76 -5853.02  2022    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:48:45 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }  # \\dontshow{ if (requireNamespace(\"pkgdown\", quietly = TRUE) && pkgdown::in_pkgdown()) {   assign(\"smk_net\", smk_net, .GlobalEnv)   assign(\"smk_fit_FE\", smk_fit_FE, .GlobalEnv) } # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_re.html","id":null,"dir":"Reference","previous_headings":"","what":"Example smoking RE NMA — example_smk_re","title":"Example smoking RE NMA — example_smk_re","text":"Calling example(\"example_smk_re\") run random effects NMA model smoking cessation data, using code Examples section . resulting stan_nma object smk_fit_RE available global environment.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example smoking RE NMA — example_smk_re","text":"Smoking RE NMA use examples.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_re.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example smoking RE NMA — example_smk_re","text":"","code":"# Set up network of smoking cessation data head(smoking) #>   studyn trtn                   trtc  r   n #> 1      1    1        No intervention  9 140 #> 2      1    3 Individual counselling 23 140 #> 3      1    4      Group counselling 10 138 #> 4      2    2              Self-help 11  78 #> 5      2    3 Individual counselling 12  85 #> 6      2    4      Group counselling 29 170  smk_net <- set_agd_arm(smoking,                        study = studyn,                        trt = trtc,                        r = r,                        n = n,                        trt_ref = \"No intervention\")  # Print details smk_net #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected  # \\donttest{ # Fitting a random effects model smk_fit_RE <- nma(smk_net, refresh = if (interactive()) 200 else 0,                   trt_effects = \"random\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100),                   prior_het = normal(scale = 5))  smk_fit_RE #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                               mean se_mean   sd     2.5%      25%      50% #> d[Group counselling]          1.10    0.01 0.44     0.27     0.80     1.08 #> d[Individual counselling]     0.84    0.01 0.23     0.39     0.69     0.83 #> d[Self-help]                  0.49    0.01 0.42    -0.32     0.21     0.49 #> lp__                      -5768.02    0.19 6.60 -5781.69 -5772.18 -5767.68 #> tau                           0.84    0.01 0.19     0.54     0.71     0.82 #>                                75%    97.5% n_eff Rhat #> d[Group counselling]          1.37     2.04  1688 1.00 #> d[Individual counselling]     0.99     1.32  1118 1.00 #> d[Self-help]                  0.75     1.37  1674 1.00 #> lp__                      -5763.44 -5756.10  1145 1.01 #> tau                           0.95     1.29  1185 1.00 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:48:59 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }  # \\dontshow{ if (requireNamespace(\"pkgdown\", quietly = TRUE) && pkgdown::in_pkgdown()) {   assign(\"smk_net\", smk_net, .GlobalEnv)   assign(\"smk_fit_RE\", smk_fit_RE, .GlobalEnv) } # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_ume.html","id":null,"dir":"Reference","previous_headings":"","what":"Example smoking UME NMA — example_smk_ume","title":"Example smoking UME NMA — example_smk_ume","text":"Calling example(\"example_smk_ume\") run unrelated mean effects (inconsistency) NMA model smoking cessation data, using code Examples section . resulting stan_nma object smk_fit_RE_UME available global environment.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_ume.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example smoking UME NMA — example_smk_ume","text":"Smoking UME NMA use examples.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/aa_example_smk_ume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example smoking UME NMA — example_smk_ume","text":"","code":"# Set up network of smoking cessation data head(smoking) #>   studyn trtn                   trtc  r   n #> 1      1    1        No intervention  9 140 #> 2      1    3 Individual counselling 23 140 #> 3      1    4      Group counselling 10 138 #> 4      2    2              Self-help 11  78 #> 5      2    3 Individual counselling 12  85 #> 6      2    4      Group counselling 29 170  smk_net <- set_agd_arm(smoking,                        study = studyn,                        trt = trtc,                        r = r,                        n = n,                        trt_ref = \"No intervention\")  # Print details smk_net #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected  # \\donttest{ # Fitting an unrelated mean effects (inconsistency) model smk_fit_RE_UME <- nma(smk_net, refresh = if (interactive()) 200 else 0,                       consistency = \"ume\",                       trt_effects = \"random\",                       prior_intercept = normal(scale = 100),                       prior_trt = normal(scale = 100),                       prior_het = normal(scale = 5))  smk_fit_RE_UME #> A random effects NMA with a binomial likelihood (logit link). #> An inconsistency model ('ume') was fitted. #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                                     mean se_mean   sd     2.5% #> d[Group counselling vs. No intervention]            1.13    0.02 0.82    -0.34 #> d[Individual counselling vs. No intervention]       0.90    0.01 0.28     0.37 #> d[Self-help vs. No intervention]                    0.32    0.01 0.59    -0.84 #> d[Individual counselling vs. Group counselling]    -0.28    0.01 0.60    -1.42 #> d[Self-help vs. Group counselling]                 -0.61    0.01 0.73    -2.05 #> d[Self-help vs. Individual counselling]             0.15    0.02 1.05    -1.88 #> lp__                                            -5765.41    0.20 6.47 -5778.76 #> tau                                                 0.94    0.01 0.24     0.59 #>                                                      25%      50%      75% #> d[Group counselling vs. No intervention]            0.58     1.08     1.64 #> d[Individual counselling vs. No intervention]       0.72     0.89     1.08 #> d[Self-help vs. No intervention]                   -0.05     0.32     0.67 #> d[Individual counselling vs. Group counselling]    -0.68    -0.28     0.09 #> d[Self-help vs. Group counselling]                 -1.09    -0.61    -0.13 #> d[Self-help vs. Individual counselling]            -0.51     0.14     0.81 #> lp__                                            -5769.69 -5765.10 -5760.92 #> tau                                                 0.77     0.91     1.07 #>                                                    97.5% n_eff Rhat #> d[Group counselling vs. No intervention]            2.88  2095    1 #> d[Individual counselling vs. No intervention]       1.49  1131    1 #> d[Self-help vs. No intervention]                    1.49  1979    1 #> d[Individual counselling vs. Group counselling]     0.94  2619    1 #> d[Self-help vs. Group counselling]                  0.85  2805    1 #> d[Self-help vs. Individual counselling]             2.26  3862    1 #> lp__                                            -5753.64  1085    1 #> tau                                                 1.50  1058    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:49:12 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }  # \\dontshow{ if (requireNamespace(\"pkgdown\", quietly = TRUE) && pkgdown::in_pkgdown()) {   assign(\"smk_net\", smk_net, .GlobalEnv)   assign(\"smk_fit_RE_UME\", smk_fit_RE_UME, .GlobalEnv) } # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/adapt_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Target average acceptance probability — adapt_delta","title":"Target average acceptance probability — adapt_delta","text":"Stan control argument adapt_delta sets target average acceptance probability -U-Turn Sampler (NUTS) used Stan.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/adapt_delta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target average acceptance probability — adapt_delta","text":"default value adapt_delta used nma() 0.8 fixed effect models, 0.95 random effects models. need change adapt_delta unless see warning message divergent transitions. Increasing adapt_delta default value closer 1 means Stan use smaller step size, making sampling slower robust, resulting fewer divergent transitions. details see Stan documentation available https://mc-stan.org/users/documentation/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/add_integration.html","id":null,"dir":"Reference","previous_headings":"","what":"Add numerical integration points to aggregate data — add_integration","title":"Add numerical integration points to aggregate data — add_integration","text":"add_integration() generic creates numerical integration points using Gaussian copula approach, described Phillippo et al. (2020) . Methods available networks stored nma_data objects, data frames. function unnest_integration() unnests integration points stored data frame, aid plotting exploration.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/add_integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add numerical integration points to aggregate data — add_integration","text":"","code":"add_integration(x, ...)  # S3 method for default add_integration(x, ...)  # S3 method for data.frame add_integration(   x,   ...,   cor = NULL,   cor_adjust = NULL,   n_int = 1000L,   int_args = list() )  # S3 method for nma_data add_integration(   x,   ...,   cor = NULL,   cor_adjust = NULL,   n_int = 1000L,   int_args = list() )  unnest_integration(data)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/add_integration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add numerical integration points to aggregate data — add_integration","text":"x nma_data object, created set_*() functions combine_network(), data frame ... Distributions covariates, see \"Details\" cor Correlation matrix use generating integration points. default, takes weighted correlation matrix IPD studies. Rows columns match order covariates specified .... cor_adjust Adjustment apply correlation matrix given cor (computed IPD cor = NULL) obtain Gaussian copula correlations, either \"spearman\", \"pearson\", \"none\", see \"Details\". default cor = NULL \"spearman\", otherwise default \"pearson\". n_int Number integration points generate, default 1000 int_args named list arguments pass sobol() data Data frame nested integration points, stored list columns .int_<variable name>","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/add_integration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add numerical integration points to aggregate data — add_integration","text":"nma_data method, object class nma_data. data.frame method, input data frame returned (tibble) added column covariate (prefixed \".int_\"), containing numerical integration points nested length-n_int vectors within row. unnest_integration(), data frame integration points unnested.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/add_integration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add numerical integration points to aggregate data — add_integration","text":"arguments passed ... specify distributions covariates. Argument names specify name covariate, match covariate name IPD (IPD present). required marginal distribution specified using function distr(). argument cor_adjust specifies correlation matrix given cor (computed IPD cor = NULL) adjusted obtain correlation matrix Gaussian copula, using formulae Xiao Zhou (2018) . cor_adjust = \"spearman\" used correlations cor computed using Spearman's rank correlation. Correlations continuous covariates reproduced exactly integration points. Correlations discrete covariates reproduced approximately. default cor = NULL correlations calculated IPD studies. cor_adjust = \"pearson\" used correlations cor computed using Pearson's product-moment correlation. Correlations Normal covariates reproduced exactly integration points, others reproduced approximately. Correlations discrete covariates reproduced approximately (identically cor_adjust   = \"spearman\"). default cor provided user, since cor() defaults method = \"pearson\" Pearson correlations likely reported published data. However, recommend providing Spearman correlations (e.g. cor(., method = \"spearman\")) using cor_adjust = \"spearman\" possible. cor_adjust = \"none\" allows user specify correlation matrix Gaussian copula directly; adjustment applied. cor_adjust = \"legacy\" also available, reproduces exactly behaviour version 0.3.0 earlier. similar cor_adjust =   \"none\", unadjusted Spearman correlations used cor = NULL. adding integration points network object correlation matrix used stored $int_cor, copula correlation matrix adjustment used stored attributes $int_cor. correlation matrix passed add_integration() (e.g. reuse correlations external target population) detected, correct setting cor_adjust automatically applied.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/add_integration.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add numerical integration points to aggregate data — add_integration","text":"Phillippo DM, Dias S, Ades AE, Belger M, Brnabic , Schacht , Saure D, Kadziola Z, Welton NJ (2020). “Multilevel Network Meta-Regression population-adjusted treatment comparisons.” Journal Royal Statistical Society: Series (Statistics Society), 183(3), 1189--1210. doi: 10.1111/rssa.12579 . Xiao Q, Zhou S (2018). “Matching correlation coefficient Gaussian copula.” Communications Statistics - Theory Methods, 48(7), 1728--1747. doi: 10.1080/03610926.2018.1439962 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/add_integration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add numerical integration points to aggregate data — add_integration","text":"","code":"## Plaque psoriasis ML-NMR - network setup and adding integration points # Set up plaque psoriasis network combining IPD and AgD library(dplyr) pso_ipd <- filter(plaque_psoriasis_ipd,                   studyc %in% c(\"UNCOVER-1\", \"UNCOVER-2\", \"UNCOVER-3\"))  pso_agd <- filter(plaque_psoriasis_agd,                   studyc == \"FIXTURE\")  head(pso_ipd) #>      studyc      trtc_long    trtc trtn pasi75 pasi90 pasi100 age  bmi pasi_w0 #> 1 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  34 32.2    18.2 #> 2 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  64 41.9    23.4 #> 3 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       0  42 26.2    12.8 #> 4 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  45 52.9    36.0 #> 5 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  67 22.9    20.9 #> 6 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       1  57 22.4    18.2 #>    male bsa weight durnpso prevsys   psa #> 1  TRUE  18   98.1     6.7    TRUE  TRUE #> 2  TRUE  33  129.6    14.5   FALSE  TRUE #> 3  TRUE  33   78.0    26.5    TRUE FALSE #> 4 FALSE  50  139.9    25.0    TRUE  TRUE #> 5 FALSE  35   54.2    11.9    TRUE FALSE #> 6  TRUE  29   67.5    15.2    TRUE FALSE head(pso_agd) #>    studyc          trtc_long    trtc trtn pasi75_r pasi75_n pasi90_r pasi90_n #> 1 FIXTURE         Etanercept     ETN    4      142      323       67      323 #> 2 FIXTURE            Placebo     PBO    1       16      324        5      324 #> 3 FIXTURE Secukinumab 150 mg SEC_150    5      219      327      137      327 #> 4 FIXTURE Secukinumab 300 mg SEC_300    6      249      323      175      323 #>   pasi100_r pasi100_n sample_size_w0 age_mean age_sd bmi_mean bmi_sd #> 1        14       323            326     43.8   13.0     28.7    5.9 #> 2         0       324            326     44.1   12.6     27.9    6.1 #> 3        47       327            327     45.4   12.9     28.4    5.9 #> 4        78       323            327     44.5   13.2     28.4    6.4 #>   pasi_w0_mean pasi_w0_sd male bsa_mean bsa_sd weight_mean weight_sd #> 1         23.2        9.8 71.2     33.6   18.0        84.6      20.5 #> 2         24.1       10.5 72.7     35.2   19.1        82.0      20.4 #> 3         23.7       10.5 72.2     34.5   19.4        83.6      20.8 #> 4         23.9        9.9 68.5     34.3   19.2        83.0      21.6 #>   durnpso_mean durnpso_sd prevsys  psa #> 1         16.4       12.0    65.6 13.5 #> 2         16.6       11.6    62.6 15.0 #> 3         17.3       12.2    64.8 15.0 #> 4         15.8       12.3    63.0 15.3  pso_ipd <- pso_ipd %>%   mutate(# Variable transformations     bsa = bsa / 100,     prevsys = as.numeric(prevsys),     psa = as.numeric(psa),     weight = weight / 10,     durnpso = durnpso / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\"),     # Check complete cases for covariates of interest     complete = complete.cases(durnpso, prevsys, bsa, weight, psa)   )  pso_agd <- pso_agd %>%   mutate(     # Variable transformations     bsa_mean = bsa_mean / 100,     bsa_sd = bsa_sd / 100,     prevsys = prevsys / 100,     psa = psa / 100,     weight_mean = weight_mean / 10,     weight_sd = weight_sd / 10,     durnpso_mean = durnpso_mean / 10,     durnpso_sd = durnpso_sd / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\")   )  # Exclude small number of individuals with missing covariates pso_ipd <- filter(pso_ipd, complete)  pso_net <- combine_network(   set_ipd(pso_ipd,           study = studyc,           trt = trtc,           r = pasi75,           trt_class = trtclass),   set_agd_arm(pso_agd,               study = studyc,               trt = trtc,               r = pasi75_r,               n = pasi75_n,               trt_class = trtclass) )  # Print network details pso_net #> A network with 3 IPD studies, and 1 AgD study (arm-based). #>  #> ------------------------------------------------------------------- IPD studies ----  #>  Study     Treatments                       #>  UNCOVER-1 3: IXE_Q2W | IXE_Q4W | PBO       #>  UNCOVER-2 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  UNCOVER-3 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  #>  Outcome type: binary #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study   Treatments                       #>  FIXTURE 4: ETN | PBO | SEC_150 | SEC_300 #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 6, in 3 classes #> Total number of studies: 4 #> Reference treatment is: PBO #> Network is connected  # Add integration points to the network pso_net <- add_integration(pso_net,   durnpso = distr(qgamma, mean = durnpso_mean, sd = durnpso_sd),   prevsys = distr(qbern, prob = prevsys),   bsa = distr(qlogitnorm, mean = bsa_mean, sd = bsa_sd),   weight = distr(qgamma, mean = weight_mean, sd = weight_sd),   psa = distr(qbern, prob = psa),   n_int = 1000) #> Using weighted average correlation matrix computed from IPD studies.   ## Adding integration points to a data frame, e.g. for prediction # Define a data frame of covariate summaries new_agd_int <- data.frame(   bsa_mean = 0.6,   bsa_sd = 0.3,   prevsys = 0.1,   psa = 0.2,   weight_mean = 10,   weight_sd = 1,   durnpso_mean = 3,   durnpso_sd = 1)  # Adding integration points, using the weighted average correlation matrix # computed for the plaque psoriasis network new_agd_int <- add_integration(new_agd_int,   durnpso = distr(qgamma, mean = durnpso_mean, sd = durnpso_sd),   prevsys = distr(qbern, prob = prevsys),   bsa = distr(qlogitnorm, mean = bsa_mean, sd = bsa_sd),   weight = distr(qgamma, mean = weight_mean, sd = weight_sd),   psa = distr(qbern, prob = psa),   cor = pso_net$int_cor,   n_int = 1000)  # Here, since we reused the correlation matrix pso_net$int_cor from the # network, the correct setting of cor_adjust = \"spearman\" is automatically # applied  new_agd_int #> # A tibble: 1 × 13 #>   bsa_mean bsa_sd prevsys   psa weight_mean weight_sd durnpso_mean durnpso_sd #>      <dbl>  <dbl>   <dbl> <dbl>       <dbl>     <dbl>        <dbl>      <dbl> #> 1      0.6    0.3     0.1   0.2          10         1            3          1 #> # … with 5 more variables: .int_durnpso <list>, .int_prevsys <list>, #> #   .int_bsa <list>, .int_weight <list>, .int_psa <list>"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.array.stan_nma.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert samples into arrays, matrices, or data frames — as.array.stan_nma","title":"Convert samples into arrays, matrices, or data frames — as.array.stan_nma","text":"Samples (post warm-) stan_nma model object can coerced array, matrix, data frame.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.array.stan_nma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert samples into arrays, matrices, or data frames — as.array.stan_nma","text":"","code":"# S3 method for stan_nma as.array(x, ..., pars, include = TRUE)  # S3 method for stan_nma as.data.frame(x, ..., pars, include = TRUE)  # S3 method for stan_nma as.matrix(x, ..., pars, include = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.array.stan_nma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert samples into arrays, matrices, or data frames — as.array.stan_nma","text":"x stan_nma object ... Additional arguments passed .array.stanfit() pars Optional character vector parameter names include output. specified, parameters used. include Logical, parameters pars included (TRUE, default) excluded (FALSE)?","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.array.stan_nma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert samples into arrays, matrices, or data frames — as.array.stan_nma","text":".array() method produces 3D array [Iteration, Chain, Parameter] containing posterior samples parameter (class mcmc_array). side effect enabling bayesplot functions seamlessly work stan_nma objects. .data.frame() method produces data frame containing posterior samples parameter, combined chains. .matrix() method produces matrix containing posterior samples parameter, combined chains.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.stanfit.html","id":null,"dir":"Reference","previous_headings":"","what":"as.stanfit — as.stanfit","title":"as.stanfit — as.stanfit","text":"Attempt turn object stanfit object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.stanfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.stanfit — as.stanfit","text":"","code":"as.stanfit(x, ...)  # S3 method for stan_nma as.stanfit(x, ...)  # S3 method for default as.stanfit(x, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.stanfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.stanfit — as.stanfit","text":"x object ... additional arguments","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/as.stanfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.stanfit — as.stanfit","text":"stanfit object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/atrial_fibrillation.html","id":null,"dir":"Reference","previous_headings":"","what":"Stroke prevention in atrial fibrillation patients — atrial_fibrillation","title":"Stroke prevention in atrial fibrillation patients — atrial_fibrillation","text":"Data frame containing results 26 trials comparing 17 treatments 4 classes prevention stroke patients atrial fibrillation (Cooper et al. 2009) . data corrected versions given van Valkenhoef Kuiper (2016) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/atrial_fibrillation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stroke prevention in atrial fibrillation patients — atrial_fibrillation","text":"","code":"atrial_fibrillation"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/atrial_fibrillation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stroke prevention in atrial fibrillation patients — atrial_fibrillation","text":"data frame 63 rows 11 variables: studyc study name studyn numeric study ID trtc treatment name trtn numeric treatment code trt_class treatment class r number events n sample size E person-years risk stroke proportion individuals prior stroke year year study publication followup mean length follow-(years)","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/atrial_fibrillation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stroke prevention in atrial fibrillation patients — atrial_fibrillation","text":"Cooper NJ, Sutton AJ, Morris D, Ades AE, Welton NJ (2009). “Addressing -study heterogeneity inconsistency mixed treatment comparisons: Application stroke prevention treatments individuals non-rheumatic atrial fibrillation.” Statistics Medicine, 28(14), 1861--1881. doi: 10.1002/sim.3594 . van Valkenhoef G, Kuiper J (2016). gemtc: Network Meta-Analysis Using Bayesian Methods. R package version 0.8-2, https://CRAN.R-project.org/package=gemtc.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/bcg_vaccine.html","id":null,"dir":"Reference","previous_headings":"","what":"BCG vaccination — bcg_vaccine","title":"BCG vaccination — bcg_vaccine","text":"Data frame containing results 13 trials comparing BCG vaccination vaccination preventing tuberculosis (TB) (Dias et al. 2011; Berkey et al. 1995) . numbers individuals diagnosed TB arm study follow-period recorded. absolute degrees latitude study conducted also recorded.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/bcg_vaccine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BCG vaccination — bcg_vaccine","text":"","code":"bcg_vaccine"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/bcg_vaccine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BCG vaccination — bcg_vaccine","text":"data frame 26 rows 6 variables: studyn numeric study ID trtn numeric treatment code trtc treatment name latitude absolute degrees latitude r number diagnosed TB n sample size","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/bcg_vaccine.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BCG vaccination — bcg_vaccine","text":"Berkey CS, Hoaglin DC, Mosteller F, Colditz GA (1995). “random-effects regression model meta-analysis.” Statistics Medicine, 14(4), 395--411. doi: 10.1002/sim.4780140406 . Dias S, Sutton AJ, Welton NJ, Ades AE (2011). “NICE DSU Technical Support Document 3: Heterogeneity: subgroups, meta-regression, bias bias-adjustment.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/blocker.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta blockers to prevent mortality after MI — blocker","title":"Beta blockers to prevent mortality after MI — blocker","text":"Data frame containing number deaths 22 trials comparing beta blockers vs. control preventing mortality myocardial infarction (Carlin 1992; Dias et al. 2011) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/blocker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta blockers to prevent mortality after MI — blocker","text":"","code":"blocker"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/blocker.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Beta blockers to prevent mortality after MI — blocker","text":"data frame 44 rows 5 variables: studyn numeric study ID trtn numeric treatment code trtc treatment name r total number events n total number individuals","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/blocker.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beta blockers to prevent mortality after MI — blocker","text":"Carlin JB (1992). “Meta-analysis 2 x 2 tables: bayesian approach.” Statistics Medicine, 11(2), 141--158. doi: 10.1002/sim.4780110202 . Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/combine_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple data sources into one network — combine_network","title":"Combine multiple data sources into one network — combine_network","text":"Multiple data sources created using set_ipd(), set_agd_arm(), set_agd_contrast() can combined single network analysis.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/combine_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple data sources into one network — combine_network","text":"","code":"combine_network(..., trt_ref)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/combine_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple data sources into one network — combine_network","text":"... multiple data sources, defined using set_* functions trt_ref reference treatment entire network, string (coerced ) referring levels treatment factor variable","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/combine_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple data sources into one network — combine_network","text":"object class nma_data","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/combine_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple data sources into one network — combine_network","text":"","code":"## Parkinson's - combining contrast- and arm-based data studies <- parkinsons$studyn (parkinsons_arm <- parkinsons[studies %in% 1:3, ]) #>   studyn trtn     y    se   n  diff se_diff #> 1      1    1 -1.22 0.504  54    NA   0.504 #> 2      1    3 -1.53 0.439  95 -0.31   0.668 #> 3      2    1 -0.70 0.282 172    NA   0.282 #> 4      2    2 -2.40 0.258 173 -1.70   0.382 #> 5      3    1 -0.30 0.505  76    NA   0.505 #> 6      3    2 -2.60 0.510  71 -2.30   0.718 #> 7      3    4 -1.20 0.478  81 -0.90   0.695 (parkinsons_contr <- parkinsons[studies %in% 4:7, ]) #>    studyn trtn     y    se   n  diff se_diff #> 8       4    3 -0.24 0.265 128    NA   0.265 #> 9       4    4 -0.59 0.354  72 -0.35   0.442 #> 10      5    3 -0.73 0.335  80    NA   0.335 #> 11      5    4 -0.18 0.442  46  0.55   0.555 #> 12      6    4 -2.20 0.197 137    NA   0.197 #> 13      6    5 -2.50 0.190 131 -0.30   0.274 #> 14      7    4 -1.80 0.200 154    NA   0.200 #> 15      7    5 -2.10 0.250 143 -0.30   0.320  park_arm_net <- set_agd_arm(parkinsons_arm,                             study = studyn,                             trt = trtn,                             y = y,                             se = se,                             sample_size = n)  park_contr_net <- set_agd_contrast(parkinsons_contr,                                    study = studyn,                                    trt = trtn,                                    y = diff,                                    se = se_diff,                                    sample_size = n)  park_net <- combine_network(park_arm_net, park_contr_net)  # Print network details park_net #> A network with 3 AgD studies (arm-based), and 4 AgD studies (contrast-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments   #>  1     2: 1 | 3     #>  2     2: 1 | 2     #>  3     3: 1 | 2 | 4 #>  #>  Outcome type: continuous #> -------------------------------------------------- AgD studies (contrast-based) ----  #>  Study Treatments #>  4     2: 3 | 4   #>  5     2: 3 | 4   #>  6     2: 4 | 5   #>  7     2: 4 | 5   #>  #>  Outcome type: continuous #> ------------------------------------------------------------------------------------ #> Total number of treatments: 5 #> Total number of studies: 7 #> Reference treatment is: 4 #> Network is connected  # Plot network plot(park_net, weight_edges = TRUE, weight_nodes = TRUE)   ## Plaque Psoriasis - combining IPD and AgD in a network # Set up plaque psoriasis network combining IPD and AgD library(dplyr) pso_ipd <- filter(plaque_psoriasis_ipd,                   studyc %in% c(\"UNCOVER-1\", \"UNCOVER-2\", \"UNCOVER-3\"))  pso_agd <- filter(plaque_psoriasis_agd,                   studyc == \"FIXTURE\")  head(pso_ipd) #>      studyc      trtc_long    trtc trtn pasi75 pasi90 pasi100 age  bmi pasi_w0 #> 1 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  34 32.2    18.2 #> 2 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  64 41.9    23.4 #> 3 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       0  42 26.2    12.8 #> 4 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  45 52.9    36.0 #> 5 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  67 22.9    20.9 #> 6 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       1  57 22.4    18.2 #>    male bsa weight durnpso prevsys   psa #> 1  TRUE  18   98.1     6.7    TRUE  TRUE #> 2  TRUE  33  129.6    14.5   FALSE  TRUE #> 3  TRUE  33   78.0    26.5    TRUE FALSE #> 4 FALSE  50  139.9    25.0    TRUE  TRUE #> 5 FALSE  35   54.2    11.9    TRUE FALSE #> 6  TRUE  29   67.5    15.2    TRUE FALSE head(pso_agd) #>    studyc          trtc_long    trtc trtn pasi75_r pasi75_n pasi90_r pasi90_n #> 1 FIXTURE         Etanercept     ETN    4      142      323       67      323 #> 2 FIXTURE            Placebo     PBO    1       16      324        5      324 #> 3 FIXTURE Secukinumab 150 mg SEC_150    5      219      327      137      327 #> 4 FIXTURE Secukinumab 300 mg SEC_300    6      249      323      175      323 #>   pasi100_r pasi100_n sample_size_w0 age_mean age_sd bmi_mean bmi_sd #> 1        14       323            326     43.8   13.0     28.7    5.9 #> 2         0       324            326     44.1   12.6     27.9    6.1 #> 3        47       327            327     45.4   12.9     28.4    5.9 #> 4        78       323            327     44.5   13.2     28.4    6.4 #>   pasi_w0_mean pasi_w0_sd male bsa_mean bsa_sd weight_mean weight_sd #> 1         23.2        9.8 71.2     33.6   18.0        84.6      20.5 #> 2         24.1       10.5 72.7     35.2   19.1        82.0      20.4 #> 3         23.7       10.5 72.2     34.5   19.4        83.6      20.8 #> 4         23.9        9.9 68.5     34.3   19.2        83.0      21.6 #>   durnpso_mean durnpso_sd prevsys  psa #> 1         16.4       12.0    65.6 13.5 #> 2         16.6       11.6    62.6 15.0 #> 3         17.3       12.2    64.8 15.0 #> 4         15.8       12.3    63.0 15.3  pso_ipd <- pso_ipd %>%   mutate(# Variable transformations     bsa = bsa / 100,     prevsys = as.numeric(prevsys),     psa = as.numeric(psa),     weight = weight / 10,     durnpso = durnpso / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\"),     # Check complete cases for covariates of interest     complete = complete.cases(durnpso, prevsys, bsa, weight, psa)   )  pso_agd <- pso_agd %>%   mutate(     # Variable transformations     bsa_mean = bsa_mean / 100,     bsa_sd = bsa_sd / 100,     prevsys = prevsys / 100,     psa = psa / 100,     weight_mean = weight_mean / 10,     weight_sd = weight_sd / 10,     durnpso_mean = durnpso_mean / 10,     durnpso_sd = durnpso_sd / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\")   )  # Exclude small number of individuals with missing covariates pso_ipd <- filter(pso_ipd, complete)  pso_net <- combine_network(   set_ipd(pso_ipd,           study = studyc,           trt = trtc,           r = pasi75,           trt_class = trtclass),   set_agd_arm(pso_agd,               study = studyc,               trt = trtc,               r = pasi75_r,               n = pasi75_n,               trt_class = trtclass) )  # Print network details pso_net #> A network with 3 IPD studies, and 1 AgD study (arm-based). #>  #> ------------------------------------------------------------------- IPD studies ----  #>  Study     Treatments                       #>  UNCOVER-1 3: IXE_Q2W | IXE_Q4W | PBO       #>  UNCOVER-2 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  UNCOVER-3 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  #>  Outcome type: binary #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study   Treatments                       #>  FIXTURE 4: ETN | PBO | SEC_150 | SEC_300 #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 6, in 3 classes #> Total number of studies: 4 #> Reference treatment is: PBO #> Network is connected   # Plot network plot(pso_net, weight_nodes = TRUE, weight_edges = TRUE, show_trt_class = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/default_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default values — .default","title":"Set default values — .default","text":".default() function used internally mark certain values default, user may notified default values used. example, choosing default reference treatment network, using default prior distributions. function .is_default() checks whether argument/object set default value. Neither functions intended called user.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/default_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default values — .default","text":"","code":".default(x = list())  .is_default(x)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/default_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default values — .default","text":"x object","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/default_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default values — .default","text":".default(), identical object additional attribute .default. .is_default(), logical value (TRUE FALSE).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/diabetes.html","id":null,"dir":"Reference","previous_headings":"","what":"Incidence of diabetes in trials of antihypertensive drugs — diabetes","title":"Incidence of diabetes in trials of antihypertensive drugs — diabetes","text":"Data frame containing number new cases diabetes 22 trials 6 antihypertensive drugs (Elliott Meyer 2007; Dias et al. 2011) . trial duration (years) also recorded.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/diabetes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incidence of diabetes in trials of antihypertensive drugs — diabetes","text":"","code":"diabetes"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/diabetes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Incidence of diabetes in trials of antihypertensive drugs — diabetes","text":"data frame 48 rows 7 variables: studyn numeric study ID studyc study name trtn numeric treatment code trtc treatment name r total number events n total number individuals time trial follow-(years)","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/diabetes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Incidence of diabetes in trials of antihypertensive drugs — diabetes","text":"Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Elliott WJ, Meyer PM (2007). “Incident diabetes clinical trials antihypertensive drugs: network meta-analysis.” Lancet, 369(9557), 201--207. doi: 10.1016/s0140-6736(07)60108-1 , https://doi.org/10.1016/s0140-6736(07)60108-1.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dic.html","id":null,"dir":"Reference","previous_headings":"","what":"Deviance Information Criterion (DIC) — dic","title":"Deviance Information Criterion (DIC) — dic","text":"Calculate DIC model fitted using nma() function.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deviance Information Criterion (DIC) — dic","text":"","code":"dic(x, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deviance Information Criterion (DIC) — dic","text":"x fitted model object, inheriting class stan_nma ... arguments (used)","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deviance Information Criterion (DIC) — dic","text":"nma_dic object.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deviance Information Criterion (DIC) — dic","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking FE NMA example if not already available if (!exists(\"smk_fit_FE\")) example(\"example_smk_fe\", run.donttest = TRUE) # } # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Compare DIC of FE and RE models (smk_dic_FE <- dic(smk_fit_FE)) #> Residual deviance: 266.9 (on 50 data points) #>                pD: 26.8 #>               DIC: 293.7 (smk_dic_RE <- dic(smk_fit_RE))   # substantially better fit #> Residual deviance: 54.1 (on 50 data points) #>                pD: 43.9 #>               DIC: 98  # Plot residual deviance contributions under RE model plot(smk_dic_RE)   # Check for inconsistency using UME model # } # \\donttest{ # Run smoking UME NMA example if not already available if (!exists(\"smk_fit_RE_UME\")) example(\"example_smk_ume\", run.donttest = TRUE) # } # \\donttest{ # Compare DIC smk_dic_RE #> Residual deviance: 54.1 (on 50 data points) #>                pD: 43.9 #>               DIC: 98 (smk_dic_RE_UME <- dic(smk_fit_RE_UME))  # no difference in fit #> Residual deviance: 54.1 (on 50 data points) #>                pD: 45.3 #>               DIC: 99.4  # Compare residual deviance contributions plot(smk_dic_RE, smk_dic_RE_UME, show_uncertainty = FALSE)  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dietary_fat.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduced dietary fat to prevent mortality — dietary_fat","title":"Reduced dietary fat to prevent mortality — dietary_fat","text":"Data frame containing number deaths person-years risk 10 trials comparing reduced fat diets vs. control (non-reduced fat diet) preventing mortality (Hooper et al. 2000; Dias et al. 2011) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dietary_fat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduced dietary fat to prevent mortality — dietary_fat","text":"","code":"dietary_fat"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dietary_fat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reduced dietary fat to prevent mortality — dietary_fat","text":"data frame 21 rows 7 variables: studyn numeric study ID studyc study name trtn numeric treatment code trtc treatment name r number events n number randomised E person-years risk","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/dietary_fat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reduced dietary fat to prevent mortality — dietary_fat","text":"Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Hooper L, Summerbell CD, Higgins JPT, Thompson RL, Clements G, Capps N, Davey Smith G, Riemersma R, Ebrahim S (2000). “Reduced modified dietary fat preventing cardiovascular disease.” Cochrane Database Systematic Reviews. ISSN 1465-1858, doi: 10.1002/14651858.CD002137 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/distr.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a general marginal distribution — distr","title":"Specify a general marginal distribution — distr","text":"distr() used within function add_integration() specify marginal distributions covariates, via corresponding inverse CDF. also used predict.stan_nma() specify distribution baseline response (intercept) predicting absolute outcomes.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a general marginal distribution — distr","text":"","code":"distr(qfun, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a general marginal distribution — distr","text":"qfun inverse CDF, either function name string ... parameters distribution arguments qfun, quoted evaluated later context aggregate data sources","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/distr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a general marginal distribution — distr","text":"object class distr.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/distr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a general marginal distribution — distr","text":"function qfun formal argument called p. restriction serves crude check inverse CDFs (e.g. error given dnorm used instead qnorm). user-written CDF supplied, must argument p takes vector probabilities.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a general marginal distribution — distr","text":"","code":"## Specifying marginal distributions for integration  df <- data.frame(x1_mean = 2, x1_sd = 0.5, x2 = 0.8)  # Distribution parameters are evaluated in the context of the data frame add_integration(df,                 x1 = distr(qnorm, mean = x1_mean, sd = x1_sd),                 x2 = distr(qbern, prob = x2),                 cor = diag(2)) #> # A tibble: 1 × 5 #>   x1_mean x1_sd    x2 .int_x1       .int_x2       #>     <dbl> <dbl> <dbl> <list>        <list>        #> 1       2   0.5   0.8 <dbl [1,000]> <dbl [1,000]>"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/generalised_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised Student's t distribution (with location and scale) — dgent","title":"Generalised Student's t distribution (with location and scale) — dgent","text":"Density, distribution, quantile function generalised t distribution degrees freedom df, shifted location scaled scale.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/generalised_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised Student's t distribution (with location and scale) — dgent","text":"","code":"dgent(x, df, location = 0, scale = 1)  pgent(q, df, location = 0, scale = 1)  qgent(p, df, location = 0, scale = 1)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/generalised_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised Student's t distribution (with location and scale) — dgent","text":"x, q Vector quantiles df Degrees freedom, greater zero location Location parameter scale Scale parameter, greater zero p Vector probabilities","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/generalised_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalised Student's t distribution (with location and scale) — dgent","text":"dgent() gives density, pgent() gives distribution function, qgent() gives quantile function.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/graph_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert networks to graph objects — as.igraph.nma_data","title":"Convert networks to graph objects — as.igraph.nma_data","text":"method .igraph() converts nma_data objects form used igraph package. method as_tbl_graph() converts nma_data objects form used ggraph tidygraph packages.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/graph_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert networks to graph objects — as.igraph.nma_data","text":"","code":"# S3 method for nma_data as.igraph(x, ..., collapse = TRUE)  # S3 method for nma_data as_tbl_graph(x, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/graph_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert networks to graph objects — as.igraph.nma_data","text":"x nma_data object convert ... Additional arguments collapse Logical, collapse edges studies? Default TRUE, one edge produced comparison (IPD AgD study type) .nstudy attribute giving number studies making comparison. FALSE, repeated edges added study making comparison.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/graph_conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert networks to graph objects — as.igraph.nma_data","text":"igraph object .igraph(), tbl_graph object as_tbl_graph().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/graph_conversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert networks to graph objects — as.igraph.nma_data","text":"","code":"# Set up network of smoking cessation data head(smoking) #>   studyn trtn                   trtc  r   n #> 1      1    1        No intervention  9 140 #> 2      1    3 Individual counselling 23 140 #> 3      1    4      Group counselling 10 138 #> 4      2    2              Self-help 11  78 #> 5      2    3 Individual counselling 12  85 #> 6      2    4      Group counselling 29 170  smk_net <- set_agd_arm(smoking,                        study = studyn,                        trt = trtc,                        r = r,                        n = n,                        trt_ref = \"No intervention\")  # Print details smk_net #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected  # Convert to igraph object igraph::as.igraph(smk_net)  # Edges combined by default #> IGRAPH 0ec1774 UN-- 4 6 --  #> + attr: name (v/c), .sample_size (v/n), .nstudy (e/n), .type (e/c) #> + edges from 0ec1774 (vertex names): #> [1] No intervention       --Group counselling      #> [2] No intervention       --Individual counselling #> [3] Group counselling     --Individual counselling #> [4] No intervention       --Self-help              #> [5] Group counselling     --Self-help              #> [6] Individual counselling--Self-help              igraph::as.igraph(smk_net, collapse = FALSE)  # Without combining edges #> IGRAPH 91f57bd UN-- 4 28 --  #> + attr: name (v/c), .sample_size (v/n), .study (e/c), .type (e/c) #> + edges from 91f57bd (vertex names): #>  [1] No intervention       --Group counselling      #>  [2] No intervention       --Individual counselling #>  [3] Group counselling     --Individual counselling #>  [4] Group counselling     --Individual counselling #>  [5] Group counselling     --Self-help              #>  [6] Individual counselling--Self-help              #>  [7] No intervention       --Individual counselling #>  [8] No intervention       --Individual counselling #> + ... omitted several edges  # Convert to tbl_graph object tidygraph::as_tbl_graph(smk_net)  # Edges combined by default #> # A tbl_graph: 4 nodes and 6 edges #> # #> # An undirected simple graph with 1 component #> # #> # Node Data: 4 × 2 (active) #>   name                   .sample_size #>   <chr>                         <dbl> #> 1 No intervention                7231 #> 2 Group counselling               555 #> 3 Individual counselling         7383 #> 4 Self-help                      1571 #> # #> # Edge Data: 6 × 4 #>    from    to .nstudy .type #>   <int> <int>   <int> <chr> #> 1     1     2       2 AgD   #> 2     1     3      15 AgD   #> 3     2     3       4 AgD   #> # … with 3 more rows tidygraph::as_tbl_graph(smk_net, collapse = FALSE)  # Without combining edges #> # A tbl_graph: 4 nodes and 28 edges #> # #> # An undirected multigraph with 1 component #> # #> # Node Data: 4 × 2 (active) #>   name                   .sample_size #>   <chr>                         <dbl> #> 1 No intervention                7231 #> 2 Group counselling               555 #> 3 Individual counselling         7383 #> 4 Self-help                      1571 #> # #> # Edge Data: 28 × 4 #>    from    to .study .type #>   <int> <int> <chr>  <chr> #> 1     1     2 1      AgD   #> 2     1     3 1      AgD   #> 3     2     3 1      AgD   #> # … with 25 more rows"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/hta_psoriasis.html","id":null,"dir":"Reference","previous_headings":"","what":"HTA Plaque Psoriasis — hta_psoriasis","title":"HTA Plaque Psoriasis — hta_psoriasis","text":"Data frame containing results 16 trials comparing 8 treatments moderate--severe plaque psoriasis HTA report (Woolacott et al. 2006) , analysed TSD2 (Dias et al. 2011) . Outcomes success/failure achieve 50%, 75%, 90% reduction symptoms Psoriasis Area Severity Index (PASI) scale. studies report three ordered outcomes, others one two. latter coded missing values (see details).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/hta_psoriasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTA Plaque Psoriasis — hta_psoriasis","text":"","code":"hta_psoriasis"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/hta_psoriasis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HTA Plaque Psoriasis — hta_psoriasis","text":"data frame 39 rows 9 variables: studyn numeric study ID studyc study name year year publication trtn numeric treatment code trtc treatment name sample_size sample size arm PASI50, PASI75, PASI90 ordered multinomial outcome counts (exclusive, see details)","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/hta_psoriasis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTA Plaque Psoriasis — hta_psoriasis","text":"Outcome counts \"exclusive\"; , study reporting outcomes, counts represent categories 50 < PASI < 75, 75 < PASI < 90, 90 < PASI < 100, named lower end interval. (opposed \"inclusive\" counts, represent overlapping categories PASI > 50, PASI > 70, PASI > 90.) count fourth category (lowest), 0 < PASI < 50, equal sample_size - PASI50 - PASI75 - PASI90. Missing values used studies report subset outcomes. study reporting two outcomes, say 50 75, counts represent 50 < PASI < 75 75 < PASI < 100. study reporting one outcome, say PASI 75, count represents 75 < PASI < 100.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/hta_psoriasis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HTA Plaque Psoriasis — hta_psoriasis","text":"Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Woolacott N, Hawkins N, Mason , Kainth , Khadjesari Z, Bravo Vergel Y, Misso K, Light K, Chalmers R, Sculpher M, Riemsma R (2006). “Etanercept efalizumab treatment psoriasis: systematic review.” Health Technology Assessment, 10(46). doi: 10.3310/hta10460 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/is_network_connected.html","id":null,"dir":"Reference","previous_headings":"","what":"Check network connectedness — is_network_connected","title":"Check network connectedness — is_network_connected","text":"Check whether network connected - whether path study evidence linking every pair treatments network.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/is_network_connected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check network connectedness — is_network_connected","text":"","code":"is_network_connected(network)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/is_network_connected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check network connectedness — is_network_connected","text":"network nma_data object, created functions set_*() combine_network().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/is_network_connected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check network connectedness — is_network_connected","text":"Logical TRUE FALSE","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/is_network_connected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check network connectedness — is_network_connected","text":"Models still run disconnected networks. However, estimated relative effects treatments across disconnected parts network entirely based prior distribution (typically uncertain), information update prior distribution. Relative effects within connected sub-network estimated sub-network analysed separately.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/is_network_connected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check network connectedness — is_network_connected","text":"","code":"## Smoking cessation # Set up network of smoking cessation data head(smoking) #>   studyn trtn                   trtc  r   n #> 1      1    1        No intervention  9 140 #> 2      1    3 Individual counselling 23 140 #> 3      1    4      Group counselling 10 138 #> 4      2    2              Self-help 11  78 #> 5      2    3 Individual counselling 12  85 #> 6      2    4      Group counselling 29 170  smk_net <- set_agd_arm(smoking,                        study = studyn,                        trt = trtc,                        r = r,                        n = n,                        trt_ref = \"No intervention\")  # Print details smk_net #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected  is_network_connected(smk_net)  # TRUE, network is connected #> [1] TRUE ## A disconnected network disc_net <- set_agd_arm(smoking[smoking$studyn %in% c(15, 21), ],                         study = studyn,                         trt = trtc,                         r = r,                         n = n) is_network_connected(disc_net)  # FALSE, network is disconnected #> [1] FALSE disc_net #> A network with 2 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                             #>  15    2: No intervention | Group counselling #>  21    2: Self-help | Individual counselling  #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 2 #> Reference treatment is: Group counselling #> Network is disconnected plot(disc_net)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/logitNormal.html","id":null,"dir":"Reference","previous_headings":"","what":"The logit Normal distribution — qlogitnorm","title":"The logit Normal distribution — qlogitnorm","text":"provide convenient extensions [dpq]logitnorm functions package logitnorm, allow distribution specified terms mean standard deviation, instead logit-mean logit-sd.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/logitNormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The logit Normal distribution — qlogitnorm","text":"","code":"qlogitnorm(p, mu = 0, sigma = 1, ..., mean, sd)  dlogitnorm(x, mu = 0, sigma = 1, ..., mean, sd)  plogitnorm(q, mu = 0, sigma = 1, ..., mean, sd)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/logitNormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The logit Normal distribution — qlogitnorm","text":"p, x vector quantiles mu, sigma, ... see logitnorm mean, sd mean standard deviation, overriding mu sigma specified q vector probabilities","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Model comparison using the loo package — loo.stan_nma","title":"Model comparison using the loo package — loo.stan_nma","text":"loo() waic() functions loo package may called directly stan_nma stan_mlnmr objects.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model comparison using the loo package — loo.stan_nma","text":"","code":"# S3 method for stan_nma loo(x, ...)  # S3 method for stan_nma waic(x, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model comparison using the loo package — loo.stan_nma","text":"x object class stan_nma stan_mlnmr ... arguments loo() waic()","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/mcmc_array-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with 3D MCMC arrays — mcmc_array-class","title":"Working with 3D MCMC arrays — mcmc_array-class","text":"3D MCMC arrays (Iterations, Chains, Parameters) produced .array() methods applied stan_nma nma_summary objects.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/mcmc_array-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with 3D MCMC arrays — mcmc_array-class","text":"","code":"# S3 method for mcmc_array summary(object, ..., probs = c(0.025, 0.25, 0.5, 0.75, 0.975))  # S3 method for mcmc_array print(x, ...)  # S3 method for mcmc_array names(x)  # S3 method for mcmc_array names(x) <- value"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/mcmc_array-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with 3D MCMC arrays — mcmc_array-class","text":"... arguments passed methods probs Numeric vector quantiles interest x, object 3D MCMC array class mcmc_array value Character vector replacement parameter names","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/mcmc_array-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Working with 3D MCMC arrays — mcmc_array-class","text":"summary() method returns nma_summary object, print()method returns x invisibly. names() method returns character vector parameter names, names()<- returns object updated parameter names.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/mcmc_array-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with 3D MCMC arrays — mcmc_array-class","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Working with arrays of posterior draws (as mcmc_array objects) is # convenient when transforming parameters  # Transforming log odds ratios to odds ratios LOR_array <- as.array(relative_effects(smk_fit_RE)) OR_array <- exp(LOR_array)  # mcmc_array objects can be summarised to produce a nma_summary object smk_OR_RE <- summary(OR_array)  # This can then be printed or plotted smk_OR_RE #>                           mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> d[Group counselling]      3.32 1.68 1.31 2.24 2.95 3.92  7.66     1755     2056 #> d[Individual counselling] 2.39 0.60 1.48 2.00 2.30 2.68  3.76     1162     1855 #> d[Self-help]              1.79 0.85 0.72 1.23 1.63 2.12  3.94     1739     2233 #>                           Rhat #> d[Group counselling]         1 #> d[Individual counselling]    1 #> d[Self-help]                 1 plot(smk_OR_RE, ref_line = 1)   # Transforming heterogeneity SD to variance tau_array <- as.array(smk_fit_RE, pars = \"tau\") tausq_array <- tau_array^2  # Correct parameter names names(tausq_array) <- \"tausq\"  # Summarise summary(tausq_array) #>       mean   sd 2.5% 25%  50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> tausq 0.75 0.36  0.3 0.5 0.68 0.9  1.66     1255     1655    1 # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial outcome data — multi","title":"Multinomial outcome data — multi","text":"function aids specification multinomial outcome data setting network set_agd_arm() set_ipd(). takes set columns (, generally, numeric vectors length) outcome counts category, binds together produce matrix.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial outcome data — multi","text":"","code":"multi(..., inclusive = FALSE, type = c(\"ordered\", \"competing\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial outcome data — multi","text":"... Two numeric columns (vectors) category counts. Argument names (optional) used label categories. inclusive Logical, ordered category counts inclusive (TRUE) exclusive (FALSE)? Default FALSE. used ordered = TRUE. See details. type String, indicating whether categories \"ordered\" \"competing\". Currently ordered categorical outcomes supported modelling functions package.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial outcome data — multi","text":"matrix (exclusive) category counts","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multinomial outcome data — multi","text":"specifying ordered categorical counts, can either given exclusive counts (inclusive = FALSE, default) individuals counted highest category achieve, inclusive counts (inclusive = TRUE) individuals counted every category including highest category achieved. (Competing outcomes, nature, always specified exclusive counts.) NA values can used indicate categories/cutpoints measured.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multinomial outcome data — multi","text":"","code":"# These two data sets specify the same ordered categorical data for outcomes # r0 < r1 < r2, but the first uses the \"inclusive\" format and the second the # \"exclusive\" format. df_inclusive <- tibble::tribble(~r0, ~r1, ~r2,                                 1, 1, 1,                                 5, 4, 1,                                 5, 2, 2,                                 10, 5, 0,                                 5, 5, 0,                                 7, NA, 6,   # Achieved r2 or not (no r1)                                 10, 4, NA)  # Achieved r1 or not (no r2)  df_exclusive <- tibble::tribble(~r0, ~r1, ~r2,                                 0, 0, 1,                                 1, 3, 1,                                 3, 0, 2,                                 5, 5, 0,                                 0, 5, 0,                                 1, NA, 6,   # Achieved r2 or not (no r1)                                 6, 4, NA)   # Achieved r1 or not (no r2)  (r_inclusive <- with(df_inclusive, multi(r0, r1, r2, inclusive = TRUE))) #>      r0 r1 r2 #> [1,]  0  0  1 #> [2,]  1  3  1 #> [3,]  3  0  2 #> [4,]  5  5  0 #> [5,]  0  5  0 #> [6,]  1 NA  6 #> [7,]  6  4 NA #> attr(,\"class\") #> [1] \"multi_ordered\" \"matrix\"        \"array\"         (r_exclusive <- with(df_exclusive, multi(r0, r1, r2, inclusive = FALSE))) #>      r0 r1 r2 #> [1,]  0  0  1 #> [2,]  1  3  1 #> [3,]  3  0  2 #> [4,]  5  5  0 #> [5,]  0  5  0 #> [6,]  1 NA  6 #> [7,]  6  4 NA #> attr(,\"class\") #> [1] \"multi_ordered\" \"matrix\"        \"array\"          # Counts are always stored in exclusive format stopifnot(isTRUE(all.equal(r_inclusive, r_exclusive)))   ## HTA Plaque Psoriasis library(dplyr)  # Ordered outcomes here are given as \"exclusive\" counts head(hta_psoriasis) #>   studyn   studyc year trtn             trtc sample_size PASI50 PASI75 PASI90 #> 1      1  Elewski 2004    1  Supportive care         193     12      5      1 #> 2      1  Elewski 2004    2 Etanercept 25 mg         196     59     46     21 #> 3      1  Elewski 2004    3 Etanercept 50 mg         194     54     56     40 #> 4      2 Gottlieb 2003    1  Supportive care          55      5      1      0 #> 5      2 Gottlieb 2003    2 Etanercept 25 mg          57     23     11      6 #> 6      3  Lebwohl 2003    1  Supportive care         122     13      5      1  # Calculate lowest category count (failure to achieve PASI 50) pso_dat <- hta_psoriasis %>%   mutate(`PASI<50` = sample_size - rowSums(cbind(PASI50, PASI75, PASI90), na.rm = TRUE))  # Set up network pso_net <- set_agd_arm(pso_dat,                        study = paste(studyc, year),                        trt = trtc,                        r = multi(`PASI<50`, PASI50, PASI75, PASI90,                                  inclusive = FALSE,                                  type = \"ordered\"))  pso_net #> A network with 16 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study         Treatments                                               #>  ACD2058g 2004 2: Supportive care | Efalizumab                          #>  ACD2600g 2004 2: Supportive care | Efalizumab                          #>  Altmeyer 1994 2: Supportive care | Fumaderm                            #>  Chaudari 2001 2: Supportive care | Infliximab                          #>  Elewski 2004  3: Supportive care | Etanercept 25 mg | Etanercept 50 mg #>  Ellis 1991    2: Supportive care | Ciclosporin                         #>  Gordon 2003   2: Supportive care | Efalizumab                          #>  Gottlieb 2003 2: Supportive care | Etanercept 25 mg                    #>  Gottlieb 2004 2: Supportive care | Infliximab                          #>  Guenther 1991 2: Supportive care | Ciclosporin                         #>  ... plus 6 more studies #>  #>  Outcome type: ordered (4 categories) #> ------------------------------------------------------------------------------------ #> Total number of treatments: 8 #> Total number of studies: 16 #> Reference treatment is: Supportive care #> Network is connected"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multinma-package.html","id":null,"dir":"Reference","previous_headings":"","what":"multinma: A Package for Network Meta-Analysis of Individual and Aggregate\nData in Stan — multinma-package","title":"multinma: A Package for Network Meta-Analysis of Individual and Aggregate\nData in Stan — multinma-package","text":"R package performing network meta-analysis network meta-regression aggregate data, individual patient data, mixtures .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multinma-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"multinma: A Package for Network Meta-Analysis of Individual and Aggregate\nData in Stan — multinma-package","text":"Network meta-analysis (NMA) combines (aggregate) data multiple studies multiple treatments order produce consistent estimates relative treatment effects pair treatments network (Dias et al. 2011) . Network meta-regression (NMR) extends NMA include covariates, allowing adjustment differences effect-modifying variables studies (Dias et al. 2011) . NMR typically performed using aggregate data (AgD), lacks power prone ecological bias. NMR individual patient data (IPD) gold standard, data available. Multilevel network meta-regression (ML-NMR) allows IPD AgD incorporated together network meta-regression (Phillippo et al. 2020; Phillippo 2019) . IPD NMR, individual-level regression model defined. AgD studies fitted integrating individual-level model respective covariate distributions. correctly links two levels model (instead \"plugging \" mean covariate values), avoiding aggregation bias. Population-adjusted treatment effects (Phillippo et al. 2016)  can produced study population network, external target population. Models estimated Bayesian framework using Stan (Carpenter et al. 2017) . Quasi-Monte Carlo numerical integration based Sobol' sequences used integration ML-NMR models, Gaussian copula account correlations covariates (Phillippo et al. 2020; Phillippo 2019) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multinma-package.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting Started","title":"multinma: A Package for Network Meta-Analysis of Individual and Aggregate\nData in Stan — multinma-package","text":"good place start package vignettes walk example analyses, see vignette(\"vignette_overview\") overview. series NICE Technical Support Documents evidence synthesis gives detailed introduction network meta-analysis: Dias S, Welton NJ, Sutton AJ, Caldwell DM, Lu G, Reken S, Ades AE (2011). “NICE DSU Technical Support Documents 1-7: Evidence Synthesis Decision Making.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Multilevel network meta-regression set following methods paper: Phillippo DM, Dias S, Ades AE, Belger M, Brnabic , Schacht , Saure D, Kadziola Z, Welton NJ (2020). “Multilevel Network Meta-Regression population-adjusted treatment comparisons.” Journal Royal Statistical Society: Series (Statistics Society), 183(3), 1189--1210. doi: 10.1111/rssa.12579 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/multinma-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"multinma: A Package for Network Meta-Analysis of Individual and Aggregate\nData in Stan — multinma-package","text":"Carpenter B, Gelman , Hoffman MD, Lee D, Goodrich B, Betancourt M, Brubaker M, Guo J, Li P, Riddell (2017). “Stan: Probabilistic Programming Language.” Journal Statistical Software, 76(1). doi: 10.18637/jss.v076.i01 . Dias S, Sutton AJ, Welton NJ, Ades AE (2011). “NICE DSU Technical Support Document 3: Heterogeneity: subgroups, meta-regression, bias bias-adjustment.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Phillippo DM (2019). Calibration Treatment Effects Network Meta-Analysis using Individual Patient Data. Ph.D. thesis, University Bristol. Available https://research-information.bris.ac.uk/. Phillippo DM, Ades AE, Dias S, Palmer S, Abrams KR, Welton NJ (2016). “NICE DSU Technical Support Document 18: Methods population-adjusted indirect comparisons submission NICE.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Phillippo DM, Dias S, Ades AE, Belger M, Brnabic , Schacht , Saure D, Kadziola Z, Welton NJ (2020). “Multilevel Network Meta-Regression population-adjusted treatment comparisons.” Journal Royal Statistical Society: Series (Statistics Society), 183(3), 1189--1210. doi: 10.1111/rssa.12579 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":null,"dir":"Reference","previous_headings":"","what":"Network meta-analysis models — nma","title":"Network meta-analysis models — nma","text":"nma function fits network meta-analysis (multilevel) network meta-regression models Stan.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network meta-analysis models — nma","text":"","code":"nma(   network,   consistency = c(\"consistency\", \"ume\"),   trt_effects = c(\"fixed\", \"random\"),   regression = NULL,   class_interactions = c(\"common\", \"exchangeable\", \"independent\"),   likelihood = NULL,   link = NULL,   ...,   prior_intercept = .default(normal(scale = 100)),   prior_trt = .default(normal(scale = 10)),   prior_het = .default(half_normal(scale = 5)),   prior_het_type = c(\"sd\", \"var\", \"prec\"),   prior_reg = .default(normal(scale = 10)),   prior_aux = .default(),   QR = FALSE,   center = TRUE,   adapt_delta = NULL,   int_thin = max(network$n_int%/%10, 1) )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network meta-analysis models — nma","text":"network nma_data object, created functions set_*(), combine_network(), add_integration() consistency Character string specifying type ()consistency model fit, currently either \"consistency\" \"ume\" trt_effects Character string specifying either \"fixed\" \"random\" effects regression one-sided model formula, specifying prognostic effect-modifying terms regression model. references treatment use .trt special variable, example specifying effect modifier interactions variable:.trt (see details). class_interactions Character string specifying whether effect modifier interactions specified \"common\", \"exchangeable\", \"independent\". likelihood Character string specifying likelihood, unspecified inferred data (see details) link Character string specifying link function, unspecified default canonical link (see details) ... arguments passed sampling(), iter, chains, cores, etc. prior_intercept Specification prior distribution intercept prior_trt Specification prior distribution treatment effects prior_het Specification prior distribution heterogeneity (trt_effects = \"random\") prior_het_type Character string specifying whether prior distribution prior_het placed heterogeneity standard deviation \\(\\tau\\) (\"sd\", default), variance \\(\\tau^2\\) (\"var\"), precision \\(1/\\tau^2\\) (\"prec\"). prior_reg Specification prior distribution regression coefficients (regression formula specified) prior_aux Specification prior distribution auxiliary parameter, applicable (see details) QR Logical scalar (default FALSE), whether apply QR decomposition model design matrix center Logical scalar (default TRUE), whether center (numeric) regression terms overall means adapt_delta See adapt_delta details int_thin single integer value, thinning factor returning cumulative estimates integration error","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network meta-analysis models — nma","text":"nma() returns stan_nma object, nma.fit() returns stanfitobject.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network meta-analysis models — nma","text":"specifying model formula regression argument, usual formula syntax available (interpreted model.matrix()). additional requirement special variable .trt used refer treatment. example, effect modifier interactions specified variable:.trt. Prognostic (main) effects interactions can included together compactly variable*.trt, expands variable + variable:.trt (plus .trt, already NMA model). advanced user, additional specials .study .trtclass also available, refer studies (specified) treatment classes respectively. See ?priors details prior specification. Default prior distributions available, may appropriate particular setting raise warning used. attempt made tailor defaults data provided. Please consider appropriate prior distributions particular setting, accounting scales outcomes covariates, etc. function plot_prior_posterior() may useful examining influence chosen prior distributions posterior distributions, summary() method nma_prior objects prints prior intervals.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"likelihoods-and-link-functions","dir":"Reference","previous_headings":"","what":"Likelihoods and link functions","title":"Network meta-analysis models — nma","text":"Currently, following likelihoods link functions supported data type: bernoulli2 binomial2 likelihoods correspond two-parameter Binomial likelihood arm-based AgD, closely matches underlying Poisson Binomial distribution summarised aggregate outcomes ML-NMR model typical (one parameter) Binomial distribution (see Phillippo et al. 2020) . cloglog link used, including offset log follow-time (.e. regression = ~offset(log(time))) results model log hazard (see Dias et al. 2011) . details likelihood link function given Dias et al. (2011) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"auxiliary-parameters","dir":"Reference","previous_headings":"","what":"Auxiliary parameters","title":"Network meta-analysis models — nma","text":"Auxiliary parameters present following models.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"normal-likelihood-with-ipd","dir":"Reference","previous_headings":"","what":"Normal likelihood with IPD","title":"Network meta-analysis models — nma","text":"Normal likelihood fitted IPD, auxiliary parameters arm-level standard deviations \\(\\sigma_{jk}\\) treatment \\(k\\) study \\(j\\).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"ordered-multinomial-likelihood","dir":"Reference","previous_headings":"","what":"Ordered multinomial likelihood","title":"Network meta-analysis models — nma","text":"fitting model \\(M\\) ordered outcomes, auxiliary parameters latent cutoffs category, \\(c_0 < c_1 < \\dots <   c_M\\). \\(c_2\\) \\(c_{M-1}\\) estimated; fix \\(c_0 =   -\\infty\\), \\(c_1 = 0\\), \\(c_M = \\infty\\). specifying priors latent cutoffs, choose specify priors differences \\(c_{m+1} - c_m\\). Stan automatically truncates priors ordering constraints satisfied.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Network meta-analysis models — nma","text":"Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Phillippo DM, Dias S, Ades AE, Belger M, Brnabic , Schacht , Saure D, Kadziola Z, Welton NJ (2020). “Multilevel Network Meta-Regression population-adjusted treatment comparisons.” Journal Royal Statistical Society: Series (Statistics Society), 183(3), 1189--1210. doi: 10.1111/rssa.12579 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network meta-analysis models — nma","text":"","code":"## Smoking cessation NMA # Set up network of smoking cessation data head(smoking) #>   studyn trtn                   trtc  r   n #> 1      1    1        No intervention  9 140 #> 2      1    3 Individual counselling 23 140 #> 3      1    4      Group counselling 10 138 #> 4      2    2              Self-help 11  78 #> 5      2    3 Individual counselling 12  85 #> 6      2    4      Group counselling 29 170  smk_net <- set_agd_arm(smoking,                        study = studyn,                        trt = trtc,                        r = r,                        n = n,                        trt_ref = \"No intervention\")  # Print details smk_net #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected  # \\donttest{ # Fitting a fixed effect model smk_fit_FE <- nma(smk_net, refresh = if (interactive()) 200 else 0,                   trt_effects = \"fixed\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100))  smk_fit_FE #> A fixed effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                               mean se_mean   sd     2.5%      25%      50% #> d[Group counselling]          0.84     0.0 0.18     0.49     0.72     0.84 #> d[Individual counselling]     0.77     0.0 0.06     0.66     0.73     0.77 #> d[Self-help]                  0.23     0.0 0.13    -0.02     0.15     0.23 #> lp__                      -5859.47     0.1 3.75 -5867.74 -5861.77 -5859.13 #>                                75%    97.5% n_eff Rhat #> d[Group counselling]          0.97     1.19  1728    1 #> d[Individual counselling]     0.81     0.88  1586    1 #> d[Self-help]                  0.31     0.47  2667    1 #> lp__                      -5856.78 -5853.17  1553    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:49:35 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }  # \\donttest{ # Fitting a random effects model smk_fit_RE <- nma(smk_net, refresh = if (interactive()) 200 else 0,                   trt_effects = \"random\",                   prior_intercept = normal(scale = 100),                   prior_trt = normal(scale = 100),                   prior_het = normal(scale = 5))  smk_fit_RE #> A random effects NMA with a binomial likelihood (logit link). #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                               mean se_mean   sd     2.5%      25%      50% #> d[Group counselling]          1.11    0.01 0.45     0.26     0.80     1.09 #> d[Individual counselling]     0.84    0.01 0.24     0.38     0.68     0.84 #> d[Self-help]                  0.49    0.01 0.41    -0.32     0.23     0.49 #> lp__                      -5767.85    0.20 6.59 -5781.91 -5772.11 -5767.56 #> tau                           0.85    0.01 0.19     0.54     0.71     0.82 #>                                75%    97.5% n_eff Rhat #> d[Group counselling]          1.40     2.05  2080    1 #> d[Individual counselling]     0.99     1.33  1316    1 #> d[Self-help]                  0.77     1.29  1665    1 #> lp__                      -5763.13 -5755.79  1080    1 #> tau                           0.95     1.30  1146    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:49:49 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }  # \\donttest{ # Fitting an unrelated mean effects (inconsistency) model smk_fit_RE_UME <- nma(smk_net, refresh = if (interactive()) 200 else 0,                       consistency = \"ume\",                       trt_effects = \"random\",                       prior_intercept = normal(scale = 100),                       prior_trt = normal(scale = 100),                       prior_het = normal(scale = 5))  smk_fit_RE_UME #> A random effects NMA with a binomial likelihood (logit link). #> An inconsistency model ('ume') was fitted. #> Inference for Stan model: binomial_1par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                                     mean se_mean   sd     2.5% #> d[Group counselling vs. No intervention]            1.15    0.02 0.82    -0.34 #> d[Individual counselling vs. No intervention]       0.92    0.01 0.27     0.39 #> d[Self-help vs. No intervention]                    0.34    0.01 0.59    -0.85 #> d[Individual counselling vs. Group counselling]    -0.29    0.01 0.62    -1.51 #> d[Self-help vs. Group counselling]                 -0.63    0.02 0.72    -2.09 #> d[Self-help vs. Individual counselling]             0.18    0.02 1.09    -1.97 #> lp__                                            -5765.20    0.19 6.33 -5778.61 #> tau                                                 0.94    0.01 0.23     0.59 #>                                                      25%      50%      75% #> d[Group counselling vs. No intervention]            0.61     1.10     1.64 #> d[Individual counselling vs. No intervention]       0.73     0.91     1.09 #> d[Self-help vs. No intervention]                   -0.04     0.33     0.72 #> d[Individual counselling vs. Group counselling]    -0.69    -0.30     0.10 #> d[Self-help vs. Group counselling]                 -1.09    -0.61    -0.18 #> d[Self-help vs. Individual counselling]            -0.50     0.18     0.88 #> lp__                                            -5769.27 -5764.72 -5760.81 #> tau                                                 0.78     0.91     1.07 #>                                                    97.5% n_eff Rhat #> d[Group counselling vs. No intervention]            2.94  2704    1 #> d[Individual counselling vs. No intervention]       1.48  1277    1 #> d[Self-help vs. No intervention]                    1.60  2208    1 #> d[Individual counselling vs. Group counselling]     0.95  2471    1 #> d[Self-help vs. Group counselling]                  0.76  2271    1 #> d[Self-help vs. Individual counselling]             2.38  2905    1 #> lp__                                            -5753.85  1101    1 #> tau                                                 1.47  1203    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:50:04 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }   ## Plaque psoriasis ML-NMR # Set up plaque psoriasis network combining IPD and AgD library(dplyr) pso_ipd <- filter(plaque_psoriasis_ipd,                   studyc %in% c(\"UNCOVER-1\", \"UNCOVER-2\", \"UNCOVER-3\"))  pso_agd <- filter(plaque_psoriasis_agd,                   studyc == \"FIXTURE\")  head(pso_ipd) #>      studyc      trtc_long    trtc trtn pasi75 pasi90 pasi100 age  bmi pasi_w0 #> 1 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  34 32.2    18.2 #> 2 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  64 41.9    23.4 #> 3 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       0  42 26.2    12.8 #> 4 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      0      0       0  45 52.9    36.0 #> 5 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      0       0  67 22.9    20.9 #> 6 UNCOVER-1 Ixekizumab Q2W IXE_Q2W    2      1      1       1  57 22.4    18.2 #>    male bsa weight durnpso prevsys   psa #> 1  TRUE  18   98.1     6.7    TRUE  TRUE #> 2  TRUE  33  129.6    14.5   FALSE  TRUE #> 3  TRUE  33   78.0    26.5    TRUE FALSE #> 4 FALSE  50  139.9    25.0    TRUE  TRUE #> 5 FALSE  35   54.2    11.9    TRUE FALSE #> 6  TRUE  29   67.5    15.2    TRUE FALSE head(pso_agd) #>    studyc          trtc_long    trtc trtn pasi75_r pasi75_n pasi90_r pasi90_n #> 1 FIXTURE         Etanercept     ETN    4      142      323       67      323 #> 2 FIXTURE            Placebo     PBO    1       16      324        5      324 #> 3 FIXTURE Secukinumab 150 mg SEC_150    5      219      327      137      327 #> 4 FIXTURE Secukinumab 300 mg SEC_300    6      249      323      175      323 #>   pasi100_r pasi100_n sample_size_w0 age_mean age_sd bmi_mean bmi_sd #> 1        14       323            326     43.8   13.0     28.7    5.9 #> 2         0       324            326     44.1   12.6     27.9    6.1 #> 3        47       327            327     45.4   12.9     28.4    5.9 #> 4        78       323            327     44.5   13.2     28.4    6.4 #>   pasi_w0_mean pasi_w0_sd male bsa_mean bsa_sd weight_mean weight_sd #> 1         23.2        9.8 71.2     33.6   18.0        84.6      20.5 #> 2         24.1       10.5 72.7     35.2   19.1        82.0      20.4 #> 3         23.7       10.5 72.2     34.5   19.4        83.6      20.8 #> 4         23.9        9.9 68.5     34.3   19.2        83.0      21.6 #>   durnpso_mean durnpso_sd prevsys  psa #> 1         16.4       12.0    65.6 13.5 #> 2         16.6       11.6    62.6 15.0 #> 3         17.3       12.2    64.8 15.0 #> 4         15.8       12.3    63.0 15.3  pso_ipd <- pso_ipd %>%   mutate(# Variable transformations     bsa = bsa / 100,     prevsys = as.numeric(prevsys),     psa = as.numeric(psa),     weight = weight / 10,     durnpso = durnpso / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\"),     # Check complete cases for covariates of interest     complete = complete.cases(durnpso, prevsys, bsa, weight, psa)   )  pso_agd <- pso_agd %>%   mutate(     # Variable transformations     bsa_mean = bsa_mean / 100,     bsa_sd = bsa_sd / 100,     prevsys = prevsys / 100,     psa = psa / 100,     weight_mean = weight_mean / 10,     weight_sd = weight_sd / 10,     durnpso_mean = durnpso_mean / 10,     durnpso_sd = durnpso_sd / 10,     # Treatment classes     trtclass = case_when(trtn == 1 ~ \"Placebo\",                          trtn %in% c(2, 3, 5, 6) ~ \"IL blocker\",                          trtn == 4 ~ \"TNFa blocker\")   )  # Exclude small number of individuals with missing covariates pso_ipd <- filter(pso_ipd, complete)  pso_net <- combine_network(   set_ipd(pso_ipd,           study = studyc,           trt = trtc,           r = pasi75,           trt_class = trtclass),   set_agd_arm(pso_agd,               study = studyc,               trt = trtc,               r = pasi75_r,               n = pasi75_n,               trt_class = trtclass) )  # Print network details pso_net #> A network with 3 IPD studies, and 1 AgD study (arm-based). #>  #> ------------------------------------------------------------------- IPD studies ----  #>  Study     Treatments                       #>  UNCOVER-1 3: IXE_Q2W | IXE_Q4W | PBO       #>  UNCOVER-2 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  UNCOVER-3 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  #>  Outcome type: binary #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study   Treatments                       #>  FIXTURE 4: ETN | PBO | SEC_150 | SEC_300 #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 6, in 3 classes #> Total number of studies: 4 #> Reference treatment is: PBO #> Network is connected  # Add integration points to the network pso_net <- add_integration(pso_net,   durnpso = distr(qgamma, mean = durnpso_mean, sd = durnpso_sd),   prevsys = distr(qbern, prob = prevsys),   bsa = distr(qlogitnorm, mean = bsa_mean, sd = bsa_sd),   weight = distr(qgamma, mean = weight_mean, sd = weight_sd),   psa = distr(qbern, prob = psa),   n_int = 1000) #> Using weighted average correlation matrix computed from IPD studies.  # \\donttest{ # Fitting a ML-NMR model. # Specify a regression model to include effect modifier interactions for five # covariates, along with main (prognostic) effects. We use a probit link and # specify that the two-parameter Binomial approximation for the aggregate-level # likelihood should be used. We set treatment-covariate interactions to be equal # within each class. We narrow the possible range for random initial values with # init_r = 0.1, since probit models in particular are often hard to initialise. # Using the QR decomposition greatly improves sampling efficiency here, as is # often the case for regression models. pso_fit <- nma(pso_net, refresh = if (interactive()) 200 else 0,                trt_effects = \"fixed\",                link = \"probit\",                likelihood = \"bernoulli2\",                regression = ~(durnpso + prevsys + bsa + weight + psa)*.trt,                class_interactions = \"common\",                prior_intercept = normal(scale = 10),                prior_trt = normal(scale = 10),                prior_reg = normal(scale = 10),                init_r = 0.1,                QR = TRUE) #> Note: Setting \"PBO\" as the network reference treatment. pso_fit #> A fixed effects ML-NMR with a bernoulli2 likelihood (probit link). #> Regression model: ~(durnpso + prevsys + bsa + weight + psa) * .trt. #> Centred covariates at the following overall mean values: #>   durnpso   prevsys       bsa    weight       psa  #> 1.8259772 0.6496080 0.2917665 8.9328237 0.2167777  #> Inference for Stan model: binomial_2par. #> 4 chains, each with iter=2000; warmup=1000; thin=1;  #> post-warmup draws per chain=1000, total post-warmup draws=4000. #>  #>                                         mean se_mean   sd     2.5%      25% #> beta[durnpso]                           0.05    0.00 0.06    -0.07     0.01 #> beta[prevsys]                          -0.14    0.00 0.16    -0.45    -0.24 #> beta[bsa]                              -0.06    0.01 0.45    -1.00    -0.35 #> beta[weight]                            0.04    0.00 0.03    -0.02     0.02 #> beta[psa]                              -0.08    0.00 0.17    -0.43    -0.19 #> beta[durnpso:.trtclassTNFa blocker]    -0.03    0.00 0.07    -0.17    -0.08 #> beta[durnpso:.trtclassIL blocker]      -0.01    0.00 0.07    -0.14    -0.06 #> beta[prevsys:.trtclassTNFa blocker]     0.19    0.00 0.19    -0.18     0.06 #> beta[prevsys:.trtclassIL blocker]       0.06    0.00 0.17    -0.27    -0.05 #> beta[bsa:.trtclassTNFa blocker]         0.04    0.01 0.51    -0.92    -0.32 #> beta[bsa:.trtclassIL blocker]           0.28    0.01 0.49    -0.64    -0.04 #> beta[weight:.trtclassTNFa blocker]     -0.17    0.00 0.04    -0.24    -0.19 #> beta[weight:.trtclassIL blocker]       -0.10    0.00 0.03    -0.16    -0.12 #> beta[psa:.trtclassTNFa blocker]        -0.05    0.00 0.21    -0.46    -0.19 #> beta[psa:.trtclassIL blocker]           0.01    0.00 0.19    -0.35    -0.12 #> d[ETN]                                  1.55    0.00 0.08     1.39     1.49 #> d[IXE_Q2W]                              2.95    0.00 0.09     2.78     2.90 #> d[IXE_Q4W]                              2.54    0.00 0.08     2.38     2.49 #> d[SEC_150]                              2.14    0.00 0.12     1.91     2.07 #> d[SEC_300]                              2.45    0.00 0.12     2.21     2.37 #> lp__                                -1576.39    0.09 3.48 -1584.10 -1578.55 #>                                          50%      75%    97.5% n_eff Rhat #> beta[durnpso]                           0.05     0.09     0.16  6361    1 #> beta[prevsys]                          -0.14    -0.03     0.18  5379    1 #> beta[bsa]                              -0.04     0.25     0.78  5060    1 #> beta[weight]                            0.04     0.06     0.10  6761    1 #> beta[psa]                              -0.08     0.04     0.25  5613    1 #> beta[durnpso:.trtclassTNFa blocker]    -0.03     0.02     0.11  7115    1 #> beta[durnpso:.trtclassIL blocker]      -0.01     0.03     0.12  7528    1 #> beta[prevsys:.trtclassTNFa blocker]     0.19     0.31     0.55  6031    1 #> beta[prevsys:.trtclassIL blocker]       0.06     0.18     0.40  6229    1 #> beta[bsa:.trtclassTNFa blocker]         0.02     0.37     1.09  5169    1 #> beta[bsa:.trtclassIL blocker]           0.26     0.60     1.30  6306    1 #> beta[weight:.trtclassTNFa blocker]     -0.17    -0.14    -0.10  6703    1 #> beta[weight:.trtclassIL blocker]       -0.10    -0.08    -0.04  7513    1 #> beta[psa:.trtclassTNFa blocker]        -0.05     0.09     0.36  5833    1 #> beta[psa:.trtclassIL blocker]           0.01     0.14     0.40  6900    1 #> d[ETN]                                  1.55     1.61     1.71  5246    1 #> d[IXE_Q2W]                              2.95     3.01     3.12  5694    1 #> d[IXE_Q4W]                              2.54     2.60     2.70  6395    1 #> d[SEC_150]                              2.14     2.22     2.38  5744    1 #> d[SEC_300]                              2.45     2.53     2.69  6961    1 #> lp__                                -1576.12 -1573.85 -1570.72  1606    1 #>  #> Samples were drawn using NUTS(diag_e) at Wed Dec  8 13:51:12 2021. #> For each parameter, n_eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor on split chains (at  #> convergence, Rhat=1). # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_data-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The nma_data class — nma_data-class","title":"The nma_data class — nma_data-class","text":"nma_data class contains data NMA standard format, created using functions set_ipd(), set_agd_arm(), set_agd_contrast(), combine_network(). sub-class mlnmr_data created function add_integration(), contains numerical integration points aggregate data.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_data-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The nma_data class — nma_data-class","text":"Objects class nma_data following components: agd_arm data studies aggregate data (arm format) agd_contrast data studies aggregate data (contrast format) ipd data studies individual patient data treatments treatment coding factor entire network classes treatment class coding factor (length treatments entire network) studies study coding factor entire network outcome outcome type data source, named list agd_arm, agd_contrast, ipd components tibbles following columns: .study study (factor) .trt treatment (factor) .trtclass treatment class (factor), specified .y continuous outcome .se standard error (continuous) .r event count (discrete) .n event count denominator (discrete, agd_arm ) .E time risk (discrete) .surv event/censoring time, type Surv (time--event) .sample_size sample size (agd_* ) ... columns (typically covariates) original data frame Objects class mlnmr_data additionally components: n_int number numerical integration points int_names names covariates numerical integration points int_cor correlation matrix covariates used generate numerical integration points agd_arm agd_contrast tibbles additional list columns prefix .int_, one covariate, contain numerical integration points nested length-n_int vectors within row.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_dic-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The nma_dic class — nma_dic-class","title":"The nma_dic class — nma_dic-class","text":"nma_dic class contains details Deviance Information Criterion (DIC), produced using dic() function.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_dic-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The nma_dic class — nma_dic-class","text":"Objects class nma_dic following components: dic DIC value pd effective number parameters resdev total residual deviance pointwise list data frames containing pointwise contributions IPD AgD. resdev_array 3D MCMC array [Iterations, Chains, Parameters] posterior residual deviance samples.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_prior-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The nma_prior class — nma_prior-class","title":"The nma_prior class — nma_prior-class","text":"nma_prior class used specify prior distributions.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_prior-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The nma_prior class — nma_prior-class","text":"Objects class nma_prior following components: dist Distribution name fun Name constructor function, string (e.g. \"normal\") ... Parameters distribution distribution parameters, specified named components ..., match constructor functions (see priors).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_summary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The nma_summary class — nma_summary-class","title":"The nma_summary class — nma_summary-class","text":"nma_summary class contains posterior summary statistics model parameters quantities interest, draws used obtain statistics.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_summary-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The nma_summary class — nma_summary-class","text":"Objects class nma_summary following components: summary data frame containing computed summary statistics. regression model fitted effect modifier interactions treatment, summaries study-specific. case, corresponding study population indicated column named .study. sims 3D array [Iteration, Chain, Parameter] MCMC simulations studies (Optional) data frame containing study information, printed along corresponding summary statistics summary contains .study column. matching .study column. following attributes may also set: xlab Label x axis plots, usually either \"Treatment\" \"Contrast\". ylab Label y axis plots, usually used scale e.g. \"log Odds Ratio\". subclass nma_rank_probs used function posterior_rank_probs(), contains posterior rank probabilities. subclass sims component, rank probabilities posterior summaries ranks (.e. posterior distribution). posterior ranks rank probabilities calculated may obtained posterior_ranks().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_summary-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for nma_summary objects — print.nma_summary","title":"Methods for nma_summary objects — print.nma_summary","text":".data.frame(), as_tibble(), .tibble() methods return posterior summary statistics data frame tibble. .matrix() method returns matrix posterior draws. .array() method returns 3D array [Iteration, Chain, Parameter] posterior draws (class mcmc_array).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_summary-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for nma_summary objects — print.nma_summary","text":"","code":"# S3 method for nma_summary print(x, ..., digits = 2, pars, include = TRUE)  # S3 method for nma_summary as.data.frame(x, ...)  # S3 method for nma_summary as.tibble(x, ...)  # S3 method for nma_summary as_tibble(x, ...)  # S3 method for nma_summary as.array(x, ...)  # S3 method for nma_summary as.matrix(x, ...)  # S3 method for nma_rank_probs as.array(x, ...)  # S3 method for nma_rank_probs as.matrix(x, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_summary-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for nma_summary objects — print.nma_summary","text":"x nma_summary object ... Additional arguments passed methods digits Integer number digits display pars Character vector parameters display printed summary include Logical, parameters named pars included (TRUE) excluded (FALSE)","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/nma_summary-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for nma_summary objects — print.nma_summary","text":"data.frame .data.frame(), tbl_df .tibble()as_tibble(), matrix .matrix(), mcmc_array .array(). print() method returns x invisibly.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/pairs.stan_nma.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix of plots for a stan_nma object — pairs.stan_nma","title":"Matrix of plots for a stan_nma object — pairs.stan_nma","text":"pairs() method stan_nma objects, calls bayesplot::mcmc_pairs() underlying stanfit object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/pairs.stan_nma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix of plots for a stan_nma object — pairs.stan_nma","text":"","code":"# S3 method for stan_nma pairs(x, ..., pars, include = TRUE)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/pairs.stan_nma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix of plots for a stan_nma object — pairs.stan_nma","text":"x object class stan_nma ... arguments passed bayesplot::mcmc_pairs() pars Optional character vector parameter names include output. specified, parameters used. include Logical, parameters pars included (TRUE, default) excluded (FALSE)?","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/pairs.stan_nma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix of plots for a stan_nma object — pairs.stan_nma","text":"grid ggplot objects produced bayesplot::mcmc_pairs().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/pairs.stan_nma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix of plots for a stan_nma object — pairs.stan_nma","text":"","code":"if (FALSE) { ## Parkinson's mean off time reduction park_net <- set_agd_arm(parkinsons,                         study = studyn,                         trt = trtn,                         y = y,                         se = se,                         sample_size = n)  # Fitting a RE model park_fit_RE <- nma(park_net,                    trt_effects = \"random\",                    prior_intercept = normal(scale = 100),                    prior_trt = normal(scale = 100),                    prior_het = half_normal(scale = 5))  # We see a small number of divergent transition errors # These do not go away entirely when adapt_delta is increased  # Try to diagnose with a pairs plot pairs(park_fit_RE, pars = c(\"mu[4]\", \"d[3]\", \"delta[4: 3]\", \"tau\"))  # Transforming tau onto log scale pairs(park_fit_RE, pars = c(\"mu[4]\", \"d[3]\", \"delta[4: 3]\", \"tau\"),       transformations = list(tau = \"log\"))  # The divergent transitions occur in the upper tail of the heterogeneity # standard deviation. In this case, with only a small number of studies, there # is not very much information to estimate the heterogeneity standard deviation # and the prior distribution may be too heavy-tailed. We could consider a more # informative prior distribution for the heterogeneity variance to aid # estimation. }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/parkinsons.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean off-time reduction in Parkison's disease — parkinsons","title":"Mean off-time reduction in Parkison's disease — parkinsons","text":"Data frame containing mean -time reduction patients given dopamine agonists adjunct therapy Parkinson's disease, 7 trials comparing four active drugs placebo (Dias et al. 2011) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/parkinsons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean off-time reduction in Parkison's disease — parkinsons","text":"","code":"parkinsons"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/parkinsons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mean off-time reduction in Parkison's disease — parkinsons","text":"data frame 15 rows 7 variables: studyn numeric study ID trtn numeric treatment code (placebo = 1) y mean -time reduction se standard error n sample size diff mean difference vs. treatment reference arm se_diff standard error mean difference, see details","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/parkinsons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mean off-time reduction in Parkison's disease — parkinsons","text":"dataset may analysed using either arm-based likelihood using y se, contrast-based likelihood using diff se_diff (combination two across different studies). contrast-based data formatted described set_agd_contrast(). , chosen reference arm study, mean difference diff set NA, se_diff set standard error se outcome reference arm.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/parkinsons.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean off-time reduction in Parkison's disease — parkinsons","text":"Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plaque_psoriasis.html","id":null,"dir":"Reference","previous_headings":"","what":"Plaque psoriasis data — plaque_psoriasis_ipd","title":"Plaque psoriasis data — plaque_psoriasis_ipd","text":"Two data frames, plaque_psoriasis_ipd plaque_psoriasis_agd, containing (simulated) individual patient data four studies aggregate data five studies (Phillippo 2019) . Outcomes binary success/failure achieve 75%, 90%, 100% reduction symptoms Psoriasis Area Severity Index (PASI) scale.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plaque_psoriasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plaque psoriasis data — plaque_psoriasis_ipd","text":"","code":"plaque_psoriasis_ipd  plaque_psoriasis_agd"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plaque_psoriasis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plaque psoriasis data — plaque_psoriasis_ipd","text":"individual patient data contained data frame plaque_psoriasis_ipd 4118 rows, one per individual, 16 variables: studyc study name trtc_long treatment name (long format) trtc treatment name trtn numeric treatment code pasi75 binary PASI 75 outcome pasi90 binary PASI 90 outcome pasi100 binary PASI 100 outcome age age (years) bmi body mass index (BMI) pasi_w0 PASI score week 0 male male sex (TRUE FALSE) bsa body surface area (percent) weight weight (kilograms) durnpso duration psoriasis (years) prevsys previous systemic treatment (TRUE FALSE) psa psoriatic arthritis (TRUE FALSE) aggregate data contained data frame plaque_psoriasis_agd 15 rows, one per study arm, 26 variables: studyc study name trtc_long treatment name (long format) trtc treatment name trtn numeric treatment code pasi75_r, pasi75_n PASI 75 outcome count denominator pasi90_r, pasi90_n PASI 75 outcome count denominator pasi100_r, pasi100_n PASI 75 outcome count denominator sample_size_w0 sample size week zero age_mean, age_sd mean standard deviation age (years) bmi_mean, bmi_sd mean standard deviation BMI pasi_w0_mean, pasi_w0_sd mean standard deviation PASI score week 0 male percentage males bsa_mean, bsa_sd mean standard deviation body surface area (percent) weight_mean, weight_sd mean standard deviation weight (kilograms) durnpso_mean, durnpso_sd mean standard deviation duration psoriasis (years) prevsys percentage individuals previous systemic treatment psa percentage individuals psoriatic arthritis object class data.frame 15 rows 26 columns.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plaque_psoriasis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plaque psoriasis data — plaque_psoriasis_ipd","text":"Phillippo DM (2019). Calibration Treatment Effects Network Meta-Analysis using Individual Patient Data. Ph.D. thesis, University Bristol. Available https://research-information.bris.ac.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Network plots — plot.nma_data","title":"Network plots — plot.nma_data","text":"Create network plot nma_data network object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network plots — plot.nma_data","text":"","code":"# S3 method for nma_data plot(   x,   ...,   layout,   circular,   weight_edges = TRUE,   weight_nodes = FALSE,   show_trt_class = FALSE )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network plots — plot.nma_data","text":"x nma_data object plot ... Additional arguments passed ggraph() layout function layout type layout create. layout accepted ggraph() may used, including layout functions provided igraph. circular Whether use circular representation. See ggraph(). weight_edges Weight edges number studies? Default TRUE. weight_nodes Weight nodes total sample size? Default FALSE. show_trt_class Colour treatment nodes class, trt_class set? Default FALSE.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network plots — plot.nma_data","text":"ggplot object, produced ggraph().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network plots — plot.nma_data","text":"default equivalent layout = \"linear\" circular = TRUE, places treatment nodes circle order defined treatment factor variable. alternative layout may give good results simple networks \"sugiyama\", attempts minimise number edge crossings. weight_nodes = TRUE requires sample sizes specified aggregate data network, using sample_size option set_agd_*().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network plots — plot.nma_data","text":"","code":"## Stroke prevention in atrial fibrillation # Setting up the network af_net <- set_agd_arm(atrial_fibrillation,                       study = studyc,                       trt = abbreviate(trtc, minlength = 3),                       r = r,                       n = n,                       trt_class = trt_class) af_net #> A network with 26 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study         Treatments                    #>  ACTIVE-W      2: Sada | Lda+c               #>  AFASAK 1      3: P/c | Sada | Lda           #>  AFASAK 2      4: Sada | Fdw | Mda | Fdw+mda #>  BAATAF        2: P/c | Lada                 #>  BAFTA         2: Sada | Lda                 #>  CAFA          2: P/c | Sada                 #>  Chinese ATAFS 2: Sada | Lda                 #>  EAFT          3: P/c | Sada | Mda           #>  ESPS 2        4: P/c | Lda | Dpy | Lda+d    #>  JAST          2: P/c | Lda                  #>  ... plus 16 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 17, in 4 classes #> Total number of studies: 26 #> Reference treatment is: Sada #> Network is connected  # Basic plot plot(af_net)   # Turn off weighting edges by number of studies plot(af_net, weight_edges = FALSE)   # Turn on weighting nodes by sample size plot(af_net, weight_nodes = TRUE)   # Colour treatment nodes by class plot(af_net, weight_nodes = TRUE, show_trt_class = TRUE)   # Output may be customised using standard ggplot commands # For example, to display the legends below the plot: plot(af_net, weight_nodes = TRUE, show_trt_class = TRUE) +   ggplot2::theme(legend.position = \"bottom\",                  legend.box = \"vertical\",                  legend.margin = ggplot2::margin(0, 0, 0, 0),                  legend.spacing = ggplot2::unit(0.5, \"lines\"))   # Choosing a different ggraph layout, hiding some legends plot(af_net, weight_nodes = TRUE, show_trt_class = TRUE,      layout = \"star\") +   ggplot2::guides(edge_width = \"none\", size = \"none\")"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_dic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots of model fit diagnostics — plot.nma_dic","title":"Plots of model fit diagnostics — plot.nma_dic","text":"plot() method nma_dic objects produced dic() produces several useful diagnostic plots checking model fit model comparison. detail plots interpretation given Dias et al. (2011) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_dic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots of model fit diagnostics — plot.nma_dic","text":"","code":"# S3 method for nma_dic plot(   x,   y,   ...,   show_uncertainty = TRUE,   stat = \"pointinterval\",   orientation = c(\"vertical\", \"horizontal\", \"x\", \"y\") )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_dic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots of model fit diagnostics — plot.nma_dic","text":"x nma_dic object y (Optional) second nma_dic object, produce \"dev-dev\" plots model comparison. ... Additional arguments passed methods show_uncertainty Logical, show uncertainty ggdist plot stat? Default TRUE. stat Character string specifying ggdist plot stat use show_uncertainty = TRUE, default \"pointinterval\". y provided, currently \"pointinterval\" supported. orientation Whether ggdist geom drawn horizontally (\"horizontal\") vertically (\"vertical\"). used residual deviance plots, default \"vertical\".","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_dic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots of model fit diagnostics — plot.nma_dic","text":"ggplot object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_dic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots of model fit diagnostics — plot.nma_dic","text":"single nma_dic object given, plot residual deviance contribution data point produced. good fitting model, data point expected residual deviance 1; larger values indicate data points fit poorly model. two nma_dic objects given, \"dev-dev\" plot comparing residual deviance contributions model produced. Data points residual deviance contributions lying line equality fit equally well either model. Data points lying line equality indicate better fit second model (y); conversely, data points lying line equality indicate better fit first model (x). common use case compare standard consistency model (fitted using nma() consistency = \"consistency\") unrelated mean effects (UME) inconsistency model (fitted using nma() consistency = \"ume\"), check potential inconsistency. See Dias et al. (2011)  details.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_dic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plots of model fit diagnostics — plot.nma_dic","text":"Dias S, Welton NJ, Sutton AJ, Ades AE (2011). “NICE DSU Technical Support Document 2: generalised linear modelling framework pair-wise network meta-analysis randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_dic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots of model fit diagnostics — plot.nma_dic","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking FE NMA example if not already available if (!exists(\"smk_fit_FE\")) example(\"example_smk_fe\", run.donttest = TRUE) # } # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Compare DIC of FE and RE models (smk_dic_FE <- dic(smk_fit_FE)) #> Residual deviance: 266.9 (on 50 data points) #>                pD: 26.8 #>               DIC: 293.7 (smk_dic_RE <- dic(smk_fit_RE))   # substantially better fit #> Residual deviance: 54.1 (on 50 data points) #>                pD: 43.9 #>               DIC: 98  # Plot residual deviance contributions under RE model plot(smk_dic_RE)   # Further customisation is possible using ggplot commands # For example, highlighting data points with residual deviance above a certain threshold plot(smk_dic_RE) +   ggplot2::aes(colour = ifelse(..y.. > 1.5, \"darkorange\", \"black\")) +   ggplot2::scale_colour_identity()   # Or by posterior probability, for example here a central probability of 0.6 # corresponds to a lower tail probability of (1 - 0.6)/2 = 0.2 plot(smk_dic_RE, .width = c(0.6, 0.95)) +   ggplot2::aes(colour = ifelse(..ymin.. > 1, \"darkorange\", \"black\")) +   ggplot2::scale_colour_identity()   # Check for inconsistency using UME model # } # \\donttest{ # Run smoking UME NMA example if not already available if (!exists(\"smk_fit_RE_UME\")) example(\"example_smk_ume\", run.donttest = TRUE) # } # \\donttest{ # Compare DIC smk_dic_RE #> Residual deviance: 54.1 (on 50 data points) #>                pD: 43.9 #>               DIC: 98 (smk_dic_RE_UME <- dic(smk_fit_RE_UME))  # no difference in fit #> Residual deviance: 54.1 (on 50 data points) #>                pD: 45.3 #>               DIC: 99.4  # Compare residual deviance contributions with a \"dev-dev\" plot plot(smk_dic_RE, smk_dic_RE_UME)   # By default the dev-dev plot can be a little cluttered # Hiding the credible intervals plot(smk_dic_RE, smk_dic_RE_UME, show_uncertainty = FALSE)   # Changing transparency plot(smk_dic_RE, smk_dic_RE_UME, point_alpha = 0.5, interval_alpha = 0.1)  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots of summary results — plot.nma_summary","title":"Plots of summary results — plot.nma_summary","text":"plot method nma_summary objects used produce plots parameter estimates (called stan_nma object summary), relative effects (called output relative_effects()), absolute predictions (called output predict.stan_nma()), posterior ranks rank probabilities (called output posterior_ranks() posterior_rank_probs()).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots of summary results — plot.nma_summary","text":"","code":"# S3 method for nma_summary plot(   x,   ...,   stat = \"pointinterval\",   orientation = c(\"horizontal\", \"vertical\", \"y\", \"x\"),   ref_line = NA_real_ )  # S3 method for nma_parameter_summary plot(   x,   ...,   stat = \"pointinterval\",   orientation = c(\"horizontal\", \"vertical\", \"y\", \"x\"),   ref_line = NA_real_ )  # S3 method for nma_rank_probs plot(x, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots of summary results — plot.nma_summary","text":"x nma_summary object ... Additional arguments passed underlying ggdist plot stat, see Details stat Character string specifying ggdist plot stat use, default \"pointinterval\" orientation Whether ggdist geom drawn horizontally (\"horizontal\") vertically (\"vertical\"), default \"horizontal\" ref_line Numeric vector positions reference lines, default reference lines drawn","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots of summary results — plot.nma_summary","text":"ggplot object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots of summary results — plot.nma_summary","text":"Plotting handled ggplot2 stats geoms provided ggdist package. result, output flexible. plotting stats provided ggdist may used, via argument stat. default uses ggdist::stat_pointinterval(), produce medians 95% Credible Intervals 66% inner bands. Additional arguments ... passed ggdist stat, customise output. example, produce means Credible Intervals, specify point_interval = mean_qi. produce 80% Credible Interval inner band, specify .width = c(0, 0.8). Alternative stats can specified produce different summaries. example, specify stat = \"[half]eye\" produce (half) eye plots, stat = \"histinterval\" produce histograms intervals. full list options examples found ggdist vignette vignette(\"slabinterval\", package = \"ggdist\"). ggplot object returned can modified usual ggplot2 functions add aesthetics, geoms, themes, etc.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot.nma_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots of summary results — plot.nma_summary","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Produce relative effects smk_releff_RE <- relative_effects(smk_fit_RE) plot(smk_releff_RE, ref_line = 0)   # Customise plot options plot(smk_releff_RE, ref_line = 0, stat = \"halfeye\")   # Further customisation is possible with ggplot commands plot(smk_releff_RE, ref_line = 0, stat = \"halfeye\", slab_alpha = 0.6) +   ggplot2::aes(slab_fill = ifelse(..x.. < 0, \"darkred\", \"grey60\"))   # Produce posterior ranks smk_rank_RE <- posterior_ranks(smk_fit_RE, lower_better = FALSE) plot(smk_rank_RE)   # Produce rank probabilities smk_rankprob_RE <- posterior_rank_probs(smk_fit_RE, lower_better = FALSE) plot(smk_rankprob_RE)   # Produce cumulative rank probabilities smk_cumrankprob_RE <- posterior_rank_probs(smk_fit_RE, lower_better = FALSE,                                            cumulative = TRUE) plot(smk_cumrankprob_RE)   # Further customisation is possible with ggplot commands plot(smk_cumrankprob_RE) +   ggplot2::facet_null() +   ggplot2::aes(colour = Treatment)  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_integration_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot numerical integration error — plot_integration_error","title":"Plot numerical integration error — plot_integration_error","text":"ML-NMR models, plot estimated numerical integration error entire posterior distribution, number integration points increases. See (Phillippo et al. 2020; Phillippo 2019)  details.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_integration_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot numerical integration error — plot_integration_error","text":"","code":"plot_integration_error(   x,   ...,   stat = \"violin\",   orientation = c(\"vertical\", \"horizontal\", \"x\", \"y\"),   show_expected_rate = TRUE )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_integration_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot numerical integration error — plot_integration_error","text":"x object type stan_mlnmr ... Additional arguments passed ggdist plot stat. stat Character string specifying ggdist plot stat used summarise integration error posterior. Default \"violin\", equivalent \"eye\" cosmetic tweaks. orientation Whether ggdist geom drawn horizontally (\"horizontal\") vertically (\"vertical\"), default \"vertical\" show_expected_rate Logical, show typical convergence rate \\(1/N\\)? Default TRUE.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_integration_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot numerical integration error — plot_integration_error","text":"ggplot object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_integration_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot numerical integration error — plot_integration_error","text":"total number integration points set n_int argument add_integration(), intervals integration error estimated set int_thin argument nma(). typical convergence rate Quasi-Monte Carlo integration (used ) \\(1/N\\), default displayed plot output. integration error thinning interval \\(N_\\mathrm{thin}\\) estimated point posterior distribution subtracting final estimate (using n_int points) estimate using first \\(N_\\mathrm{thin}\\) points.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_integration_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot numerical integration error — plot_integration_error","text":"","code":"## Plaque psoriasis ML-NMR # \\donttest{ # Run plaque psoriasis ML-NMR example if not already available if (!exists(\"pso_fit\")) example(\"example_pso_mlnmr\", run.donttest = TRUE) # } # \\donttest{ # Plot numerical integration error plot_integration_error(pso_fit)  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_prior_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot prior vs posterior distribution — plot_prior_posterior","title":"Plot prior vs posterior distribution — plot_prior_posterior","text":"Produce plots comparing prior posterior distributions model parameters.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_prior_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot prior vs posterior distribution — plot_prior_posterior","text":"","code":"plot_prior_posterior(   x,   ...,   prior = NULL,   post_args = list(),   prior_args = list(),   overlay = c(\"prior\", \"posterior\"),   ref_line = NA_real_ )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_prior_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot prior vs posterior distribution — plot_prior_posterior","text":"x stan_nma object ... Additional arguments passed methods prior Character vector selecting prior posterior distribution(s) plot. May include \"intercept\", \"trt\", \"het\", \"reg\", \"aux\", appropriate. post_args List arguments passed ggplot2::geom_histogram control plot output posterior distribution prior_args List arguments passed ggplot2::geom_path control plot output prior distribution. Additionally, n controls number points density curve evaluated (default 500), p_limits controls endpoints curve quantiles (default c(.001, .999)). overlay String, prior posterior shown top? Default \"prior\". ref_line Numeric vector positions reference lines, default reference lines drawn","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_prior_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot prior vs posterior distribution — plot_prior_posterior","text":"ggplot object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_prior_posterior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot prior vs posterior distribution — plot_prior_posterior","text":"Prior distributions displayed lines, posterior distributions displayed histograms.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/plot_prior_posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot prior vs posterior distribution — plot_prior_posterior","text":"","code":"## Smoking cessation NMA # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Plot prior vs. posterior, by default all parameters are plotted plot_prior_posterior(smk_fit_RE)   # Plot prior vs. posterior for heterogeneity SD only plot_prior_posterior(smk_fit_RE, prior = \"het\")   # Customise plot plot_prior_posterior(smk_fit_RE, prior = \"het\",                      prior_args = list(colour = \"darkred\", size = 2),                      post_args = list(alpha = 0.6))  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/posterior_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Treatment rankings and rank probabilities — posterior_ranks","title":"Treatment rankings and rank probabilities — posterior_ranks","text":"Produce posterior treatment rankings rank probabilities fitted NMA model. meta-regression fitted effect modifier interactions treatment, differ study population.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/posterior_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treatment rankings and rank probabilities — posterior_ranks","text":"","code":"posterior_ranks(   x,   newdata = NULL,   study = NULL,   lower_better = TRUE,   probs = c(0.025, 0.25, 0.5, 0.75, 0.975),   summary = TRUE )  posterior_rank_probs(   x,   newdata = NULL,   study = NULL,   lower_better = TRUE,   cumulative = FALSE )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/posterior_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treatment rankings and rank probabilities — posterior_ranks","text":"x stan_nma object created nma() newdata used regression model fitted. data frame study details, one row per study, giving covariate values produce relative effects. Column names must match variables regression model. NULL, relative effects produced studies network. study Column newdata specifies study names, otherwise studies labelled row number. lower_better Logical, lower treatment effects better (TRUE; default) higher better (FALSE)? See details. probs Numeric vector quantiles interest present computed summary, default c(0.025, 0.25, 0.5, 0.75, 0.975) summary Logical, calculate posterior summaries? Default TRUE. cumulative Logical, return cumulative rank probabilities? Default FALSE, return posterior probabilities treatment given rank. TRUE, cumulative posterior rank probabilities returned treatment given rank better.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/posterior_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treatment rankings and rank probabilities — posterior_ranks","text":"nma_summary object summary = TRUE, otherwise list containing 3D MCMC array samples (regression models) data frame study information.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/posterior_ranks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Treatment rankings and rank probabilities — posterior_ranks","text":"function posterior_ranks() produces posterior rankings, distribution (e.g. mean/median rank 95% Credible Interval). function posterior_rank_probs() produces rank probabilities, give posterior probabilities ranked first, second, etc. treatments. argument lower_better specifies whether lower treatment effects higher treatment effects preferred. example, negative binary outcome lower (negative) log odds ratios preferred, lower_better = TRUE. Conversely, example, treatments aim increase rate positive outcome lower_better = FALSE.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/posterior_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treatment rankings and rank probabilities — posterior_ranks","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Produce posterior ranks smk_rank_RE <- posterior_ranks(smk_fit_RE, lower_better = FALSE) smk_rank_RE #>                              mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS #> rank[No intervention]        3.88 0.34    3   4   4   4     4     2252       NA #> rank[Group counselling]      1.38 0.63    1   1   1   2     3     3131     3122 #> rank[Individual counselling] 1.93 0.63    1   2   2   2     3     2472     2853 #> rank[Self-help]              2.81 0.72    1   3   3   3     4     2548       NA #>                              Rhat #> rank[No intervention]           1 #> rank[Group counselling]         1 #> rank[Individual counselling]    1 #> rank[Self-help]                 1 plot(smk_rank_RE)   # Produce rank probabilities smk_rankprob_RE <- posterior_rank_probs(smk_fit_RE, lower_better = FALSE) smk_rankprob_RE #>                           p_rank[1] p_rank[2] p_rank[3] p_rank[4] #> d[No intervention]             0.00      0.00      0.12      0.88 #> d[Group counselling]           0.70      0.23      0.07      0.00 #> d[Individual counselling]      0.23      0.60      0.16      0.00 #> d[Self-help]                   0.07      0.17      0.65      0.11 plot(smk_rankprob_RE)   # Produce cumulative rank probabilities smk_cumrankprob_RE <- posterior_rank_probs(smk_fit_RE, lower_better = FALSE,                                            cumulative = TRUE) smk_cumrankprob_RE #>                           p_rank[1] p_rank[2] p_rank[3] p_rank[4] #> d[No intervention]             0.00      0.00      0.12         1 #> d[Group counselling]           0.70      0.92      1.00         1 #> d[Individual counselling]      0.23      0.84      1.00         1 #> d[Self-help]                   0.07      0.24      0.89         1 plot(smk_cumrankprob_RE)   # Further customisation is possible with ggplot commands plot(smk_cumrankprob_RE) +   ggplot2::facet_null() +   ggplot2::aes(colour = Treatment)  # }  ## Plaque psoriasis ML-NMR # \\donttest{ # Run plaque psoriasis ML-NMR example if not already available if (!exists(\"pso_fit\")) example(\"example_pso_mlnmr\", run.donttest = TRUE) # } # \\donttest{ # Produce population-adjusted rankings for all study populations in # the network  # Ranks pso_rank <- posterior_ranks(pso_fit) pso_rank #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                        mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[FIXTURE: PBO]     1.00 0.00    1   1   1   1     1       NA       NA   NA #> rank[FIXTURE: ETN]     2.00 0.00    2   2   2   2     2       NA       NA   NA #> rank[FIXTURE: IXE_Q2W] 6.00 0.00    6   6   6   6     6       NA       NA   NA #> rank[FIXTURE: IXE_Q4W] 4.77 0.43    4   5   5   5     5     3832       NA    1 #> rank[FIXTURE: SEC_150] 3.00 0.04    3   3   3   3     3     4028     4028    1 #> rank[FIXTURE: SEC_300] 4.23 0.42    4   4   4   4     5     3870       NA    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                          mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS #> rank[UNCOVER-1: PBO]     1.00 0.00    1   1   1   1     1       NA       NA #> rank[UNCOVER-1: ETN]     2.00 0.00    2   2   2   2     2       NA       NA #> rank[UNCOVER-1: IXE_Q2W] 6.00 0.00    6   6   6   6     6       NA       NA #> rank[UNCOVER-1: IXE_Q4W] 4.77 0.43    4   5   5   5     5     3832       NA #> rank[UNCOVER-1: SEC_150] 3.00 0.04    3   3   3   3     3     4028     4028 #> rank[UNCOVER-1: SEC_300] 4.23 0.42    4   4   4   4     5     3870       NA #>                          Rhat #> rank[UNCOVER-1: PBO]       NA #> rank[UNCOVER-1: ETN]       NA #> rank[UNCOVER-1: IXE_Q2W]   NA #> rank[UNCOVER-1: IXE_Q4W]    1 #> rank[UNCOVER-1: SEC_150]    1 #> rank[UNCOVER-1: SEC_300]    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                          mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS #> rank[UNCOVER-2: PBO]     1.00 0.00    1   1   1   1     1       NA       NA #> rank[UNCOVER-2: ETN]     2.00 0.00    2   2   2   2     2       NA       NA #> rank[UNCOVER-2: IXE_Q2W] 6.00 0.00    6   6   6   6     6       NA       NA #> rank[UNCOVER-2: IXE_Q4W] 4.77 0.43    4   5   5   5     5     3832       NA #> rank[UNCOVER-2: SEC_150] 3.00 0.04    3   3   3   3     3     4028     4028 #> rank[UNCOVER-2: SEC_300] 4.23 0.42    4   4   4   4     5     3870       NA #>                          Rhat #> rank[UNCOVER-2: PBO]       NA #> rank[UNCOVER-2: ETN]       NA #> rank[UNCOVER-2: IXE_Q2W]   NA #> rank[UNCOVER-2: IXE_Q4W]    1 #> rank[UNCOVER-2: SEC_150]    1 #> rank[UNCOVER-2: SEC_300]    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                          mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS #> rank[UNCOVER-3: PBO]     1.00 0.00    1   1   1   1     1       NA       NA #> rank[UNCOVER-3: ETN]     2.00 0.00    2   2   2   2     2       NA       NA #> rank[UNCOVER-3: IXE_Q2W] 6.00 0.00    6   6   6   6     6       NA       NA #> rank[UNCOVER-3: IXE_Q4W] 4.77 0.43    4   5   5   5     5     3832       NA #> rank[UNCOVER-3: SEC_150] 3.00 0.04    3   3   3   3     3     4028     4028 #> rank[UNCOVER-3: SEC_300] 4.23 0.42    4   4   4   4     5     3870       NA #>                          Rhat #> rank[UNCOVER-3: PBO]       NA #> rank[UNCOVER-3: ETN]       NA #> rank[UNCOVER-3: IXE_Q2W]   NA #> rank[UNCOVER-3: IXE_Q4W]    1 #> rank[UNCOVER-3: SEC_150]    1 #> rank[UNCOVER-3: SEC_300]    1 #>  plot(pso_rank)   # Rank probabilities pso_rankprobs <- posterior_rank_probs(pso_fit) pso_rankprobs #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                     p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[FIXTURE: PBO]             1         0         0      0.00      0.00         0 #> d[FIXTURE: ETN]             0         1         0      0.00      0.00         0 #> d[FIXTURE: IXE_Q2W]         0         0         0      0.00      0.00         1 #> d[FIXTURE: IXE_Q4W]         0         0         0      0.23      0.77         0 #> d[FIXTURE: SEC_150]         0         0         1      0.00      0.00         0 #> d[FIXTURE: SEC_300]         0         0         0      0.77      0.23         0 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[UNCOVER-1: PBO]             1         0         0      0.00      0.00 #> d[UNCOVER-1: ETN]             0         1         0      0.00      0.00 #> d[UNCOVER-1: IXE_Q2W]         0         0         0      0.00      0.00 #> d[UNCOVER-1: IXE_Q4W]         0         0         0      0.23      0.77 #> d[UNCOVER-1: SEC_150]         0         0         1      0.00      0.00 #> d[UNCOVER-1: SEC_300]         0         0         0      0.77      0.23 #>                       p_rank[6] #> d[UNCOVER-1: PBO]             0 #> d[UNCOVER-1: ETN]             0 #> d[UNCOVER-1: IXE_Q2W]         1 #> d[UNCOVER-1: IXE_Q4W]         0 #> d[UNCOVER-1: SEC_150]         0 #> d[UNCOVER-1: SEC_300]         0 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[UNCOVER-2: PBO]             1         0         0      0.00      0.00 #> d[UNCOVER-2: ETN]             0         1         0      0.00      0.00 #> d[UNCOVER-2: IXE_Q2W]         0         0         0      0.00      0.00 #> d[UNCOVER-2: IXE_Q4W]         0         0         0      0.23      0.77 #> d[UNCOVER-2: SEC_150]         0         0         1      0.00      0.00 #> d[UNCOVER-2: SEC_300]         0         0         0      0.77      0.23 #>                       p_rank[6] #> d[UNCOVER-2: PBO]             0 #> d[UNCOVER-2: ETN]             0 #> d[UNCOVER-2: IXE_Q2W]         1 #> d[UNCOVER-2: IXE_Q4W]         0 #> d[UNCOVER-2: SEC_150]         0 #> d[UNCOVER-2: SEC_300]         0 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[UNCOVER-3: PBO]             1         0         0      0.00      0.00 #> d[UNCOVER-3: ETN]             0         1         0      0.00      0.00 #> d[UNCOVER-3: IXE_Q2W]         0         0         0      0.00      0.00 #> d[UNCOVER-3: IXE_Q4W]         0         0         0      0.23      0.77 #> d[UNCOVER-3: SEC_150]         0         0         1      0.00      0.00 #> d[UNCOVER-3: SEC_300]         0         0         0      0.77      0.23 #>                       p_rank[6] #> d[UNCOVER-3: PBO]             0 #> d[UNCOVER-3: ETN]             0 #> d[UNCOVER-3: IXE_Q2W]         1 #> d[UNCOVER-3: IXE_Q4W]         0 #> d[UNCOVER-3: SEC_150]         0 #> d[UNCOVER-3: SEC_300]         0 #>  plot(pso_rankprobs)   # Cumulative rank probabilities pso_cumrankprobs <- posterior_rank_probs(pso_fit, cumulative = TRUE) pso_cumrankprobs #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                     p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[FIXTURE: PBO]             1         1         1      1.00         1         1 #> d[FIXTURE: ETN]             0         1         1      1.00         1         1 #> d[FIXTURE: IXE_Q2W]         0         0         0      0.00         0         1 #> d[FIXTURE: IXE_Q4W]         0         0         0      0.23         1         1 #> d[FIXTURE: SEC_150]         0         0         1      1.00         1         1 #> d[FIXTURE: SEC_300]         0         0         0      0.77         1         1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[UNCOVER-1: PBO]             1         1         1      1.00         1 #> d[UNCOVER-1: ETN]             0         1         1      1.00         1 #> d[UNCOVER-1: IXE_Q2W]         0         0         0      0.00         0 #> d[UNCOVER-1: IXE_Q4W]         0         0         0      0.23         1 #> d[UNCOVER-1: SEC_150]         0         0         1      1.00         1 #> d[UNCOVER-1: SEC_300]         0         0         0      0.77         1 #>                       p_rank[6] #> d[UNCOVER-1: PBO]             1 #> d[UNCOVER-1: ETN]             1 #> d[UNCOVER-1: IXE_Q2W]         1 #> d[UNCOVER-1: IXE_Q4W]         1 #> d[UNCOVER-1: SEC_150]         1 #> d[UNCOVER-1: SEC_300]         1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[UNCOVER-2: PBO]             1         1         1      1.00         1 #> d[UNCOVER-2: ETN]             0         1         1      1.00         1 #> d[UNCOVER-2: IXE_Q2W]         0         0         0      0.00         0 #> d[UNCOVER-2: IXE_Q4W]         0         0         0      0.23         1 #> d[UNCOVER-2: SEC_150]         0         0         1      1.00         1 #> d[UNCOVER-2: SEC_300]         0         0         0      0.77         1 #>                       p_rank[6] #> d[UNCOVER-2: PBO]             1 #> d[UNCOVER-2: ETN]             1 #> d[UNCOVER-2: IXE_Q2W]         1 #> d[UNCOVER-2: IXE_Q4W]         1 #> d[UNCOVER-2: SEC_150]         1 #> d[UNCOVER-2: SEC_300]         1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                       p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] #> d[UNCOVER-3: PBO]             1         1         1      1.00         1 #> d[UNCOVER-3: ETN]             0         1         1      1.00         1 #> d[UNCOVER-3: IXE_Q2W]         0         0         0      0.00         0 #> d[UNCOVER-3: IXE_Q4W]         0         0         0      0.23         1 #> d[UNCOVER-3: SEC_150]         0         0         1      1.00         1 #> d[UNCOVER-3: SEC_300]         0         0         0      0.77         1 #>                       p_rank[6] #> d[UNCOVER-3: PBO]             1 #> d[UNCOVER-3: ETN]             1 #> d[UNCOVER-3: IXE_Q2W]         1 #> d[UNCOVER-3: IXE_Q4W]         1 #> d[UNCOVER-3: SEC_150]         1 #> d[UNCOVER-3: SEC_300]         1 #>  plot(pso_cumrankprobs)   # Produce population-adjusted rankings for a different target # population new_agd_means <- data.frame(   bsa = 0.6,   prevsys = 0.1,   psa = 0.2,   weight = 10,   durnpso = 3)  # Ranks posterior_ranks(pso_fit, newdata = new_agd_means) #> ------------------------------------------------------------------ Study: New 1 ----  #>  #> Covariate values: #>  durnpso prevsys bsa weight psa #>        3     0.1 0.6     10 0.2 #>  #>                      mean   sd 2.5% 25% 50% 75% 97.5% Bulk_ESS Tail_ESS Rhat #> rank[New 1: PBO]     1.00 0.00    1   1   1   1     1       NA       NA   NA #> rank[New 1: ETN]     2.00 0.00    2   2   2   2     2       NA       NA   NA #> rank[New 1: IXE_Q2W] 6.00 0.00    6   6   6   6     6       NA       NA   NA #> rank[New 1: IXE_Q4W] 4.77 0.43    4   5   5   5     5     3832       NA    1 #> rank[New 1: SEC_150] 3.00 0.04    3   3   3   3     3     4028     4028    1 #> rank[New 1: SEC_300] 4.23 0.42    4   4   4   4     5     3870       NA    1 #>   # Rank probabilities posterior_rank_probs(pso_fit, newdata = new_agd_means) #> ------------------------------------------------------------------ Study: New 1 ----  #>  #> Covariate values: #>  durnpso prevsys bsa weight psa #>        3     0.1 0.6     10 0.2 #>  #>                   p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[New 1: PBO]             1         0         0      0.00      0.00         0 #> d[New 1: ETN]             0         1         0      0.00      0.00         0 #> d[New 1: IXE_Q2W]         0         0         0      0.00      0.00         1 #> d[New 1: IXE_Q4W]         0         0         0      0.23      0.77         0 #> d[New 1: SEC_150]         0         0         1      0.00      0.00         0 #> d[New 1: SEC_300]         0         0         0      0.77      0.23         0 #>   # Cumulative rank probabilities posterior_rank_probs(pso_fit, newdata = new_agd_means,                      cumulative = TRUE) #> ------------------------------------------------------------------ Study: New 1 ----  #>  #> Covariate values: #>  durnpso prevsys bsa weight psa #>        3     0.1 0.6     10 0.2 #>  #>                   p_rank[1] p_rank[2] p_rank[3] p_rank[4] p_rank[5] p_rank[6] #> d[New 1: PBO]             1         1         1      1.00         1         1 #> d[New 1: ETN]             0         1         1      1.00         1         1 #> d[New 1: IXE_Q2W]         0         0         0      0.00         0         1 #> d[New 1: IXE_Q4W]         0         0         0      0.23         1         1 #> d[New 1: SEC_150]         0         0         1      1.00         1         1 #> d[New 1: SEC_300]         0         0         0      0.77         1         1 #>  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/predict.stan_nma.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions of absolute effects from NMA models — predict.stan_nma","title":"Predictions of absolute effects from NMA models — predict.stan_nma","text":"Obtain predictions absolute effects NMA models fitted nma(). example, model fitted binary data logit link, predicted outcome probabilities log odds can produced.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/predict.stan_nma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions of absolute effects from NMA models — predict.stan_nma","text":"","code":"# S3 method for stan_nma predict(   object,   ...,   baseline = NULL,   newdata = NULL,   study = NULL,   trt_ref = NULL,   type = c(\"link\", \"response\"),   level = c(\"aggregate\", \"individual\"),   baseline_type = c(\"link\", \"response\"),   baseline_level = c(\"individual\", \"aggregate\"),   probs = c(0.025, 0.25, 0.5, 0.75, 0.975),   summary = TRUE )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/predict.stan_nma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions of absolute effects from NMA models — predict.stan_nma","text":"object stan_nma object created nma(). ... Additional arguments, passed uniroot() regression models baseline_level = \"aggregate\". baseline optional distr() distribution baseline response (.e. intercept), produce absolute effects. NULL, predictions produced using baseline response study network IPD arm-based AgD. regression models, may list distr() distributions length number studies newdata (possibly named study names, otherwise order appearance newdata). Use baseline_type baseline_level arguments specify whether distribution response linear predictor scale, (ML-NMR models including IPD) whether applies individual reference level covariates entire newdata population, respectively. example, model logit link baseline_type = \"link\", distribution baseline log odds event. Use trt_ref argument specify treatment distribution applies . newdata required regression model fitted baseline specified. data frame covariate details, produce predictions. Column names must match variables regression model. type = \"aggregate\" either data frame integration points produced add_integration() (one row per study), data frame individual covariate values (one row per individual) summarised . type = \"individual\" data frame individual covariate values, one row per individual. NULL, predictions produced studies IPD /arm-based AgD network, depending value type. study Column newdata specifies study names IDs. specified: newdata contains integration points produced add_integration(), studies labelled sequentially row; otherwise data assumed come single study. trt_ref Treatment baseline response distribution refers, baseline specified. default, baseline response distribution refer network reference treatment. Coerced character string. type Whether produce predictions \"link\" scale (default, e.g. log odds) \"response\" scale (e.g. probabilities). level level predictions produced, either \"aggregate\" (default), \"individual\". baseline specified, predictions produced IPD studies network type \"individual\" \"aggregate\", arm-based AgD studies network type \"aggregate\". baseline_type baseline distribution given, specifies whether corresponds \"link\" scale (default, e.g. log odds) \"response\" scale (e.g. probabilities). baseline_level baseline distribution given, specifies whether corresponds individual reference level covariates (\"individual\", default), (unadjusted) average outcome reference treatment newdata population (\"aggregate\"). Ignored AgD NMA, since option \"aggregate\" instance. probs Numeric vector quantiles interest present computed summary, default c(0.025, 0.25, 0.5, 0.75, 0.975) summary Logical, calculate posterior summaries? Default TRUE.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/predict.stan_nma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions of absolute effects from NMA models — predict.stan_nma","text":"nma_summary object summary = TRUE, otherwise list containing 3D MCMC array samples (regression models) data frame study information.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/predict.stan_nma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions of absolute effects from NMA models — predict.stan_nma","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Predicted log odds of success in each study in the network predict(smk_fit_RE) #> ---------------------------------------------------------------------- Study: 1 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[1: No intervention]        -2.78 0.33 -3.48 -3.00 -2.77 -2.56 -2.17 #> pred[1: Group counselling]      -1.69 0.51 -2.67 -2.03 -1.70 -1.36 -0.66 #> pred[1: Individual counselling] -1.94 0.38 -2.70 -2.18 -1.93 -1.69 -1.20 #> pred[1: Self-help]              -2.30 0.53 -3.30 -2.64 -2.30 -1.95 -1.25 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[1: No intervention]            5189     2991    1 #> pred[1: Group counselling]          2642     2502    1 #> pred[1: Individual counselling]     2544     2751    1 #> pred[1: Self-help]                  2533     2590    1 #>  #> ---------------------------------------------------------------------- Study: 2 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[2: No intervention]        -2.57 0.78 -4.16 -3.07 -2.57 -2.04 -1.08 #> pred[2: Group counselling]      -1.47 0.75 -2.93 -1.97 -1.48 -0.99  0.05 #> pred[2: Individual counselling] -1.72 0.76 -3.23 -2.20 -1.73 -1.22 -0.25 #> pred[2: Self-help]              -2.08 0.78 -3.62 -2.59 -2.07 -1.58 -0.52 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[2: No intervention]            2277     2445    1 #> pred[2: Group counselling]          3131     2965    1 #> pred[2: Individual counselling]     2830     2552    1 #> pred[2: Self-help]                  3219     2290    1 #>  #> ---------------------------------------------------------------------- Study: 3 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[3: No intervention]        -2.14 0.12 -2.38 -2.23 -2.14 -2.06 -1.92 #> pred[3: Group counselling]      -1.05 0.46 -1.93 -1.35 -1.06 -0.76 -0.10 #> pred[3: Individual counselling] -1.30 0.26 -1.81 -1.47 -1.30 -1.13 -0.79 #> pred[3: Self-help]              -1.66 0.44 -2.50 -1.94 -1.66 -1.37 -0.76 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[3: No intervention]            8614     2760    1 #> pred[3: Group counselling]          1892     2233    1 #> pred[3: Individual counselling]     1382     2169    1 #> pred[3: Self-help]                  1875     2373    1 #>  #> ---------------------------------------------------------------------- Study: 4 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[4: No intervention]        -4.05 0.59 -5.33 -4.42 -4.01 -3.64 -3.00 #> pred[4: Group counselling]      -2.95 0.72 -4.45 -3.40 -2.95 -2.48 -1.55 #> pred[4: Individual counselling] -3.21 0.60 -4.53 -3.58 -3.18 -2.79 -2.08 #> pred[4: Self-help]              -3.56 0.73 -5.09 -4.01 -3.54 -3.08 -2.22 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[4: No intervention]            4517     2877    1 #> pred[4: Group counselling]          3108     2731    1 #> pred[4: Individual counselling]     3779     2826    1 #> pred[4: Self-help]                  3231     2755    1 #>  #> ---------------------------------------------------------------------- Study: 5 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[5: No intervention]        -2.16 0.14 -2.44 -2.25 -2.16 -2.06 -1.89 #> pred[5: Group counselling]      -1.06 0.46 -1.93 -1.36 -1.08 -0.77 -0.10 #> pred[5: Individual counselling] -1.31 0.27 -1.82 -1.49 -1.32 -1.14 -0.79 #> pred[5: Self-help]              -1.67 0.45 -2.54 -1.97 -1.67 -1.40 -0.73 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[5: No intervention]            7216     2481    1 #> pred[5: Group counselling]          1871     2291    1 #> pred[5: Individual counselling]     1367     1869    1 #> pred[5: Self-help]                  1897     2272    1 #>  #> ---------------------------------------------------------------------- Study: 6 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[6: No intervention]        -3.44 0.73 -5.03 -3.91 -3.37 -2.91 -2.18 #> pred[6: Group counselling]      -2.34 0.82 -4.00 -2.87 -2.28 -1.77 -0.85 #> pred[6: Individual counselling] -2.59 0.72 -4.15 -3.03 -2.54 -2.08 -1.37 #> pred[6: Self-help]              -2.95 0.83 -4.71 -3.46 -2.89 -2.37 -1.48 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[6: No intervention]            2931     2612    1 #> pred[6: Group counselling]          3068     2925    1 #> pred[6: Individual counselling]     3475     2628    1 #> pred[6: Self-help]                  3156     2561    1 #>  #> ---------------------------------------------------------------------- Study: 7 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[7: No intervention]        -3.02 0.44 -3.96 -3.30 -3.01 -2.72 -2.23 #> pred[7: Group counselling]      -1.93 0.59 -3.09 -2.32 -1.91 -1.53 -0.79 #> pred[7: Individual counselling] -2.18 0.46 -3.14 -2.47 -2.16 -1.87 -1.34 #> pred[7: Self-help]              -2.54 0.59 -3.77 -2.91 -2.52 -2.14 -1.43 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[7: No intervention]            3401     2636    1 #> pred[7: Group counselling]          3044     3222    1 #> pred[7: Individual counselling]     2745     2297    1 #> pred[7: Self-help]                  2787     2604    1 #>  #> ---------------------------------------------------------------------- Study: 8 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[8: No intervention]        -2.69 0.61 -4.01 -3.06 -2.65 -2.29 -1.63 #> pred[8: Group counselling]      -1.60 0.71 -3.08 -2.03 -1.58 -1.12 -0.28 #> pred[8: Individual counselling] -1.85 0.60 -3.13 -2.22 -1.81 -1.46 -0.79 #> pred[8: Self-help]              -2.21 0.71 -3.73 -2.65 -2.18 -1.72 -0.92 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[8: No intervention]            3924     2722    1 #> pred[8: Group counselling]          3663     2857    1 #> pred[8: Individual counselling]     3701     2841    1 #> pred[8: Self-help]                  3354     2875    1 #>  #> ---------------------------------------------------------------------- Study: 9 ----  #>  #>                                  mean   sd  2.5%   25%   50%   75% 97.5% #> pred[9: No intervention]        -1.83 0.41 -2.69 -2.09 -1.81 -1.55 -1.07 #> pred[9: Group counselling]      -0.73 0.59 -1.90 -1.11 -0.74 -0.36  0.48 #> pred[9: Individual counselling] -0.99 0.45 -1.88 -1.28 -0.99 -0.69 -0.11 #> pred[9: Self-help]              -1.34 0.58 -2.49 -1.72 -1.35 -0.97 -0.19 #>                                 Bulk_ESS Tail_ESS Rhat #> pred[9: No intervention]            4482     2865    1 #> pred[9: Group counselling]          2997     2762    1 #> pred[9: Individual counselling]     2675     2773    1 #> pred[9: Self-help]                  2345     2695    1 #>  #> --------------------------------------------------------------------- Study: 10 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[10: No intervention]        -2.08 0.12 -2.32 -2.16 -2.08 -2.00 -1.86 #> pred[10: Group counselling]      -0.99 0.46 -1.84 -1.28 -1.01 -0.71 -0.02 #> pred[10: Individual counselling] -1.24 0.26 -1.75 -1.41 -1.24 -1.07 -0.71 #> pred[10: Self-help]              -1.59 0.43 -2.42 -1.88 -1.61 -1.32 -0.70 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[10: No intervention]            8412     3177    1 #> pred[10: Group counselling]          1912     2232    1 #> pred[10: Individual counselling]     1418     2090    1 #> pred[10: Self-help]                  1802     2259    1 #>  #> --------------------------------------------------------------------- Study: 11 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[11: No intervention]        -3.63 0.24 -4.12 -3.78 -3.62 -3.46 -3.19 #> pred[11: Group counselling]      -2.53 0.50 -3.50 -2.87 -2.54 -2.21 -1.49 #> pred[11: Individual counselling] -2.78 0.33 -3.44 -3.00 -2.79 -2.56 -2.14 #> pred[11: Self-help]              -3.14 0.46 -4.05 -3.44 -3.14 -2.84 -2.22 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[11: No intervention]            6328     2475    1 #> pred[11: Group counselling]          2214     2587    1 #> pred[11: Individual counselling]     1985     2661    1 #> pred[11: Self-help]                  2013     2435    1 #>  #> --------------------------------------------------------------------- Study: 12 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[12: No intervention]        -2.22 0.13 -2.48 -2.31 -2.22 -2.13 -1.96 #> pred[12: Group counselling]      -1.12 0.46 -1.99 -1.43 -1.15 -0.85 -0.15 #> pred[12: Individual counselling] -1.38 0.26 -1.87 -1.55 -1.38 -1.21 -0.83 #> pred[12: Self-help]              -1.73 0.44 -2.58 -2.03 -1.73 -1.46 -0.82 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[12: No intervention]            6686     2847    1 #> pred[12: Group counselling]          1813     2235    1 #> pred[12: Individual counselling]     1324     2136    1 #> pred[12: Self-help]                  1745     2193    1 #>  #> --------------------------------------------------------------------- Study: 13 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[13: No intervention]        -2.68 0.44 -3.61 -2.96 -2.65 -2.37 -1.88 #> pred[13: Group counselling]      -1.58 0.61 -2.72 -1.99 -1.59 -1.18 -0.37 #> pred[13: Individual counselling] -1.83 0.47 -2.77 -2.14 -1.83 -1.51 -0.95 #> pred[13: Self-help]              -2.19 0.60 -3.40 -2.57 -2.19 -1.78 -1.05 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[13: No intervention]            4280     3141    1 #> pred[13: Group counselling]          2501     2542    1 #> pred[13: Individual counselling]     2838     2720    1 #> pred[13: Self-help]                  2358     2543    1 #>  #> --------------------------------------------------------------------- Study: 14 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[14: No intervention]        -2.41 0.23 -2.87 -2.57 -2.41 -2.26 -1.98 #> pred[14: Group counselling]      -1.32 0.49 -2.24 -1.63 -1.33 -1.00 -0.33 #> pred[14: Individual counselling] -1.57 0.31 -2.19 -1.77 -1.57 -1.37 -0.93 #> pred[14: Self-help]              -1.92 0.48 -2.84 -2.24 -1.93 -1.62 -0.92 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[14: No intervention]            5472     3074    1 #> pred[14: Group counselling]          2163     2196    1 #> pred[14: Individual counselling]     1798     2215    1 #> pred[14: Self-help]                  2190     2357    1 #>  #> --------------------------------------------------------------------- Study: 15 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[15: No intervention]        -2.72 0.77 -4.43 -3.17 -2.66 -2.18 -1.41 #> pred[15: Group counselling]      -1.62 0.77 -3.26 -2.09 -1.56 -1.12 -0.24 #> pred[15: Individual counselling] -1.88 0.78 -3.61 -2.34 -1.81 -1.33 -0.55 #> pred[15: Self-help]              -2.23 0.84 -4.08 -2.73 -2.18 -1.66 -0.75 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[15: No intervention]            3137     2210    1 #> pred[15: Group counselling]          3298     2081    1 #> pred[15: Individual counselling]     3037     2063    1 #> pred[15: Self-help]                  2939     2252    1 #>  #> --------------------------------------------------------------------- Study: 16 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[16: No intervention]        -2.62 0.35 -3.34 -2.85 -2.61 -2.37 -1.97 #> pred[16: Group counselling]      -1.52 0.54 -2.59 -1.88 -1.53 -1.17 -0.42 #> pred[16: Individual counselling] -1.78 0.41 -2.61 -2.05 -1.76 -1.49 -1.00 #> pred[16: Self-help]              -2.13 0.50 -3.11 -2.46 -2.13 -1.80 -1.15 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[16: No intervention]            5329     3090    1 #> pred[16: Group counselling]          2693     2936    1 #> pred[16: Individual counselling]     2881     2703    1 #> pred[16: Self-help]                  2664     2721    1 #>  #> --------------------------------------------------------------------- Study: 17 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[17: No intervention]        -2.37 0.11 -2.60 -2.45 -2.37 -2.30 -2.16 #> pred[17: Group counselling]      -1.28 0.46 -2.13 -1.58 -1.30 -1.00 -0.31 #> pred[17: Individual counselling] -1.53 0.25 -2.02 -1.70 -1.53 -1.37 -1.02 #> pred[17: Self-help]              -1.89 0.43 -2.70 -2.17 -1.89 -1.61 -0.99 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[17: No intervention]            8208     2963 1.01 #> pred[17: Group counselling]          1844     2203 1.00 #> pred[17: Individual counselling]     1331     2099 1.00 #> pred[17: Self-help]                  1798     2405 1.00 #>  #> --------------------------------------------------------------------- Study: 18 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[18: No intervention]        -2.57 0.27 -3.11 -2.74 -2.56 -2.38 -2.08 #> pred[18: Group counselling]      -1.47 0.51 -2.44 -1.81 -1.47 -1.15 -0.43 #> pred[18: Individual counselling] -1.72 0.34 -2.39 -1.93 -1.72 -1.50 -1.05 #> pred[18: Self-help]              -2.08 0.50 -3.04 -2.41 -2.08 -1.76 -1.05 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[18: No intervention]            5508     2968    1 #> pred[18: Group counselling]          2105     2468    1 #> pred[18: Individual counselling]     2040     2349    1 #> pred[18: Self-help]                  2294     2327    1 #>  #> --------------------------------------------------------------------- Study: 19 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[19: No intervention]        -1.90 0.12 -2.14 -1.98 -1.90 -1.82 -1.66 #> pred[19: Group counselling]      -0.80 0.45 -1.68 -1.11 -0.82 -0.52  0.15 #> pred[19: Individual counselling] -1.06 0.26 -1.55 -1.23 -1.06 -0.89 -0.53 #> pred[19: Self-help]              -1.41 0.44 -2.25 -1.71 -1.43 -1.14 -0.49 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[19: No intervention]            7568     2881    1 #> pred[19: Group counselling]          1849     2252    1 #> pred[19: Individual counselling]     1337     1980    1 #> pred[19: Self-help]                  1837     2484    1 #>  #> --------------------------------------------------------------------- Study: 20 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[20: No intervention]        -2.80 0.13 -3.06 -2.89 -2.80 -2.71 -2.56 #> pred[20: Group counselling]      -1.70 0.46 -2.56 -2.02 -1.72 -1.42 -0.74 #> pred[20: Individual counselling] -1.96 0.26 -2.46 -2.13 -1.96 -1.79 -1.40 #> pred[20: Self-help]              -2.31 0.44 -3.16 -2.61 -2.32 -2.04 -1.36 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[20: No intervention]            7760     2584    1 #> pred[20: Group counselling]          1836     2074    1 #> pred[20: Individual counselling]     1409     2155    1 #> pred[20: Self-help]                  1866     2181    1 #>  #> --------------------------------------------------------------------- Study: 21 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[21: No intervention]        -1.11 0.83 -2.75 -1.61 -1.11 -0.59  0.55 #> pred[21: Group counselling]      -0.01 0.89 -1.75 -0.58 -0.01  0.55  1.77 #> pred[21: Individual counselling] -0.26 0.82 -1.89 -0.77 -0.27  0.24  1.41 #> pred[21: Self-help]              -0.62 0.82 -2.22 -1.11 -0.63 -0.10  0.98 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[21: No intervention]            2861     2911    1 #> pred[21: Group counselling]          3274     2617    1 #> pred[21: Individual counselling]     3215     2852    1 #> pred[21: Self-help]                  3921     2824    1 #>  #> --------------------------------------------------------------------- Study: 22 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[22: No intervention]        -2.39 0.87 -4.16 -2.94 -2.36 -1.83 -0.73 #> pred[22: Group counselling]      -1.29 0.82 -2.90 -1.82 -1.28 -0.77  0.31 #> pred[22: Individual counselling] -1.54 0.85 -3.28 -2.10 -1.53 -1.00  0.13 #> pred[22: Self-help]              -1.90 0.85 -3.62 -2.44 -1.88 -1.35 -0.29 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[22: No intervention]            2561     2187    1 #> pred[22: Group counselling]          3375     2250    1 #> pred[22: Individual counselling]     3016     2535    1 #> pred[22: Self-help]                  3826     2191    1 #>  #> --------------------------------------------------------------------- Study: 23 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[23: No intervention]        -2.32 0.79 -3.86 -2.83 -2.30 -1.81 -0.76 #> pred[23: Group counselling]      -1.22 0.78 -2.79 -1.72 -1.22 -0.73  0.34 #> pred[23: Individual counselling] -1.47 0.78 -3.03 -1.98 -1.47 -0.98  0.06 #> pred[23: Self-help]              -1.83 0.86 -3.52 -2.39 -1.82 -1.28 -0.15 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[23: No intervention]            3228     2735    1 #> pred[23: Group counselling]          3401     2615    1 #> pred[23: Individual counselling]     3517     2659    1 #> pred[23: Self-help]                  3315     2466    1 #>  #> --------------------------------------------------------------------- Study: 24 ----  #>  #>                                   mean   sd  2.5%   25%   50%   75% 97.5% #> pred[24: No intervention]        -2.80 0.87 -4.54 -3.36 -2.80 -2.26 -1.02 #> pred[24: Group counselling]      -1.70 0.87 -3.39 -2.27 -1.72 -1.14  0.09 #> pred[24: Individual counselling] -1.96 0.85 -3.63 -2.51 -1.95 -1.43 -0.26 #> pred[24: Self-help]              -2.31 0.93 -4.11 -2.93 -2.33 -1.72 -0.38 #>                                  Bulk_ESS Tail_ESS Rhat #> pred[24: No intervention]            2794     2672    1 #> pred[24: Group counselling]          3507     2741    1 #> pred[24: Individual counselling]     3230     2814    1 #> pred[24: Self-help]                  3015     2603    1 #>   # Predicted probabilities of success in each study in the network predict(smk_fit_RE, type = \"response\") #> ---------------------------------------------------------------------- Study: 1 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[1: No intervention]        0.06 0.02 0.03 0.05 0.06 0.07  0.10     5189 #> pred[1: Group counselling]      0.17 0.07 0.06 0.12 0.15 0.20  0.34     2642 #> pred[1: Individual counselling] 0.13 0.04 0.06 0.10 0.13 0.16  0.23     2544 #> pred[1: Self-help]              0.10 0.05 0.04 0.07 0.09 0.12  0.22     2533 #>                                 Tail_ESS Rhat #> pred[1: No intervention]            2991    1 #> pred[1: Group counselling]          2502    1 #> pred[1: Individual counselling]     2751    1 #> pred[1: Self-help]                  2590    1 #>  #> ---------------------------------------------------------------------- Study: 2 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[2: No intervention]        0.09 0.07 0.02 0.04 0.07 0.11  0.25     2277 #> pred[2: Group counselling]      0.21 0.12 0.05 0.12 0.19 0.27  0.51     3131 #> pred[2: Individual counselling] 0.18 0.11 0.04 0.10 0.15 0.23  0.44     2830 #> pred[2: Self-help]              0.13 0.09 0.03 0.07 0.11 0.17  0.37     3219 #>                                 Tail_ESS Rhat #> pred[2: No intervention]            2445    1 #> pred[2: Group counselling]          2965    1 #> pred[2: Individual counselling]     2552    1 #> pred[2: Self-help]                  2290    1 #>  #> ---------------------------------------------------------------------- Study: 3 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[3: No intervention]        0.11 0.01 0.09 0.10 0.11 0.11  0.13     8614 #> pred[3: Group counselling]      0.27 0.09 0.13 0.21 0.26 0.32  0.48     1892 #> pred[3: Individual counselling] 0.22 0.04 0.14 0.19 0.21 0.24  0.31     1382 #> pred[3: Self-help]              0.17 0.06 0.08 0.13 0.16 0.20  0.32     1875 #>                                 Tail_ESS Rhat #> pred[3: No intervention]            2760    1 #> pred[3: Group counselling]          2233    1 #> pred[3: Individual counselling]     2169    1 #> pred[3: Self-help]                  2373    1 #>  #> ---------------------------------------------------------------------- Study: 4 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[4: No intervention]        0.02 0.01 0.00 0.01 0.02 0.03  0.05     4517 #> pred[4: Group counselling]      0.06 0.04 0.01 0.03 0.05 0.08  0.17     3108 #> pred[4: Individual counselling] 0.05 0.03 0.01 0.03 0.04 0.06  0.11     3779 #> pred[4: Self-help]              0.03 0.03 0.01 0.02 0.03 0.04  0.10     3231 #>                                 Tail_ESS Rhat #> pred[4: No intervention]            2877    1 #> pred[4: Group counselling]          2731    1 #> pred[4: Individual counselling]     2826    1 #> pred[4: Self-help]                  2755    1 #>  #> ---------------------------------------------------------------------- Study: 5 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[5: No intervention]        0.10 0.01 0.08 0.10 0.10 0.11  0.13     7216 #> pred[5: Group counselling]      0.27 0.09 0.13 0.20 0.25 0.32  0.47     1871 #> pred[5: Individual counselling] 0.22 0.05 0.14 0.18 0.21 0.24  0.31     1367 #> pred[5: Self-help]              0.17 0.06 0.07 0.12 0.16 0.20  0.33     1897 #>                                 Tail_ESS Rhat #> pred[5: No intervention]            2481    1 #> pred[5: Group counselling]          2291    1 #> pred[5: Individual counselling]     1869    1 #> pred[5: Self-help]                  2272    1 #>  #> ---------------------------------------------------------------------- Study: 6 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[6: No intervention]        0.04 0.03 0.01 0.02 0.03 0.05  0.10     2931 #> pred[6: Group counselling]      0.11 0.08 0.02 0.05 0.09 0.15  0.30     3068 #> pred[6: Individual counselling] 0.08 0.05 0.02 0.05 0.07 0.11  0.20     3475 #> pred[6: Self-help]              0.06 0.05 0.01 0.03 0.05 0.09  0.19     3156 #>                                 Tail_ESS Rhat #> pred[6: No intervention]            2612    1 #> pred[6: Group counselling]          2925    1 #> pred[6: Individual counselling]     2628    1 #> pred[6: Self-help]                  2561    1 #>  #> ---------------------------------------------------------------------- Study: 7 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[7: No intervention]        0.05 0.02 0.02 0.04 0.05 0.06  0.10     3401 #> pred[7: Group counselling]      0.14 0.07 0.04 0.09 0.13 0.18  0.31     3044 #> pred[7: Individual counselling] 0.11 0.04 0.04 0.08 0.10 0.13  0.21     2745 #> pred[7: Self-help]              0.08 0.04 0.02 0.05 0.07 0.10  0.19     2787 #>                                 Tail_ESS Rhat #> pred[7: No intervention]            2636    1 #> pred[7: Group counselling]          3222    1 #> pred[7: Individual counselling]     2297    1 #> pred[7: Self-help]                  2604    1 #>  #> ---------------------------------------------------------------------- Study: 8 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[8: No intervention]        0.07 0.04 0.02 0.04 0.07 0.09  0.16     3924 #> pred[8: Group counselling]      0.19 0.10 0.04 0.12 0.17 0.25  0.43     3663 #> pred[8: Individual counselling] 0.15 0.07 0.04 0.10 0.14 0.19  0.31     3701 #> pred[8: Self-help]              0.12 0.07 0.02 0.07 0.10 0.15  0.29     3354 #>                                 Tail_ESS Rhat #> pred[8: No intervention]            2722    1 #> pred[8: Group counselling]          2857    1 #> pred[8: Individual counselling]     2841    1 #> pred[8: Self-help]                  2875    1 #>  #> ---------------------------------------------------------------------- Study: 9 ----  #>  #>                                 mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[9: No intervention]        0.15 0.05 0.06 0.11 0.14 0.17  0.26     4482 #> pred[9: Group counselling]      0.34 0.12 0.13 0.25 0.32 0.41  0.62     2997 #> pred[9: Individual counselling] 0.28 0.09 0.13 0.22 0.27 0.33  0.47     2675 #> pred[9: Self-help]              0.22 0.10 0.08 0.15 0.21 0.28  0.45     2345 #>                                 Tail_ESS Rhat #> pred[9: No intervention]            2865    1 #> pred[9: Group counselling]          2762    1 #> pred[9: Individual counselling]     2773    1 #> pred[9: Self-help]                  2695    1 #>  #> --------------------------------------------------------------------- Study: 10 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[10: No intervention]        0.11 0.01 0.09 0.10 0.11 0.12  0.14     8412 #> pred[10: Group counselling]      0.28 0.09 0.14 0.22 0.27 0.33  0.50     1912 #> pred[10: Individual counselling] 0.23 0.05 0.15 0.20 0.22 0.26  0.33     1418 #> pred[10: Self-help]              0.18 0.06 0.08 0.13 0.17 0.21  0.33     1802 #>                                  Tail_ESS Rhat #> pred[10: No intervention]            3177    1 #> pred[10: Group counselling]          2232    1 #> pred[10: Individual counselling]     2090    1 #> pred[10: Self-help]                  2259    1 #>  #> --------------------------------------------------------------------- Study: 11 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[11: No intervention]        0.03 0.01 0.02 0.02 0.03 0.03  0.04     6328 #> pred[11: Group counselling]      0.08 0.04 0.03 0.05 0.07 0.10  0.18     2214 #> pred[11: Individual counselling] 0.06 0.02 0.03 0.05 0.06 0.07  0.11     1985 #> pred[11: Self-help]              0.05 0.02 0.02 0.03 0.04 0.06  0.10     2013 #>                                  Tail_ESS Rhat #> pred[11: No intervention]            2475    1 #> pred[11: Group counselling]          2587    1 #> pred[11: Individual counselling]     2661    1 #> pred[11: Self-help]                  2435    1 #>  #> --------------------------------------------------------------------- Study: 12 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[12: No intervention]        0.10 0.01 0.08 0.09 0.10 0.11  0.12     6686 #> pred[12: Group counselling]      0.25 0.09 0.12 0.19 0.24 0.30  0.46     1813 #> pred[12: Individual counselling] 0.20 0.04 0.13 0.18 0.20 0.23  0.30     1324 #> pred[12: Self-help]              0.16 0.06 0.07 0.12 0.15 0.19  0.31     1745 #>                                  Tail_ESS Rhat #> pred[12: No intervention]            2847    1 #> pred[12: Group counselling]          2235    1 #> pred[12: Individual counselling]     2136    1 #> pred[12: Self-help]                  2193    1 #>  #> --------------------------------------------------------------------- Study: 13 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[13: No intervention]        0.07 0.03 0.03 0.05 0.07 0.09  0.13     4280 #> pred[13: Group counselling]      0.19 0.09 0.06 0.12 0.17 0.24  0.41     2501 #> pred[13: Individual counselling] 0.15 0.06 0.06 0.10 0.14 0.18  0.28     2838 #> pred[13: Self-help]              0.11 0.06 0.03 0.07 0.10 0.14  0.26     2358 #>                                  Tail_ESS Rhat #> pred[13: No intervention]            3141    1 #> pred[13: Group counselling]          2542    1 #> pred[13: Individual counselling]     2720    1 #> pred[13: Self-help]                  2543    1 #>  #> --------------------------------------------------------------------- Study: 14 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[14: No intervention]        0.08 0.02 0.05 0.07 0.08 0.09  0.12     5472 #> pred[14: Group counselling]      0.22 0.08 0.10 0.16 0.21 0.27  0.42     2163 #> pred[14: Individual counselling] 0.18 0.05 0.10 0.14 0.17 0.20  0.28     1798 #> pred[14: Self-help]              0.14 0.06 0.06 0.10 0.13 0.17  0.29     2190 #>                                  Tail_ESS Rhat #> pred[14: No intervention]            3074    1 #> pred[14: Group counselling]          2196    1 #> pred[14: Individual counselling]     2215    1 #> pred[14: Self-help]                  2357    1 #>  #> --------------------------------------------------------------------- Study: 15 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[15: No intervention]        0.08 0.05 0.01 0.04 0.07 0.10  0.20     3137 #> pred[15: Group counselling]      0.19 0.10 0.04 0.11 0.17 0.25  0.44     3298 #> pred[15: Individual counselling] 0.16 0.09 0.03 0.09 0.14 0.21  0.37     3037 #> pred[15: Self-help]              0.12 0.08 0.02 0.06 0.10 0.16  0.32     2939 #>                                  Tail_ESS Rhat #> pred[15: No intervention]            2210    1 #> pred[15: Group counselling]          2081    1 #> pred[15: Individual counselling]     2063    1 #> pred[15: Self-help]                  2252    1 #>  #> --------------------------------------------------------------------- Study: 16 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[16: No intervention]        0.07 0.02 0.03 0.05 0.07 0.09  0.12     5329 #> pred[16: Group counselling]      0.19 0.08 0.07 0.13 0.18 0.24  0.40     2693 #> pred[16: Individual counselling] 0.15 0.05 0.07 0.11 0.15 0.18  0.27     2881 #> pred[16: Self-help]              0.12 0.05 0.04 0.08 0.11 0.14  0.24     2664 #>                                  Tail_ESS Rhat #> pred[16: No intervention]            3090    1 #> pred[16: Group counselling]          2936    1 #> pred[16: Individual counselling]     2703    1 #> pred[16: Self-help]                  2721    1 #>  #> --------------------------------------------------------------------- Study: 17 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[17: No intervention]        0.09 0.01 0.07 0.08 0.09 0.09  0.10     8208 #> pred[17: Group counselling]      0.23 0.08 0.11 0.17 0.21 0.27  0.42     1844 #> pred[17: Individual counselling] 0.18 0.04 0.12 0.15 0.18 0.20  0.27     1331 #> pred[17: Self-help]              0.14 0.05 0.06 0.10 0.13 0.17  0.27     1798 #>                                  Tail_ESS Rhat #> pred[17: No intervention]            2963 1.01 #> pred[17: Group counselling]          2203 1.00 #> pred[17: Individual counselling]     2099 1.00 #> pred[17: Self-help]                  2405 1.00 #>  #> --------------------------------------------------------------------- Study: 18 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[18: No intervention]        0.07 0.02 0.04 0.06 0.07 0.08  0.11     5508 #> pred[18: Group counselling]      0.20 0.08 0.08 0.14 0.19 0.24  0.39     2105 #> pred[18: Individual counselling] 0.16 0.04 0.08 0.13 0.15 0.18  0.26     2040 #> pred[18: Self-help]              0.12 0.05 0.05 0.08 0.11 0.15  0.26     2294 #>                                  Tail_ESS Rhat #> pred[18: No intervention]            2968    1 #> pred[18: Group counselling]          2468    1 #> pred[18: Individual counselling]     2349    1 #> pred[18: Self-help]                  2327    1 #>  #> --------------------------------------------------------------------- Study: 19 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[19: No intervention]        0.13 0.01 0.10 0.12 0.13 0.14  0.16     7568 #> pred[19: Group counselling]      0.32 0.10 0.16 0.25 0.31 0.37  0.54     1849 #> pred[19: Individual counselling] 0.26 0.05 0.17 0.23 0.26 0.29  0.37     1337 #> pred[19: Self-help]              0.20 0.07 0.10 0.15 0.19 0.24  0.38     1837 #>                                  Tail_ESS Rhat #> pred[19: No intervention]            2881    1 #> pred[19: Group counselling]          2252    1 #> pred[19: Individual counselling]     1980    1 #> pred[19: Self-help]                  2484    1 #>  #> --------------------------------------------------------------------- Study: 20 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[20: No intervention]        0.06 0.01 0.04 0.05 0.06 0.06  0.07     7760 #> pred[20: Group counselling]      0.16 0.06 0.07 0.12 0.15 0.19  0.32     1836 #> pred[20: Individual counselling] 0.13 0.03 0.08 0.11 0.12 0.14  0.20     1409 #> pred[20: Self-help]              0.10 0.04 0.04 0.07 0.09 0.11  0.20     1866 #>                                  Tail_ESS Rhat #> pred[20: No intervention]            2584    1 #> pred[20: Group counselling]          2074    1 #> pred[20: Individual counselling]     2155    1 #> pred[20: Self-help]                  2181    1 #>  #> --------------------------------------------------------------------- Study: 21 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[21: No intervention]        0.27 0.15 0.06 0.17 0.25 0.36  0.63     2861 #> pred[21: Group counselling]      0.50 0.19 0.15 0.36 0.50 0.63  0.85     3274 #> pred[21: Individual counselling] 0.44 0.17 0.13 0.32 0.43 0.56  0.80     3215 #> pred[21: Self-help]              0.37 0.17 0.10 0.25 0.35 0.48  0.73     3921 #>                                  Tail_ESS Rhat #> pred[21: No intervention]            2911    1 #> pred[21: Group counselling]          2617    1 #> pred[21: Individual counselling]     2852    1 #> pred[21: Self-help]                  2824    1 #>  #> --------------------------------------------------------------------- Study: 22 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[22: No intervention]        0.11 0.08 0.02 0.05 0.09 0.14  0.33     2561 #> pred[22: Group counselling]      0.24 0.14 0.05 0.14 0.22 0.32  0.58     3375 #> pred[22: Individual counselling] 0.21 0.13 0.04 0.11 0.18 0.27  0.53     3016 #> pred[22: Self-help]              0.16 0.11 0.03 0.08 0.13 0.21  0.43     3826 #>                                  Tail_ESS Rhat #> pred[22: No intervention]            2187    1 #> pred[22: Group counselling]          2250    1 #> pred[22: Individual counselling]     2535    1 #> pred[22: Self-help]                  2191    1 #>  #> --------------------------------------------------------------------- Study: 23 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[23: No intervention]        0.11 0.08 0.02 0.06 0.09 0.14  0.32     3228 #> pred[23: Group counselling]      0.25 0.14 0.06 0.15 0.23 0.33  0.58     3401 #> pred[23: Individual counselling] 0.21 0.12 0.05 0.12 0.19 0.27  0.52     3517 #> pred[23: Self-help]              0.17 0.12 0.03 0.08 0.14 0.22  0.46     3315 #>                                  Tail_ESS Rhat #> pred[23: No intervention]            2735    1 #> pred[23: Group counselling]          2615    1 #> pred[23: Individual counselling]     2659    1 #> pred[23: Self-help]                  2466    1 #>  #> --------------------------------------------------------------------- Study: 24 ----  #>  #>                                  mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[24: No intervention]        0.08 0.07 0.01 0.03 0.06 0.09  0.27     2794 #> pred[24: Group counselling]      0.18 0.13 0.03 0.09 0.15 0.24  0.52     3507 #> pred[24: Individual counselling] 0.15 0.11 0.03 0.08 0.12 0.19  0.44     3230 #> pred[24: Self-help]              0.12 0.10 0.02 0.05 0.09 0.15  0.40     3015 #>                                  Tail_ESS Rhat #> pred[24: No intervention]            2672    1 #> pred[24: Group counselling]          2741    1 #> pred[24: Individual counselling]     2814    1 #> pred[24: Self-help]                  2603    1 #>   # Predicted probabilities in a population with 67 observed events out of 566 # individuals on No Intervention, corresponding to a Beta(67, 566 - 67) # distribution on the baseline probability of response, using # `baseline_type = \"response\"` (smk_pred_RE <- predict(smk_fit_RE,                         baseline = distr(qbeta, 67, 566 - 67),                         baseline_type = \"response\",                         type = \"response\")) #>                              mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[No intervention]        0.12 0.01 0.09 0.11 0.12 0.13  0.15     3883 #> pred[Group counselling]      0.29 0.09 0.14 0.23 0.28 0.35  0.52     1909 #> pred[Individual counselling] 0.24 0.05 0.16 0.21 0.24 0.27  0.35     1451 #> pred[Self-help]              0.19 0.07 0.09 0.14 0.18 0.23  0.35     1920 #>                              Tail_ESS Rhat #> pred[No intervention]            3914    1 #> pred[Group counselling]          2125    1 #> pred[Individual counselling]     2124    1 #> pred[Self-help]                  2273    1 plot(smk_pred_RE, ref_line = c(0, 1))   # Predicted probabilities in a population with a baseline log odds of # response on No Intervention given a Normal distribution with mean -2 # and SD 0.13, using `baseline_type = \"link\"` (the default) # Note: this is approximately equivalent to the above Beta distribution on # the baseline probability (smk_pred_RE2 <- predict(smk_fit_RE,                          baseline = distr(qnorm, mean = -2, sd = 0.13),                          type = \"response\")) #>                              mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS #> pred[No intervention]        0.12 0.01 0.10 0.11 0.12 0.13  0.15     3754 #> pred[Group counselling]      0.30 0.09 0.15 0.23 0.29 0.35  0.52     1926 #> pred[Individual counselling] 0.24 0.05 0.16 0.21 0.24 0.27  0.35     1419 #> pred[Self-help]              0.19 0.07 0.09 0.14 0.18 0.23  0.36     1809 #>                              Tail_ESS Rhat #> pred[No intervention]            3790    1 #> pred[Group counselling]          2065    1 #> pred[Individual counselling]     2235    1 #> pred[Self-help]                  2343    1 plot(smk_pred_RE2, ref_line = c(0, 1))  # }  ## Plaque psoriasis ML-NMR # \\donttest{ # Run plaque psoriasis ML-NMR example if not already available if (!exists(\"pso_fit\")) example(\"example_pso_mlnmr\", run.donttest = TRUE) # } # \\donttest{ # Predicted probabilities of response in each study in the network (pso_pred <- predict(pso_fit, type = \"response\")) #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #>                        mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> pred[FIXTURE: PBO]     0.04 0.01 0.03 0.04 0.04 0.05  0.06     4103     3095 #> pred[FIXTURE: ETN]     0.46 0.03 0.41 0.44 0.46 0.47  0.51     6477     2930 #> pred[FIXTURE: IXE_Q2W] 0.89 0.02 0.85 0.88 0.89 0.90  0.92     6671     3458 #> pred[FIXTURE: IXE_Q4W] 0.80 0.03 0.74 0.78 0.80 0.81  0.84     6902     3203 #> pred[FIXTURE: SEC_150] 0.67 0.03 0.62 0.65 0.67 0.69  0.72     9938     3221 #> pred[FIXTURE: SEC_300] 0.77 0.02 0.72 0.76 0.77 0.79  0.81     7728     2894 #>                        Rhat #> pred[FIXTURE: PBO]        1 #> pred[FIXTURE: ETN]        1 #> pred[FIXTURE: IXE_Q2W]    1 #> pred[FIXTURE: IXE_Q4W]    1 #> pred[FIXTURE: SEC_150]    1 #> pred[FIXTURE: SEC_300]    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #>                          mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> pred[UNCOVER-1: PBO]     0.06 0.01 0.04 0.05 0.06 0.06  0.08     5597     3113 #> pred[UNCOVER-1: ETN]     0.46 0.03 0.40 0.44 0.46 0.48  0.52     7741     3145 #> pred[UNCOVER-1: IXE_Q2W] 0.90 0.01 0.88 0.89 0.90 0.91  0.92     8016     3215 #> pred[UNCOVER-1: IXE_Q4W] 0.81 0.02 0.78 0.80 0.81 0.82  0.84     9029     2886 #> pred[UNCOVER-1: SEC_150] 0.69 0.04 0.60 0.66 0.69 0.72  0.77     6664     3040 #> pred[UNCOVER-1: SEC_300] 0.79 0.04 0.71 0.76 0.79 0.81  0.85     6544     3244 #>                          Rhat #> pred[UNCOVER-1: PBO]        1 #> pred[UNCOVER-1: ETN]        1 #> pred[UNCOVER-1: IXE_Q2W]    1 #> pred[UNCOVER-1: IXE_Q4W]    1 #> pred[UNCOVER-1: SEC_150]    1 #> pred[UNCOVER-1: SEC_300]    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #>                          mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> pred[UNCOVER-2: PBO]     0.05 0.01 0.03 0.04 0.05 0.05  0.06     5386     3116 #> pred[UNCOVER-2: ETN]     0.42 0.02 0.38 0.41 0.42 0.43  0.46     9169     3277 #> pred[UNCOVER-2: IXE_Q2W] 0.88 0.01 0.86 0.87 0.88 0.89  0.91     7870     3056 #> pred[UNCOVER-2: IXE_Q4W] 0.78 0.02 0.75 0.77 0.78 0.79  0.81     9279     3183 #> pred[UNCOVER-2: SEC_150] 0.65 0.04 0.57 0.62 0.65 0.68  0.73     6866     3251 #> pred[UNCOVER-2: SEC_300] 0.75 0.04 0.68 0.73 0.76 0.78  0.82     6599     2895 #>                          Rhat #> pred[UNCOVER-2: PBO]        1 #> pred[UNCOVER-2: ETN]        1 #> pred[UNCOVER-2: IXE_Q2W]    1 #> pred[UNCOVER-2: IXE_Q4W]    1 #> pred[UNCOVER-2: SEC_150]    1 #> pred[UNCOVER-2: SEC_300]    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #>                          mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> pred[UNCOVER-3: PBO]     0.08 0.01 0.06 0.07 0.08 0.08  0.10     4935     3172 #> pred[UNCOVER-3: ETN]     0.53 0.02 0.49 0.52 0.53 0.54  0.57    10238     3038 #> pred[UNCOVER-3: IXE_Q2W] 0.93 0.01 0.91 0.92 0.93 0.93  0.94     7082     3074 #> pred[UNCOVER-3: IXE_Q4W] 0.85 0.01 0.83 0.85 0.85 0.86  0.88     9751     3296 #> pred[UNCOVER-3: SEC_150] 0.75 0.03 0.68 0.72 0.75 0.77  0.81     6986     3183 #> pred[UNCOVER-3: SEC_300] 0.83 0.03 0.78 0.81 0.83 0.85  0.88     6613     3250 #>                          Rhat #> pred[UNCOVER-3: PBO]        1 #> pred[UNCOVER-3: ETN]        1 #> pred[UNCOVER-3: IXE_Q2W]    1 #> pred[UNCOVER-3: IXE_Q4W]    1 #> pred[UNCOVER-3: SEC_150]    1 #> pred[UNCOVER-3: SEC_300]    1 #>  plot(pso_pred, ref_line = c(0, 1))   # Predicted probabilites of response in a new target population, with means # and SDs or proportions given by new_agd_int <- data.frame(   bsa_mean = 0.6,   bsa_sd = 0.3,   prevsys = 0.1,   psa = 0.2,   weight_mean = 10,   weight_sd = 1,   durnpso_mean = 3,   durnpso_sd = 1 )  # We need to add integration points to this data frame of new data # We use the weighted mean correlation matrix computed from the IPD studies new_agd_int <- add_integration(new_agd_int,                                durnpso = distr(qgamma, mean = durnpso_mean, sd = durnpso_sd),                                prevsys = distr(qbern, prob = prevsys),                                bsa = distr(qlogitnorm, mean = bsa_mean, sd = bsa_sd),                                weight = distr(qgamma, mean = weight_mean, sd = weight_sd),                                psa = distr(qbern, prob = psa),                                cor = pso_net$int_cor,                                n_int = 1000)  # Predicted probabilities of achieving PASI 75 in this target population, given # a Normal(-1.75, 0.08^2) distribution on the baseline probit-probability of # response on Placebo (at the reference levels of the covariates), are given by (pso_pred_new <- predict(pso_fit,                          type = \"response\",                          newdata = new_agd_int,                          baseline = distr(qnorm, -1.75, 0.08))) #> ------------------------------------------------------------------ Study: New 1 ----  #>  #>                      mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> pred[New 1: PBO]     0.06 0.03 0.03 0.04 0.06 0.08  0.12     4937     3316    1 #> pred[New 1: ETN]     0.37 0.06 0.26 0.33 0.37 0.41  0.48     5463     3510    1 #> pred[New 1: IXE_Q2W] 0.90 0.03 0.84 0.88 0.90 0.92  0.94     5410     3468    1 #> pred[New 1: IXE_Q4W] 0.81 0.04 0.72 0.78 0.81 0.83  0.87     5447     3055    1 #> pred[New 1: SEC_150] 0.68 0.06 0.57 0.64 0.68 0.72  0.78     5551     3546    1 #> pred[New 1: SEC_300] 0.78 0.05 0.68 0.75 0.78 0.81  0.86     5822     3492    1 #>  plot(pso_pred_new, ref_line = c(0, 1))  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.nma_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print nma_data objects — print.nma_data","title":"Print nma_data objects — print.nma_data","text":"Print details networks stored nma_data objects, created set_ipd(), set_agd_arm(), set_agd_contrast(), combine_network().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.nma_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print nma_data objects — print.nma_data","text":"","code":"# S3 method for nma_data print(x, ..., n = 10)  # S3 method for mlnmr_data print(x, ..., n = 10)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.nma_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print nma_data objects — print.nma_data","text":"x nma_data object ... options (used) n number studies type print","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.nma_dic.html","id":null,"dir":"Reference","previous_headings":"","what":"Print DIC details — print.nma_dic","title":"Print DIC details — print.nma_dic","text":"Print details DIC model fit statistics, computed dic() function.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.nma_dic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print DIC details — print.nma_dic","text":"","code":"# S3 method for nma_dic print(x, digits = 1, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.nma_dic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print DIC details — print.nma_dic","text":"x object class nma_dic digits integer passed round() ... Ignored","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.nma_dic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print DIC details — print.nma_dic","text":"x returned invisibly.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.stan_nma.html","id":null,"dir":"Reference","previous_headings":"","what":"Print stan_nma objects — print.stan_nma","title":"Print stan_nma objects — print.stan_nma","text":"Print stan_nma objects","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.stan_nma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print stan_nma objects — print.stan_nma","text":"","code":"# S3 method for stan_nma print(x, ...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/print.stan_nma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print stan_nma objects — print.stan_nma","text":"x stan_nma object ... arguments passed print.stanfit()","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior distributions — priors","title":"Prior distributions — priors","text":"functions used specify prior distributions model parameters.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior distributions — priors","text":"","code":"normal(location = 0, scale)  half_normal(scale)  log_normal(location, scale)  cauchy(location = 0, scale)  half_cauchy(scale)  student_t(location = 0, scale, df)  half_student_t(scale, df)  exponential(scale = 1/rate, rate = 1/scale)  flat()"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior distributions — priors","text":"location Prior location. Typically prior mean (see details). scale Prior scale. Typically prior standard deviation (see details). df Prior degrees freedom. rate Prior rate.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior distributions — priors","text":"Object class nma_prior.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/priors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prior distributions — priors","text":"location scale parameters typically prior mean standard deviation, following exceptions: Cauchy distribution location prior median scale prior scale. log-Normal distribution, location scale prior mean standard deviation logarithm.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/priors.html","id":"compatibility-with-model-parameters","dir":"Reference","previous_headings":"","what":"Compatibility with model parameters","title":"Prior distributions — priors","text":"following table summarises prior distributions may used model parameters. Essentially, priors take non-negative values (e.g. half-Normal) may used non-negative parameters (heterogeneity SD/variance/precision, auxiliary parameter). real-valued prior distribution specified non-negative parameter, truncated 0 non-negative. flat() prior special case prior information added model, resulting implicit flat uniform prior distribution entire support parameter. improper prior parameter unbounded, generally advised. See Stan user's guide details.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/random_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Random effects structure — RE_cor","title":"Random effects structure — RE_cor","text":"Use RE_cor generate random effects correlation matrix, assumption common heterogeneity variance (.e. within-study correlations 0.5). Use which_RE return vector IDs RE deltas (0 means RE delta arm).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/random_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random effects structure — RE_cor","text":"","code":"RE_cor(study, trt, contrast, type = c(\"reftrt\", \"blshift\"))  which_RE(study, trt, contrast, type = c(\"reftrt\", \"blshift\"))"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/random_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random effects structure — RE_cor","text":"study vector study IDs (integer, character, factor) trt factor vector treatment codes (coercible ), first level indicating reference treatment contrast logical vector, length study trt, indicating whether corresponding data contrast rather arm format. type Character string, whether generate RE structure \"reference treatment\" parameterisation, \"baseline shift\" parameterisation.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/random_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random effects structure — RE_cor","text":"RE_cor(), correlation matrix dimension equal number random effects deltas (excluding set equal zero). which_RE(), integer vector IDs indexing rows columns correlation matrix returned RE_cor().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/random_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random effects structure — RE_cor","text":"","code":"RE_cor(smoking$studyn, smoking$trtn, contrast = rep(FALSE, nrow(smoking))) #> Coerced `trt` to factor. #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  1.0  0.5  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #>  [2,]  0.5  1.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #>  [3,]  0.0  0.0  1.0  0.5  0.5    0    0    0    0     0     0     0     0 #>  [4,]  0.0  0.0  0.5  1.0  0.5    0    0    0    0     0     0     0     0 #>  [5,]  0.0  0.0  0.5  0.5  1.0    0    0    0    0     0     0     0     0 #>  [6,]  0.0  0.0  0.0  0.0  0.0    1    0    0    0     0     0     0     0 #>  [7,]  0.0  0.0  0.0  0.0  0.0    0    1    0    0     0     0     0     0 #>  [8,]  0.0  0.0  0.0  0.0  0.0    0    0    1    0     0     0     0     0 #>  [9,]  0.0  0.0  0.0  0.0  0.0    0    0    0    1     0     0     0     0 #> [10,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     1     0     0     0 #> [11,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     1     0     0 #> [12,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     1     0 #> [13,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     1 #> [14,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [15,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [16,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [17,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [18,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [19,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [20,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [21,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [22,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [23,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [24,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [25,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [26,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [27,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [28,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [29,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [30,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #> [31,]  0.0  0.0  0.0  0.0  0.0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [2,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [3,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [4,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [5,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [6,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [7,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [8,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>  [9,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [10,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [11,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [12,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [13,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [14,]     1     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [15,]     0     1     0     0     0     0     0     0     0     0   0.0   0.0 #> [16,]     0     0     1     0     0     0     0     0     0     0   0.0   0.0 #> [17,]     0     0     0     1     0     0     0     0     0     0   0.0   0.0 #> [18,]     0     0     0     0     1     0     0     0     0     0   0.0   0.0 #> [19,]     0     0     0     0     0     1     0     0     0     0   0.0   0.0 #> [20,]     0     0     0     0     0     0     1     0     0     0   0.0   0.0 #> [21,]     0     0     0     0     0     0     0     1     0     0   0.0   0.0 #> [22,]     0     0     0     0     0     0     0     0     1     0   0.0   0.0 #> [23,]     0     0     0     0     0     0     0     0     0     1   0.0   0.0 #> [24,]     0     0     0     0     0     0     0     0     0     0   1.0   0.5 #> [25,]     0     0     0     0     0     0     0     0     0     0   0.5   1.0 #> [26,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [27,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [28,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [29,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [30,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #> [31,]     0     0     0     0     0     0     0     0     0     0   0.0   0.0 #>       [,26] [,27] [,28] [,29] [,30] [,31] #>  [1,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [2,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [3,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [4,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [5,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [6,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [7,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [8,]   0.0   0.0   0.0   0.0   0.0   0.0 #>  [9,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [10,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [11,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [12,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [13,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [14,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [15,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [16,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [17,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [18,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [19,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [20,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [21,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [22,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [23,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [24,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [25,]   0.0   0.0   0.0   0.0   0.0   0.0 #> [26,]   1.0   0.5   0.0   0.0   0.0   0.0 #> [27,]   0.5   1.0   0.0   0.0   0.0   0.0 #> [28,]   0.0   0.0   1.0   0.5   0.0   0.0 #> [29,]   0.0   0.0   0.5   1.0   0.0   0.0 #> [30,]   0.0   0.0   0.0   0.0   1.0   0.5 #> [31,]   0.0   0.0   0.0   0.0   0.5   1.0 RE_cor(smoking$studyn, smoking$trtn, contrast = rep(FALSE, nrow(smoking)), type = \"blshift\") #> Coerced `trt` to factor. #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  1.0  0.5  0.0  0.0    0    0    0    0    0     0     0     0     0 #>  [2,]  0.5  1.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #>  [3,]  0.0  0.0  1.0  0.5    0    0    0    0    0     0     0     0     0 #>  [4,]  0.0  0.0  0.5  1.0    0    0    0    0    0     0     0     0     0 #>  [5,]  0.0  0.0  0.0  0.0    1    0    0    0    0     0     0     0     0 #>  [6,]  0.0  0.0  0.0  0.0    0    1    0    0    0     0     0     0     0 #>  [7,]  0.0  0.0  0.0  0.0    0    0    1    0    0     0     0     0     0 #>  [8,]  0.0  0.0  0.0  0.0    0    0    0    1    0     0     0     0     0 #>  [9,]  0.0  0.0  0.0  0.0    0    0    0    0    1     0     0     0     0 #> [10,]  0.0  0.0  0.0  0.0    0    0    0    0    0     1     0     0     0 #> [11,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     1     0     0 #> [12,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     1     0 #> [13,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     1 #> [14,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [15,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [16,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [17,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [18,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [19,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [20,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [21,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [22,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [23,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [24,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [25,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #> [26,]  0.0  0.0  0.0  0.0    0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [3,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [4,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [5,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [11,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [12,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [13,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [14,]     1     0     0     0     0     0     0     0     0     0     0     0 #> [15,]     0     1     0     0     0     0     0     0     0     0     0     0 #> [16,]     0     0     1     0     0     0     0     0     0     0     0     0 #> [17,]     0     0     0     1     0     0     0     0     0     0     0     0 #> [18,]     0     0     0     0     1     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     1     0     0     0     0     0     0 #> [20,]     0     0     0     0     0     0     1     0     0     0     0     0 #> [21,]     0     0     0     0     0     0     0     1     0     0     0     0 #> [22,]     0     0     0     0     0     0     0     0     1     0     0     0 #> [23,]     0     0     0     0     0     0     0     0     0     1     0     0 #> [24,]     0     0     0     0     0     0     0     0     0     0     1     0 #> [25,]     0     0     0     0     0     0     0     0     0     0     0     1 #> [26,]     0     0     0     0     0     0     0     0     0     0     0     0 #>       [,26] #>  [1,]     0 #>  [2,]     0 #>  [3,]     0 #>  [4,]     0 #>  [5,]     0 #>  [6,]     0 #>  [7,]     0 #>  [8,]     0 #>  [9,]     0 #> [10,]     0 #> [11,]     0 #> [12,]     0 #> [13,]     0 #> [14,]     0 #> [15,]     0 #> [16,]     0 #> [17,]     0 #> [18,]     0 #> [19,]     0 #> [20,]     0 #> [21,]     0 #> [22,]     0 #> [23,]     0 #> [24,]     0 #> [25,]     0 #> [26,]     1 which_RE(smoking$studyn, smoking$trtn, contrast = rep(FALSE, nrow(smoking))) #> Coerced `trt` to factor. #>  [1]  0  1  2  3  4  5  0  6  0  7  0  8  0  9  0 10  0 11  0 12  0 13  0 14  0 #> [26] 15  0 16  0 17  0 18  0 19  0 20  0 21  0 22  0 23 24 25 26 27 28 29 30 31 which_RE(smoking$studyn, smoking$trtn, contrast = rep(FALSE, nrow(smoking)), type = \"blshift\") #> Coerced `trt` to factor. #>  [1]  0  1  2  0  3  4  0  5  0  6  0  7  0  8  0  9  0 10  0 11  0 12  0 13  0 #> [26] 14  0 15  0 16  0 17  0 18  0 19  0 20  0 21  0 22  0 23  0 24  0 25  0 26"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/relative_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative treatment effects — relative_effects","title":"Relative treatment effects — relative_effects","text":"Generate (population-average) relative treatment effects. ML-NMR meta-regression model fitted, specific study population.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/relative_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative treatment effects — relative_effects","text":"","code":"relative_effects(   x,   newdata = NULL,   study = NULL,   all_contrasts = FALSE,   trt_ref = NULL,   probs = c(0.025, 0.25, 0.5, 0.75, 0.975),   summary = TRUE )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/relative_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative treatment effects — relative_effects","text":"x stan_nma object created nma() newdata used regression model fitted. data frame study details, one row per study, giving covariate values produce relative effects. Column names must match variables regression model. NULL, relative effects produced studies network. study Column newdata specifies study names, otherwise studies labelled row number. all_contrasts Logical, generate estimates contrasts (TRUE), just \"basic\" contrasts network reference treatment (FALSE)? Default FALSE. trt_ref Reference treatment construct relative effects , all_contrasts = FALSE. default, relative effects network reference treatment. Coerced character string. probs Numeric vector quantiles interest present computed summary, default c(0.025, 0.25, 0.5, 0.75, 0.975) summary Logical, calculate posterior summaries? Default TRUE.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/relative_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative treatment effects — relative_effects","text":"nma_summary object summary = TRUE, otherwise list containing 3D MCMC array samples (regression models) data frame study information.","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/relative_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative treatment effects — relative_effects","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Produce relative effects smk_releff_RE <- relative_effects(smk_fit_RE) smk_releff_RE #>                           mean   sd  2.5%  25%  50%  75% 97.5% Bulk_ESS #> d[Group counselling]      1.10 0.44  0.27 0.80 1.08 1.37  2.04     1755 #> d[Individual counselling] 0.84 0.23  0.39 0.69 0.83 0.99  1.32     1162 #> d[Self-help]              0.49 0.42 -0.32 0.21 0.49 0.75  1.37     1739 #>                           Tail_ESS Rhat #> d[Group counselling]          2056    1 #> d[Individual counselling]     1855    1 #> d[Self-help]                  2233    1 plot(smk_releff_RE, ref_line = 0)   # Relative effects for all pairwise comparisons relative_effects(smk_fit_RE, all_contrasts = TRUE) #>                                                  mean   sd  2.5%   25%   50% #> d[Group counselling vs. No intervention]         1.10 0.44  0.27  0.80  1.08 #> d[Individual counselling vs. No intervention]    0.84 0.23  0.39  0.69  0.83 #> d[Self-help vs. No intervention]                 0.49 0.42 -0.32  0.21  0.49 #> d[Individual counselling vs. Group counselling] -0.25 0.42 -1.11 -0.52 -0.26 #> d[Self-help vs. Group counselling]              -0.61 0.50 -1.60 -0.93 -0.62 #> d[Self-help vs. Individual counselling]         -0.36 0.43 -1.20 -0.63 -0.36 #>                                                   75% 97.5% Bulk_ESS Tail_ESS #> d[Group counselling vs. No intervention]         1.37  2.04     1755     2056 #> d[Individual counselling vs. No intervention]    0.99  1.32     1162     1855 #> d[Self-help vs. No intervention]                 0.75  1.37     1739     2233 #> d[Individual counselling vs. Group counselling]  0.02  0.57     2468     2857 #> d[Self-help vs. Group counselling]              -0.28  0.35     3028     2579 #> d[Self-help vs. Individual counselling]         -0.09  0.50     2231     2377 #>                                                 Rhat #> d[Group counselling vs. No intervention]           1 #> d[Individual counselling vs. No intervention]      1 #> d[Self-help vs. No intervention]                   1 #> d[Individual counselling vs. Group counselling]    1 #> d[Self-help vs. Group counselling]                 1 #> d[Self-help vs. Individual counselling]            1  # Relative effects against a different reference treatment relative_effects(smk_fit_RE, trt_ref = \"Self-help\") #>                            mean   sd  2.5%   25%   50%   75% 97.5% Bulk_ESS #> d[No intervention]        -0.49 0.42 -1.37 -0.75 -0.49 -0.21  0.32     1739 #> d[Group counselling]       0.61 0.50 -0.35  0.28  0.62  0.93  1.60     3028 #> d[Individual counselling]  0.36 0.43 -0.50  0.09  0.36  0.63  1.20     2231 #>                           Tail_ESS Rhat #> d[No intervention]            2233    1 #> d[Group counselling]          2579    1 #> d[Individual counselling]     2377    1  # Transforming to odds ratios # We work with the array of relative effects samples LOR_array <- as.array(smk_releff_RE) OR_array <- exp(LOR_array)  # mcmc_array objects can be summarised to produce a nma_summary object smk_OR_RE <- summary(OR_array)  # This can then be printed or plotted smk_OR_RE #>                           mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> d[Group counselling]      3.32 1.68 1.31 2.24 2.95 3.92  7.66     1755     2056 #> d[Individual counselling] 2.39 0.60 1.48 2.00 2.30 2.68  3.76     1162     1855 #> d[Self-help]              1.79 0.85 0.72 1.23 1.63 2.12  3.94     1739     2233 #>                           Rhat #> d[Group counselling]         1 #> d[Individual counselling]    1 #> d[Self-help]                 1 plot(smk_OR_RE, ref_line = 1)  # }  ## Plaque psoriasis ML-NMR # \\donttest{ # Run plaque psoriasis ML-NMR example if not already available if (!exists(\"pso_fit\")) example(\"example_pso_mlnmr\", run.donttest = TRUE) # } # \\donttest{ # Produce population-adjusted relative effects for all study populations in # the network pso_releff <- relative_effects(pso_fit) pso_releff #> ---------------------------------------------------------------- Study: FIXTURE ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.65    0.64 0.34   8.32 0.15 #>  #>                     mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[FIXTURE: ETN]     1.66 0.09 1.48 1.60 1.66 1.72  1.84     3765     2926    1 #> d[FIXTURE: IXE_Q2W] 3.03 0.10 2.83 2.96 3.03 3.10  3.23     4328     3159    1 #> d[FIXTURE: IXE_Q4W] 2.62 0.09 2.44 2.55 2.62 2.68  2.80     4737     3509    1 #> d[FIXTURE: SEC_150] 2.22 0.12 2.00 2.14 2.22 2.30  2.46     4404     3443    1 #> d[FIXTURE: SEC_300] 2.53 0.12 2.30 2.44 2.52 2.61  2.77     4782     3092    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-1 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>        2    0.73 0.28   9.24 0.28 #>  #>                       mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> d[UNCOVER-1: ETN]     1.50 0.09 1.34 1.44 1.51 1.56  1.67     4983     3371 #> d[UNCOVER-1: IXE_Q2W] 2.92 0.09 2.75 2.86 2.92 2.98  3.10     4641     3016 #> d[UNCOVER-1: IXE_Q4W] 2.51 0.08 2.35 2.45 2.51 2.56  2.67     5281     3177 #> d[UNCOVER-1: SEC_150] 2.11 0.12 1.88 2.03 2.11 2.19  2.35     5457     3307 #> d[UNCOVER-1: SEC_300] 2.42 0.12 2.17 2.34 2.42 2.50  2.67     5968     2962 #>                       Rhat #> d[UNCOVER-1: ETN]        1 #> d[UNCOVER-1: IXE_Q2W]    1 #> d[UNCOVER-1: IXE_Q4W]    1 #> d[UNCOVER-1: SEC_150]    1 #> d[UNCOVER-1: SEC_300]    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-2 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight  psa #>     1.87    0.64 0.27   9.17 0.24 #>  #>                       mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> d[UNCOVER-2: ETN]     1.51 0.08 1.35 1.45 1.51 1.56  1.67     5189     3388 #> d[UNCOVER-2: IXE_Q2W] 2.92 0.09 2.76 2.86 2.92 2.98  3.09     4874     3338 #> d[UNCOVER-2: IXE_Q4W] 2.51 0.08 2.35 2.45 2.51 2.56  2.66     5525     3076 #> d[UNCOVER-2: SEC_150] 2.11 0.12 1.89 2.03 2.11 2.19  2.35     5663     3257 #> d[UNCOVER-2: SEC_300] 2.42 0.12 2.18 2.34 2.42 2.50  2.66     6202     3197 #>                       Rhat #> d[UNCOVER-2: ETN]        1 #> d[UNCOVER-2: IXE_Q2W]    1 #> d[UNCOVER-2: IXE_Q4W]    1 #> d[UNCOVER-2: SEC_150]    1 #> d[UNCOVER-2: SEC_300]    1 #>  #> -------------------------------------------------------------- Study: UNCOVER-3 ----  #>  #> Covariate values: #>  durnpso prevsys  bsa weight psa #>     1.78    0.59 0.28   9.01 0.2 #>  #>                       mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS #> d[UNCOVER-3: ETN]     1.53 0.08 1.37 1.47 1.53 1.58  1.69     4923     2914 #> d[UNCOVER-3: IXE_Q2W] 2.94 0.09 2.77 2.88 2.94 3.00  3.11     4894     3480 #> d[UNCOVER-3: IXE_Q4W] 2.53 0.08 2.37 2.47 2.53 2.58  2.68     5445     3575 #> d[UNCOVER-3: SEC_150] 2.13 0.12 1.91 2.05 2.13 2.21  2.36     5479     3593 #> d[UNCOVER-3: SEC_300] 2.44 0.12 2.20 2.36 2.44 2.52  2.68     6010     3366 #>                       Rhat #> d[UNCOVER-3: ETN]        1 #> d[UNCOVER-3: IXE_Q2W]    1 #> d[UNCOVER-3: IXE_Q4W]    1 #> d[UNCOVER-3: SEC_150]    1 #> d[UNCOVER-3: SEC_300]    1 #>  plot(pso_releff, ref_line = 0)   # Produce population-adjusted relative effects for a different target # population new_agd_means <- data.frame(   bsa = 0.6,   prevsys = 0.1,   psa = 0.2,   weight = 10,   durnpso = 3)  relative_effects(pso_fit, newdata = new_agd_means) #> ------------------------------------------------------------------ Study: New 1 ----  #>  #> Covariate values: #>  durnpso prevsys bsa weight psa #>        3     0.1 0.6     10 0.2 #>  #>                   mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> d[New 1: ETN]     1.25 0.23 0.82 1.10 1.25 1.41  1.71     5418     3057    1 #> d[New 1: IXE_Q2W] 2.89 0.22 2.45 2.74 2.88 3.04  3.34     6339     3179    1 #> d[New 1: IXE_Q4W] 2.47 0.22 2.06 2.32 2.47 2.62  2.90     6436     3224    1 #> d[New 1: SEC_150] 2.08 0.23 1.65 1.92 2.08 2.23  2.54     5682     2846    1 #> d[New 1: SEC_300] 2.39 0.23 1.94 2.23 2.38 2.54  2.85     6116     2921    1 #>  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up arm-based aggregate data — set_agd_arm","title":"Set up arm-based aggregate data — set_agd_arm","text":"Set network containing arm-based aggregate data (AgD), event counts mean outcomes arm. Multiple data sources may combined created using combine_network().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up arm-based aggregate data — set_agd_arm","text":"","code":"set_agd_arm(   data,   study,   trt,   y = NULL,   se = NULL,   r = NULL,   n = NULL,   E = NULL,   sample_size = NULL,   trt_ref = NULL,   trt_class = NULL )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up arm-based aggregate data — set_agd_arm","text":"data data frame study column data specifying studies, coded using integers, strings, factors trt column data specifying treatments, coded using integers, strings, factors y column data specifying continuous outcome se column data specifying standard error continuous outcome r column data specifying binary Binomial outcome count n column data specifying Binomial outcome numerator E column data specifying total time risk Poisson outcomes sample_size column data giving sample size arm. Optional, see details. trt_ref reference treatment network, single integer, string, factor. specified, reasonable well-connected default chosen (see details). trt_class column data specifying treatment classes, coded using integers, strings, factors. default, classes specified.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up arm-based aggregate data — set_agd_arm","text":"object class nma_data","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_arm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up arm-based aggregate data — set_agd_arm","text":"default, trt_ref = NULL network reference treatment chosen attempts maximise computational efficiency stability. alternative reference treatment chosen model runs slowly low effective sample size (ESS) may cause - try letting default reference treatment used instead. Regardless treatment used network reference model fitting stage, results can transformed afterwards: see trt_ref argument relative_effects() predict.stan_nma(). sample_size argument optional, specified: Enables automatic centering predictors (center = TRUE) nma() regression model given network combining IPD AgD Enables production study-specific relative effects, rank probabilities, etc. studies network regression model given Nodes plot.nma_data() may weighted sample size Binomial outcome specified sample_size omitted, n used sample size default. Multinomial outcome specified sample_size omitted, sample size determined automatically supplied counts default. arguments specifying columns data accept following: column name character string, e.g. study = \"studyc\" bare column name, e.g. study = studyc dplyr::mutate() style semantics inline variable transformations, e.g. study = paste(author, year)","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up arm-based aggregate data — set_agd_arm","text":"","code":"# Set up network of smoking cessation data head(smoking) #>   studyn trtn                   trtc  r   n #> 1      1    1        No intervention  9 140 #> 2      1    3 Individual counselling 23 140 #> 3      1    4      Group counselling 10 138 #> 4      2    2              Self-help 11  78 #> 5      2    3 Individual counselling 12  85 #> 6      2    4      Group counselling 29 170  smk_net <- set_agd_arm(smoking,                        study = studyn,                        trt = trtc,                        r = r,                        n = n,                        trt_ref = \"No intervention\")  # Print details smk_net #> A network with 24 AgD studies (arm-based). #>  #> ------------------------------------------------------- AgD studies (arm-based) ----  #>  Study Treatments                                                      #>  1     3: No intervention | Individual counselling | Group counselling #>  2     3: Self-help | Individual counselling | Group counselling       #>  3     2: No intervention | Individual counselling                     #>  4     2: No intervention | Individual counselling                     #>  5     2: No intervention | Individual counselling                     #>  6     2: No intervention | Individual counselling                     #>  7     2: No intervention | Individual counselling                     #>  8     2: No intervention | Individual counselling                     #>  9     2: No intervention | Individual counselling                     #>  10    2: No intervention | Self-help                                  #>  ... plus 14 more studies #>  #>  Outcome type: count #> ------------------------------------------------------------------------------------ #> Total number of treatments: 4 #> Total number of studies: 24 #> Reference treatment is: No intervention #> Network is connected   # Plot network plot(smk_net)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up contrast-based aggregate data — set_agd_contrast","title":"Set up contrast-based aggregate data — set_agd_contrast","text":"Set network containing contrast-based aggregate data (AgD), .e. summaries relative effects treatments log Odds Ratios. Multiple data sources may combined created using combine_network().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up contrast-based aggregate data — set_agd_contrast","text":"","code":"set_agd_contrast(   data,   study,   trt,   y = NULL,   se = NULL,   sample_size = NULL,   trt_ref = NULL,   trt_class = NULL )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up contrast-based aggregate data — set_agd_contrast","text":"data data frame study column data specifying studies, coded using integers, strings, factors trt column data specifying treatments, coded using integers, strings, factors y column data specifying continuous outcome se column data specifying standard error continuous outcome sample_size column data giving sample size arm. Optional, see details. trt_ref reference treatment network, single integer, string, factor. specified, reasonable well-connected default chosen (see details). trt_class column data specifying treatment classes, coded using integers, strings, factors. default, classes specified.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up contrast-based aggregate data — set_agd_contrast","text":"object class nma_data","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_contrast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up contrast-based aggregate data — set_agd_contrast","text":"study single reference/baseline treatment, relative effects arm(s) given. reference arm, include data row continuous outcome y equal NA. study three arms (two relative effects), set standard error se reference arm data row equal standard error mean outcome reference arm (determines covariance relative effects, expressed differences mean outcomes arms). arguments specifying columns data accept following: column name character string, e.g. study = \"studyc\" bare column name, e.g. study = studyc dplyr::mutate() style semantics inline variable transformations, e.g. study = paste(author, year) default, trt_ref = NULL network reference treatment chosen attempts maximise computational efficiency stability. alternative reference treatment chosen model runs slowly low effective sample size (ESS) may cause - try letting default reference treatment used instead. Regardless treatment used network reference model fitting stage, results can transformed afterwards: see trt_ref argument relative_effects() predict.stan_nma(). sample_size argument optional, specified: Enables automatic centering predictors (center = TRUE) nma() regression model given network combining IPD AgD Enables production study-specific relative effects, rank probabilities, etc. studies network regression model given Nodes plot.nma_data() may weighted sample size","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_agd_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up contrast-based aggregate data — set_agd_contrast","text":"","code":"# Set up network of Parkinson's contrast data head(parkinsons) #>   studyn trtn     y    se   n  diff se_diff #> 1      1    1 -1.22 0.504  54    NA   0.504 #> 2      1    3 -1.53 0.439  95 -0.31   0.668 #> 3      2    1 -0.70 0.282 172    NA   0.282 #> 4      2    2 -2.40 0.258 173 -1.70   0.382 #> 5      3    1 -0.30 0.505  76    NA   0.505 #> 6      3    2 -2.60 0.510  71 -2.30   0.718  park_net <- set_agd_contrast(parkinsons,                              study = studyn,                              trt = trtn,                              y = diff,                              se = se_diff,                              sample_size = n)  # Print details park_net #> A network with 7 AgD studies (contrast-based). #>  #> -------------------------------------------------- AgD studies (contrast-based) ----  #>  Study Treatments   #>  1     2: 1 | 3     #>  2     2: 1 | 2     #>  3     3: 1 | 2 | 4 #>  4     2: 3 | 4     #>  5     2: 3 | 4     #>  6     2: 4 | 5     #>  7     2: 4 | 5     #>  #>  Outcome type: continuous #> ------------------------------------------------------------------------------------ #> Total number of treatments: 5 #> Total number of studies: 7 #> Reference treatment is: 4 #> Network is connected  # Plot network plot(park_net)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_ipd.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up individual patient data — set_ipd","title":"Set up individual patient data — set_ipd","text":"Set network containing individual patient data (IPD). Multiple data sources may combined created using combine_network().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_ipd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up individual patient data — set_ipd","text":"","code":"set_ipd(   data,   study,   trt,   y = NULL,   r = NULL,   E = NULL,   trt_ref = NULL,   trt_class = NULL )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_ipd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up individual patient data — set_ipd","text":"data data frame study column data specifying studies, coded using integers, strings, factors trt column data specifying treatments, coded using integers, strings, factors y column data specifying continuous outcome r column data specifying binary outcome Poisson outcome count E column data specifying total time risk Poisson outcomes trt_ref reference treatment network, single integer, string, factor. specified, reasonable well-connected default chosen (see details). trt_class column data specifying treatment classes, coded using integers, strings, factors. default, classes specified.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_ipd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up individual patient data — set_ipd","text":"object class nma_data","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_ipd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up individual patient data — set_ipd","text":"default, trt_ref = NULL network reference treatment chosen attempts maximise computational efficiency stability. alternative reference treatment chosen model runs slowly low effective sample size (ESS) may cause - try letting default reference treatment used instead. Regardless treatment used network reference model fitting stage, results can transformed afterwards: see trt_ref argument relative_effects() predict.stan_nma(). arguments specifying columns data accept following: column name character string, e.g. study = \"studyc\" bare column name, e.g. study = studyc dplyr::mutate() style semantics inline variable transformations, e.g. study = paste(author, year)","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/set_ipd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up individual patient data — set_ipd","text":"","code":"# Set up network of plaque psoriasis IPD head(plaque_psoriasis_ipd) #>   studyc      trtc_long    trtc trtn pasi75 pasi90 pasi100 age  bmi pasi_w0 #> 1  IXORA Ixekizumab Q2W IXE_Q2W    2      1      1       1  62 38.6    15.8 #> 2  IXORA Ixekizumab Q2W IXE_Q2W    2      1      1       0  38 23.2    28.2 #> 3  IXORA Ixekizumab Q2W IXE_Q2W    2      1      1       0  54 27.5    13.2 #> 4  IXORA Ixekizumab Q2W IXE_Q2W    2      1      1       1  44 24.6    41.0 #> 5  IXORA Ixekizumab Q2W IXE_Q2W    2      1      1       0  44 28.3    15.2 #> 6  IXORA Ixekizumab Q2W IXE_Q2W    2      1      1       1  57 23.6    30.4 #>    male bsa weight durnpso prevsys   psa #> 1 FALSE  13  111.2       8    TRUE  TRUE #> 2 FALSE  37   62.0       1    TRUE FALSE #> 3  TRUE  13   83.5      38    TRUE FALSE #> 4 FALSE  67   66.0       1    TRUE FALSE #> 5 FALSE  10   92.7      23    TRUE FALSE #> 6 FALSE  75   73.5      21    TRUE FALSE  pso_net <- set_ipd(plaque_psoriasis_ipd,                    study = studyc,                    trt = trtc,                    r = pasi75)  # Print network details pso_net #> A network with 4 IPD studies. #>  #> ------------------------------------------------------------------- IPD studies ----  #>  Study     Treatments                       #>  IXORA     2: IXE_Q2W | UST                 #>  UNCOVER-1 3: IXE_Q2W | IXE_Q4W | PBO       #>  UNCOVER-2 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  UNCOVER-3 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  #>  Outcome type: binary #> ------------------------------------------------------------------------------------ #> Total number of treatments: 5 #> Total number of studies: 4 #> Reference treatment is: IXE_Q2W #> Network is connected  # Plot network plot(pso_net)   # Setting a different reference treatment set_ipd(plaque_psoriasis_ipd,         study = studyc,         trt = trtc,         r = pasi75,         trt_ref = \"PBO\") #> A network with 4 IPD studies. #>  #> ------------------------------------------------------------------- IPD studies ----  #>  Study     Treatments                       #>  IXORA     2: IXE_Q2W | UST                 #>  UNCOVER-1 3: IXE_Q2W | IXE_Q4W | PBO       #>  UNCOVER-2 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  UNCOVER-3 4: ETN | IXE_Q2W | IXE_Q4W | PBO #>  #>  Outcome type: binary #> ------------------------------------------------------------------------------------ #> Total number of treatments: 5 #> Total number of studies: 4 #> Reference treatment is: PBO #> Network is connected"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/smoking.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoking cessation data — smoking","title":"Smoking cessation data — smoking","text":"Data frame containing results 24 trials 4 smoking cessation treatments (Hasselblad 1998; Dias et al. 2011) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/smoking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoking cessation data — smoking","text":"","code":"smoking"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/smoking.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Smoking cessation data — smoking","text":"data frame 50 rows 5 variables: studyn numeric study ID trtn numeric treatment code trtc treatment name r total number events n total number individuals","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/smoking.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Smoking cessation data — smoking","text":"Dias S, Welton NJ, Sutton AJ, Caldwell DM, Lu G, Ades AE (2011). “NICE DSU Technical Support Document 4: Inconsistency networks evidence based randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Hasselblad V (1998). “Meta-analysis Multitreatment Studies.” Medical Decision Making, 18(1), 37--43. doi: 10.1177/0272989x9801800110 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/stan_nma-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The stan_nma class — stan_nma-class","title":"The stan_nma class — stan_nma-class","text":"stan_nma stan_mlnmr classes contains results running model function nma().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/stan_nma-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The stan_nma class — stan_nma-class","text":"Objects class stan_nma stan_mlnmr following components: network network data model run (class nma_data stan_nma, class mlnmr_data stan_mlnmr) stanfit stanfit object returned calling sampling() model trt_effects Whether fixed random effects used (character string) consistency consistency/inconsistency model used (character string) regression regression model used (formula) class_interactions treatment classes regression model specified, model used interactions within class (common, exchangeable, independent) xbar named vector values used centering likelihood likelihood used (character string) link link function used (character string) priors list containing priors used (nma_prior objects) stan_mlnmr sub-class inherits stan_nma, differs class network object.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/statins.html","id":null,"dir":"Reference","previous_headings":"","what":"Statins for cholesterol lowering — statins","title":"Statins for cholesterol lowering — statins","text":"Data frame containing results 19 trials comparing statins placebo usual care (Dias et al. 2011) . number deaths (-cause mortality) recorded. studies aim primary prevention (patients previous heart disease), others aim secondary prevention (patients previous heart disease).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/statins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statins for cholesterol lowering — statins","text":"","code":"statins"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/statins.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Statins for cholesterol lowering — statins","text":"data frame 38 rows 7 variables: studyn numeric study ID studyc study name trtn numeric treatment code trtc treatment name prevention primary secondary prevention study r number deaths n sample size","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/statins.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Statins for cholesterol lowering — statins","text":"Dias S, Sutton AJ, Welton NJ, Ades AE (2011). “NICE DSU Technical Support Document 3: Heterogeneity: subgroups, meta-regression, bias bias-adjustment.” National Institute Health Care Excellence. http://nicedsu.org.uk/.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.nma_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of prior distributions — summary.nma_prior","title":"Summary of prior distributions — summary.nma_prior","text":"Print summary prior distribution details.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.nma_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of prior distributions — summary.nma_prior","text":"","code":"# S3 method for nma_prior summary(object, ..., probs = c(0.5, 0.95), digits = 2, trunc = NULL)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.nma_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of prior distributions — summary.nma_prior","text":"object Prior distribution nma_prior object ... Additional arguments, used probs Numeric vector probabilities calculate prior intervals digits Number digits display trunc Optional numeric vector length 2, giving truncation limits prior distribution. Useful real-valued prior assigned positive-valued parameter, trunc = c(0, Inf) give correct prior intervals. default, truncation used.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.nma_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of prior distributions — summary.nma_prior","text":"data frame returned invisibly, giving prior intervals","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.nma_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of prior distributions — summary.nma_prior","text":"","code":"summary(normal(location = 0, scale = 1)) #> A Normal prior distribution: location = 0, scale = 1. #> 50% of the prior density lies between -0.67 and 0.67. #> 95% of the prior density lies between -1.96 and 1.96. summary(half_normal(scale = 1)) #> A half-Normal prior distribution: location = 0, scale = 1. #> 50% of the prior density lies between 0 and 0.67. #> 95% of the prior density lies between 0 and 1.96. summary(log_normal(location = -3.93, scale = 1.51)) #> A log-Normal prior distribution: location = -3.93, scale = 1.51. #> 50% of the prior density lies between 0.01 and 0.05. #> 95% of the prior density lies between 0 and 0.38.  # Truncation limits may be set, for example to restrict a prior to positive values summary(normal(location = 0.5, scale = 1), trunc = c(0, Inf)) #> A Normal prior distribution: location = 0.5, scale = 1. #> 50% of the prior density lies between 0.45 and 1.44. #> 95% of the prior density lies between 0.05 and 2.61."},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.stan_nma.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior summaries from stan_nma objects — summary.stan_nma","title":"Posterior summaries from stan_nma objects — summary.stan_nma","text":"Posterior summaries model parameters stan_nma objects may produced using summary() method plotted plot() method. NOTE: produce relative effects, absolute predictions, posterior ranks, see relative_effects(), predict.stan_nma(), posterior_ranks(), posterior_rank_probs().","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.stan_nma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior summaries from stan_nma objects — summary.stan_nma","text":"","code":"# S3 method for stan_nma summary(object, ..., pars, include, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))  # S3 method for stan_nma plot(   x,   ...,   pars,   include,   stat = \"pointinterval\",   orientation = c(\"horizontal\", \"vertical\", \"y\", \"x\"),   ref_line = NA_real_ )"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.stan_nma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior summaries from stan_nma objects — summary.stan_nma","text":"... Additional arguments passed methods pars, include See rstan::extract() probs Numeric vector specifying quantiles interest, default c(0.025, 0.25, 0.5, 0.75, 0.975) x, object stan_nma object stat Character string specifying ggdist plot stat use, default \"pointinterval\" orientation Whether ggdist geom drawn horizontally (\"horizontal\") vertically (\"vertical\"), default \"horizontal\" ref_line Numeric vector positions reference lines, default reference lines drawn summary Logical, calculate posterior summaries? Default TRUE.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.stan_nma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior summaries from stan_nma objects — summary.stan_nma","text":"nma_summary object","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.stan_nma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior summaries from stan_nma objects — summary.stan_nma","text":"plot() method shortcut plot(summary(stan_nma)). details plotting options, see plot.nma_summary().","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/summary.stan_nma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior summaries from stan_nma objects — summary.stan_nma","text":"","code":"## Smoking cessation # \\donttest{ # Run smoking RE NMA example if not already available if (!exists(\"smk_fit_RE\")) example(\"example_smk_re\", run.donttest = TRUE) # } # \\donttest{ # Summary and plot of all model parameters summary(smk_fit_RE) #>                                    mean   sd  2.5%   25%   50%   75% 97.5% #> mu[1]                             -2.78 0.33 -3.48 -3.00 -2.77 -2.56 -2.17 #> mu[2]                             -2.57 0.78 -4.16 -3.07 -2.57 -2.04 -1.08 #> mu[3]                             -2.14 0.12 -2.38 -2.23 -2.14 -2.06 -1.92 #> mu[4]                             -4.05 0.59 -5.33 -4.42 -4.01 -3.64 -3.00 #> mu[5]                             -2.16 0.14 -2.44 -2.25 -2.16 -2.06 -1.89 #> mu[6]                             -3.44 0.73 -5.03 -3.91 -3.37 -2.91 -2.18 #> mu[7]                             -3.02 0.44 -3.96 -3.30 -3.01 -2.72 -2.23 #> mu[8]                             -2.69 0.61 -4.01 -3.06 -2.65 -2.29 -1.63 #> mu[9]                             -1.83 0.41 -2.69 -2.09 -1.81 -1.55 -1.07 #> mu[10]                            -2.08 0.12 -2.32 -2.16 -2.08 -2.00 -1.86 #> mu[11]                            -3.63 0.24 -4.12 -3.78 -3.62 -3.46 -3.19 #> mu[12]                            -2.22 0.13 -2.48 -2.31 -2.22 -2.13 -1.96 #> mu[13]                            -2.68 0.44 -3.61 -2.96 -2.65 -2.37 -1.88 #> mu[14]                            -2.41 0.23 -2.87 -2.57 -2.41 -2.26 -1.98 #> mu[15]                            -2.72 0.77 -4.43 -3.17 -2.66 -2.18 -1.41 #> mu[16]                            -2.62 0.35 -3.34 -2.85 -2.61 -2.37 -1.97 #> mu[17]                            -2.37 0.11 -2.60 -2.45 -2.37 -2.30 -2.16 #> mu[18]                            -2.57 0.27 -3.11 -2.74 -2.56 -2.38 -2.08 #> mu[19]                            -1.90 0.12 -2.14 -1.98 -1.90 -1.82 -1.66 #> mu[20]                            -2.80 0.13 -3.06 -2.89 -2.80 -2.71 -2.56 #> mu[21]                            -1.11 0.83 -2.75 -1.61 -1.11 -0.59  0.55 #> mu[22]                            -2.39 0.87 -4.16 -2.94 -2.36 -1.83 -0.73 #> mu[23]                            -2.32 0.79 -3.86 -2.83 -2.30 -1.81 -0.76 #> mu[24]                            -2.80 0.87 -4.54 -3.36 -2.80 -2.26 -1.02 #> d[Group counselling]               1.10 0.44  0.27  0.80  1.08  1.37  2.04 #> d[Individual counselling]          0.84 0.23  0.39  0.69  0.83  0.99  1.32 #> d[Self-help]                       0.49 0.42 -0.32  0.21  0.49  0.75  1.37 #> tau                                0.84 0.19  0.54  0.71  0.82  0.95  1.29 #> delta[1: Individual counselling]   1.07 0.38  0.34  0.82  1.07  1.32  1.85 #> delta[1: Group counselling]        0.37 0.42 -0.44  0.09  0.38  0.66  1.20 #> delta[2: Self-help]                0.67 0.80 -0.92  0.13  0.66  1.18  2.28 #> delta[2: Individual counselling]   0.76 0.78 -0.76  0.24  0.76  1.26  2.29 #> delta[2: Group counselling]        0.99 0.79 -0.53  0.46  0.99  1.50  2.55 #> delta[3: Individual counselling]   2.16 0.14  1.89  2.07  2.16  2.26  2.44 #> delta[4: Individual counselling]   0.91 0.60 -0.23  0.51  0.89  1.28  2.15 #> delta[5: Individual counselling]   0.44 0.15  0.14  0.33  0.44  0.54  0.75 #> delta[6: Individual counselling]   1.73 0.73  0.44  1.23  1.68  2.19  3.26 #> delta[7: Individual counselling]   2.15 0.48  1.25  1.82  2.13  2.46  3.18 #> delta[8: Individual counselling]   1.65 0.62  0.55  1.23  1.60  2.00  2.97 #> delta[9: Individual counselling]   0.58 0.46 -0.29  0.28  0.56  0.87  1.51 #> delta[10: Self-help]               0.01 0.16 -0.31 -0.10  0.00  0.12  0.32 #> delta[11: Self-help]               0.41 0.31 -0.18  0.20  0.41  0.61  1.04 #> delta[12: Individual counselling]  0.41 0.17  0.08  0.30  0.41  0.52  0.74 #> delta[13: Individual counselling]  0.39 0.50 -0.56  0.06  0.39  0.71  1.40 #> delta[14: Individual counselling]  0.63 0.28  0.07  0.44  0.62  0.81  1.22 #> delta[15: Group counselling]       2.16 0.78  0.79  1.63  2.11  2.62  3.85 #> delta[16: Self-help]               0.65 0.40 -0.11  0.39  0.64  0.91  1.49 #> delta[17: Individual counselling]  0.55 0.14  0.27  0.45  0.55  0.65  0.83 #> delta[18: Individual counselling]  0.03 0.31 -0.55 -0.17  0.02  0.23  0.65 #> delta[19: Individual counselling] -0.19 0.17 -0.52 -0.30 -0.19 -0.08  0.14 #> delta[20: Individual counselling]  0.08 0.18 -0.29 -0.04  0.08  0.20  0.44 #> delta[21: Self-help]               0.68 0.83 -0.98  0.18  0.66  1.19  2.36 #> delta[21: Individual counselling]  0.63 0.82 -1.06  0.13  0.63  1.12  2.27 #> delta[22: Self-help]               0.30 0.86 -1.38 -0.26  0.28  0.85  2.03 #> delta[22: Group counselling]       1.26 0.87 -0.38  0.69  1.24  1.81  3.05 #> delta[23: Individual counselling]  0.68 0.78 -0.88  0.18  0.67  1.17  2.20 #> delta[23: Group counselling]       1.27 0.80 -0.28  0.75  1.26  1.77  2.88 #> delta[24: Individual counselling]  1.05 0.84 -0.64  0.52  1.06  1.55  2.76 #> delta[24: Group counselling]       0.88 0.87 -0.90  0.34  0.87  1.43  2.56 #>                                   Bulk_ESS Tail_ESS Rhat #> mu[1]                                 5189     2991 1.00 #> mu[2]                                 2277     2445 1.00 #> mu[3]                                 8614     2760 1.00 #> mu[4]                                 4517     2877 1.00 #> mu[5]                                 7216     2481 1.00 #> mu[6]                                 2931     2612 1.00 #> mu[7]                                 3401     2636 1.00 #> mu[8]                                 3924     2722 1.00 #> mu[9]                                 4482     2865 1.00 #> mu[10]                                8412     3177 1.00 #> mu[11]                                6328     2475 1.00 #> mu[12]                                6686     2847 1.00 #> mu[13]                                4280     3141 1.00 #> mu[14]                                5472     3074 1.00 #> mu[15]                                3137     2210 1.00 #> mu[16]                                5329     3090 1.00 #> mu[17]                                8208     2963 1.01 #> mu[18]                                5508     2968 1.00 #> mu[19]                                7568     2881 1.00 #> mu[20]                                7760     2584 1.00 #> mu[21]                                2861     2911 1.00 #> mu[22]                                2561     2187 1.00 #> mu[23]                                3228     2735 1.00 #> mu[24]                                2794     2672 1.00 #> d[Group counselling]                  1755     2056 1.00 #> d[Individual counselling]             1162     1855 1.00 #> d[Self-help]                          1739     2233 1.00 #> tau                                   1255     1655 1.00 #> delta[1: Individual counselling]      5411     2638 1.00 #> delta[1: Group counselling]           4538     3133 1.00 #> delta[2: Self-help]                   2560     2936 1.00 #> delta[2: Individual counselling]      2379     2493 1.00 #> delta[2: Group counselling]           2305     2397 1.00 #> delta[3: Individual counselling]      7210     3380 1.00 #> delta[4: Individual counselling]      4233     3138 1.00 #> delta[5: Individual counselling]      6619     2747 1.00 #> delta[6: Individual counselling]      3254     2804 1.00 #> delta[7: Individual counselling]      3286     2789 1.00 #> delta[8: Individual counselling]      3635     2741 1.00 #> delta[9: Individual counselling]      4287     2784 1.00 #> delta[10: Self-help]                  5313     3520 1.00 #> delta[11: Self-help]                  6022     3414 1.00 #> delta[12: Individual counselling]     5523     3636 1.00 #> delta[13: Individual counselling]     4027     3277 1.00 #> delta[14: Individual counselling]     4855     3433 1.00 #> delta[15: Group counselling]          2757     2180 1.00 #> delta[16: Self-help]                  5339     3296 1.00 #> delta[17: Individual counselling]     6556     3514 1.00 #> delta[18: Individual counselling]     5104     2820 1.00 #> delta[19: Individual counselling]     6003     3305 1.00 #> delta[20: Individual counselling]     5920     3485 1.00 #> delta[21: Self-help]                  2866     2926 1.00 #> delta[21: Individual counselling]     2838     2637 1.00 #> delta[22: Self-help]                  2692     2324 1.00 #> delta[22: Group counselling]          2423     2236 1.00 #> delta[23: Individual counselling]     3185     2575 1.00 #> delta[23: Group counselling]          3021     2592 1.00 #> delta[24: Individual counselling]     2863     2572 1.00 #> delta[24: Group counselling]          2843     2481 1.00 plot(smk_fit_RE)   # Summary and plot of heterogeneity tau only summary(smk_fit_RE, pars = \"tau\") #>     mean   sd 2.5%  25%  50%  75% 97.5% Bulk_ESS Tail_ESS Rhat #> tau 0.84 0.19 0.54 0.71 0.82 0.95  1.29     1255     1655    1 plot(smk_fit_RE, pars = \"tau\")   # Customising plot output plot(smk_fit_RE,      pars = c(\"d\", \"tau\"),      stat = \"halfeye\",      ref_line = 0)  # }"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/theme_multinma.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot theme for multinma plots — theme_multinma","title":"Plot theme for multinma plots — theme_multinma","text":"simple ggplot2 theme plots multinma package.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/theme_multinma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot theme for multinma plots — theme_multinma","text":"","code":"theme_multinma(...)"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/theme_multinma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot theme for multinma plots — theme_multinma","text":"... Arguments passed ggplot2::theme_light()","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/theme_multinma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot theme for multinma plots — theme_multinma","text":"ggplot2 theme","code":""},{"path":[]},{"path":"https://dmphillippo.github.io/multinma/dev/reference/theme_multinma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot theme for multinma plots — theme_multinma","text":"","code":"library(ggplot2) theme_set(theme_multinma())"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/thrombolytics.html","id":null,"dir":"Reference","previous_headings":"","what":"Thrombolytic treatments data — thrombolytics","title":"Thrombolytic treatments data — thrombolytics","text":"Data frame containing results 50 trials 8 thrombolytic drugs (streptokinase, SK; alteplase, t-PA; accelerated alteplase, Acc t-PA; streptokinase plus alteplase, SK+tPA; reteplase, r-PA; tenocteplase, TNK; urokinase, UK; anistreptilase, ASPAC) plus per-cutaneous transluminal coronary angioplasty (PTCA) (Boland et al. 2003; Lu Ades 2006; Dias et al. 2011) . number deaths 30 35 days following acute myocardial infarction recorded.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/thrombolytics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thrombolytic treatments data — thrombolytics","text":"","code":"thrombolytics"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/thrombolytics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thrombolytic treatments data — thrombolytics","text":"data frame 50 rows 5 variables: studyn numeric study ID trtn numeric treatment code trtc treatment name r total number events n total number individuals","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/thrombolytics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Thrombolytic treatments data — thrombolytics","text":"Boland , Dundar Y, Bagust , Haycox , Hill R, Mota RM, Walley T, Dickson R (2003). “Early thrombolysis treatment acute myocardial infarction: systematic review economic evaluation.” Health Technology Assessment, 7(15). doi: 10.3310/hta7150 . Dias S, Welton NJ, Sutton AJ, Caldwell DM, Lu G, Ades AE (2011). “NICE DSU Technical Support Document 4: Inconsistency networks evidence based randomised controlled trials.” National Institute Health Care Excellence. http://nicedsu.org.uk/. Lu GB, Ades AE (2006). “Assessing evidence inconsistency mixed treatment comparisons.” Journal American Statistical Association, 101(474), 447--459. doi: 10.1198/016214505000001302 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/transfusion.html","id":null,"dir":"Reference","previous_headings":"","what":"Granulocyte transfusion in patients with neutropenia or neutrophil\ndysfunction — transfusion","title":"Granulocyte transfusion in patients with neutropenia or neutrophil\ndysfunction — transfusion","text":"Data frame containing number deaths 6 trials comparing transfusion granulocytes (white blood cells) control (Stanworth et al. 2005) . Previously used demonstrate informative prior distributions heterogeneity variance Turner et al. (2012) .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/transfusion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Granulocyte transfusion in patients with neutropenia or neutrophil\ndysfunction — transfusion","text":"","code":"transfusion"},{"path":"https://dmphillippo.github.io/multinma/dev/reference/transfusion.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Granulocyte transfusion in patients with neutropenia or neutrophil\ndysfunction — transfusion","text":"data frame 12 rows 4 variables: studyc study name trtc treatment name r total number deaths n total number individuals","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/reference/transfusion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Granulocyte transfusion in patients with neutropenia or neutrophil\ndysfunction — transfusion","text":"Stanworth S, Massey E, Hyde C, Brunskill SJ, Navarette C, Lucas G, Marks D, Paulus U (2005). “Granulocyte transfusions treating infections patients neutropenia neutrophil dysfunction.” Cochrane Database Systematic Reviews. ISSN 1465-1858, doi: 10.1002/14651858.CD005339 . Turner RM, Davey J, Clarke MJ, Thompson SG, Higgins JPT (2012). “Predicting extent heterogeneity meta-analysis, using empirical data Cochrane Database Systematic Reviews.” International Journal Epidemiology, 41(3), 818--827. doi: 10.1093/ije/dys041 .","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-0309000","dir":"Changelog","previous_headings":"","what":"multinma 0.3.0.9000","title":"multinma 0.3.0.9000","text":"Feature: correlation matrix generating integration points add_integration() ML-NMR models now adjusted underlying Gaussian copula, output correlations integration points better match requested input correlations. new argument cor_adjust controls behaviour, options \"spearman\", \"pearson\", \"none\". Although correlations typically little impact results, strict reproducibility old behaviour version 0.3.0 available cor_adjust = \"legacy\". Improvement: Update package website Bootstrap 5 release pkgdown 2.0.0 Fix: Model fitting now robust non-default settings options(\"contrasts\"). Fix: plot.nma_data() longer gives ggplot deprecation warning (PR #6). Fix: Bug predict.stan_nma() single covariate newdata data.frame (PR #7).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-030","dir":"Changelog","previous_headings":"","what":"multinma 0.3.0","title":"multinma 0.3.0","text":"CRAN release: 2021-03-18 Feature: Added baseline_type baseline_level arguments predict.stan_nma(), allow baseline distributions specified response linear predictor scale, individual aggregate level. Feature: baseline argument predict.stan_nma() can now accept (named) list baseline distributions newdata contains multiple studies. Improvement: Misspecified newdata arguments functions like relative_effects() predict.stan_nma() now give informative error messages. Fix: Constructing models contrast-based data previously gave errors scenarios (ML-NMR models, UME models, cases AgD meta-regression models). Fix: Ensure CRAN additional checks --run-donttest run correctly.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-021","dir":"Changelog","previous_headings":"","what":"multinma 0.2.1","title":"multinma 0.2.1","text":"CRAN release: 2021-01-09 Fix: Producing relative effect estimates contrasts using relative_effects() all_contrasts = TRUE longer gives error regression models. Fix: Specifying covariate correlation matrix cor add_integration() required one covariate present. Improvement: Added detailed documentation likelihoods link functions available data type (likelihood link arguments nma()).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-020","dir":"Changelog","previous_headings":"","what":"multinma 0.2.0","title":"multinma 0.2.0","text":"CRAN release: 2020-12-04 Feature: set_*() functions now accept dplyr::mutate() style semantics, allowing inline variable transformations. Feature: Added ordered multinomial models, helper function multi() specifying outcomes. Accompanied new data set hta_psoriasis vignette. Feature: Implicit flat priors can now specified, parameter, using flat(). Improvement: .array.stan_nma() now much efficient, meaning many post-estimation functions also now much efficient. Improvement: plot.nma_dic() now efficient, particularly large numbers data points. Improvement: layering points producing “dev-dev” plots using plot.nma_dic() multiple data types reversed improved clarity (now AgD top IPD). Improvement: Aggregate-level predictions predict() ML-NMR / IPD regression models now calculated much memory-efficient manner. Improvement: Added overview examples given vignettes. Improvement: Network plots weight_edges = TRUE longer produce legends non-integer values number studies. Fix: plot.nma_dic() longer gives error attempting specify .width argument producing “dev-dev” plots.","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-013","dir":"Changelog","previous_headings":"","what":"multinma 0.1.3","title":"multinma 0.1.3","text":"CRAN release: 2020-06-30 Format DESCRIPTION CRAN requirements","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-012","dir":"Changelog","previous_headings":"","what":"multinma 0.1.2","title":"multinma 0.1.2","text":"Wrapped long-running examples \\donttest{} instead \\dontrun{}","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-011","dir":"Changelog","previous_headings":"","what":"multinma 0.1.1","title":"multinma 0.1.1","text":"Reduced size vignettes Added methods paper reference DESCRIPTION Added zenodo DOI","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-010","dir":"Changelog","previous_headings":"","what":"multinma 0.1.0","title":"multinma 0.1.0","text":"Feature: Network plots, using plot() method nma_data objects. Feature: .igraph(), as_tbl_graph() methods nma_data objects. Feature: Produce relative effect estimates relative_effects(), posterior ranks posterior_ranks(), posterior rank probabilities posterior_rank_probs(). study-specific regression model given. Feature: Produce predictions absolute effects predict() method stan_nma objects. Feature: Plots relative effects, ranks, predictions, parameter estimates via plot.nma_summary(). Enables centering predictors (center = TRUE) nma() regression model given, replacing agd_sample_size argument nma() Enables production study-specific relative effects, rank probabilities, etc. studies network regression model given Allows nodes network plots weighted sample size Feature: Plots residual deviance contributions model “dev-dev” plots comparing residual deviance contributions two models, using plot() method nma_dic objects produced dic(). Feature: Complementary log-log (cloglog) link function link = \"cloglog\" binomial likelihoods. Feature: Option specify priors heterogeneity standard deviation, variance, precision, argument prior_het_type. Feature: Added log-Normal prior distribution. Feature: Plots prior distributions vs. posterior distributions plot_prior_posterior(). Feature: Pairs plot method pairs(). Feature: Added vignettes example analyses NICE TSDs . Fix: Random effects models even moderate numbers studies slow. now run much quickly, using sparse representation RE correlation matrix automatically enabled sparsity 90% (roughly equivalent 10 studies).","code":""},{"path":"https://dmphillippo.github.io/multinma/dev/news/index.html","id":"multinma-001","dir":"Changelog","previous_headings":"","what":"multinma 0.0.1","title":"multinma 0.0.1","text":"Initial release.","code":""}]
